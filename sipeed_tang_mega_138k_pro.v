// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_mega_138k_pro.v
// Device     : GW5AST-LV138FPG676AES
// LiteX sha1 : c3e87367c
// Date       : 2024-09-28 16:45:56
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sipeed_tang_mega_138k_pro (
    input  wire          clk50,
    output wire          led_n0,
    output wire          led_n1,
    output wire          led_n2,
    output wire          led_n3,
    output wire          led_n4,
    output wire          led_n5,
    input  wire          rst,
    input  wire          serial_rx,
    output reg           serial_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GW5APLL)
│    │    └─── [PLL]
└─── bus (SoCBusHandler)
│    └─── wishbone2axi_0* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── wishbone2axi_1* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── axi2axilite_0* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── _interconnect (AXIInterconnectShared)
│    │    └─── arbiter (AXIArbiter)
│    │    │    └─── rr_write (RoundRobin)
│    │    │    └─── rr_read (RoundRobin)
│    │    │    └─── wr_lock (_AXIRequestCounter)
│    │    │    └─── rd_lock (_AXIRequestCounter)
│    │    └─── decoder (AXIDecoder)
│    │    │    └─── _axirequestcounter_0* (_AXIRequestCounter)
│    │    │    └─── _axirequestcounter_1* (_AXIRequestCounter)
│    │    └─── timeout (AXITimeout)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    │    └─── waittimer_1* (WaitTimer)
│    │    │    └─── wr_fsm (FSM)
│    │    │    └─── rd_fsm (FSM)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (AXILiteSRAM)
│    └─── fsm (FSM)
└─── sram (AXILiteSRAM)
│    └─── fsm (FSM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (AXILite2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [DFFP]
└─── [DFFP]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          ar_first;
wire          ar_last;
wire          ar_param_dest;
wire          ar_param_id;
wire          ar_param_user;
wire   [31:0] ar_payload_addr;
wire    [1:0] ar_payload_burst;
wire    [3:0] ar_payload_cache;
wire    [7:0] ar_payload_len;
wire          ar_payload_lock;
wire    [2:0] ar_payload_prot;
wire    [3:0] ar_payload_qos;
wire    [3:0] ar_payload_region;
wire    [2:0] ar_payload_size;
reg           ar_ready = 1'd0;
wire          ar_valid;
wire          aw_first;
wire          aw_last;
wire          aw_param_dest;
wire          aw_param_id;
wire          aw_param_user;
wire   [31:0] aw_payload_addr;
wire    [1:0] aw_payload_burst;
wire    [3:0] aw_payload_cache;
wire    [7:0] aw_payload_len;
wire          aw_payload_lock;
wire    [2:0] aw_payload_prot;
wire    [3:0] aw_payload_qos;
wire    [3:0] aw_payload_region;
wire    [2:0] aw_payload_size;
reg           aw_ready = 1'd0;
wire          aw_valid;
reg     [1:0] axi2axilite_next_state = 2'd0;
reg     [1:0] axi2axilite_state = 2'd0;
reg     [7:0] axirequestcounter0_counter = 8'd0;
wire          axirequestcounter0_empty;
wire          axirequestcounter0_full;
wire          axirequestcounter0_stall;
reg     [7:0] axirequestcounter1_counter = 8'd0;
wire          axirequestcounter1_empty;
wire          axirequestcounter1_full;
wire          axirequestcounter1_stall;
wire          b_first;
wire          b_last;
wire          b_param_dest;
wire          b_param_id;
wire          b_param_user;
reg     [1:0] b_payload_resp = 2'd0;
wire          b_ready;
reg           b_valid = 1'd0;
reg    [13:0] basesoc_adr = 14'd0;
reg           basesoc_axiinterface0_ar_first = 1'd0;
reg           basesoc_axiinterface0_ar_last = 1'd0;
reg           basesoc_axiinterface0_ar_param_dest = 1'd0;
wire          basesoc_axiinterface0_ar_param_id;
reg           basesoc_axiinterface0_ar_param_user = 1'd0;
wire   [31:0] basesoc_axiinterface0_ar_payload_addr;
wire    [1:0] basesoc_axiinterface0_ar_payload_burst;
wire    [3:0] basesoc_axiinterface0_ar_payload_cache;
wire    [7:0] basesoc_axiinterface0_ar_payload_len;
wire          basesoc_axiinterface0_ar_payload_lock;
wire    [2:0] basesoc_axiinterface0_ar_payload_prot;
wire    [3:0] basesoc_axiinterface0_ar_payload_qos;
reg     [3:0] basesoc_axiinterface0_ar_payload_region = 4'd0;
wire    [2:0] basesoc_axiinterface0_ar_payload_size;
reg           basesoc_axiinterface0_ar_ready = 1'd0;
wire          basesoc_axiinterface0_ar_valid;
reg           basesoc_axiinterface0_aw_first = 1'd0;
reg           basesoc_axiinterface0_aw_last = 1'd0;
reg           basesoc_axiinterface0_aw_param_dest = 1'd0;
wire          basesoc_axiinterface0_aw_param_id;
reg           basesoc_axiinterface0_aw_param_user = 1'd0;
wire   [31:0] basesoc_axiinterface0_aw_payload_addr;
wire    [1:0] basesoc_axiinterface0_aw_payload_burst;
wire    [3:0] basesoc_axiinterface0_aw_payload_cache;
wire    [7:0] basesoc_axiinterface0_aw_payload_len;
wire          basesoc_axiinterface0_aw_payload_lock;
wire    [2:0] basesoc_axiinterface0_aw_payload_prot;
wire    [3:0] basesoc_axiinterface0_aw_payload_qos;
reg     [3:0] basesoc_axiinterface0_aw_payload_region = 4'd0;
wire    [2:0] basesoc_axiinterface0_aw_payload_size;
reg           basesoc_axiinterface0_aw_ready = 1'd0;
wire          basesoc_axiinterface0_aw_valid;
wire          basesoc_axiinterface0_b_first;
wire          basesoc_axiinterface0_b_last;
wire          basesoc_axiinterface0_b_param_dest;
wire          basesoc_axiinterface0_b_param_id;
wire          basesoc_axiinterface0_b_param_user;
wire    [1:0] basesoc_axiinterface0_b_payload_resp;
wire          basesoc_axiinterface0_b_ready;
reg           basesoc_axiinterface0_b_valid = 1'd0;
wire          basesoc_axiinterface0_r_first;
wire          basesoc_axiinterface0_r_last;
wire          basesoc_axiinterface0_r_param_dest;
wire          basesoc_axiinterface0_r_param_id;
wire          basesoc_axiinterface0_r_param_user;
wire   [31:0] basesoc_axiinterface0_r_payload_data;
wire    [1:0] basesoc_axiinterface0_r_payload_resp;
wire          basesoc_axiinterface0_r_ready;
reg           basesoc_axiinterface0_r_valid = 1'd0;
reg           basesoc_axiinterface0_w_first = 1'd0;
wire          basesoc_axiinterface0_w_last;
reg           basesoc_axiinterface0_w_param_dest = 1'd0;
reg           basesoc_axiinterface0_w_param_id = 1'd0;
reg           basesoc_axiinterface0_w_param_user = 1'd0;
wire   [31:0] basesoc_axiinterface0_w_payload_data;
wire    [3:0] basesoc_axiinterface0_w_payload_strb;
reg           basesoc_axiinterface0_w_ready = 1'd0;
wire          basesoc_axiinterface0_w_valid;
reg           basesoc_axiinterface1_ar_first = 1'd0;
reg           basesoc_axiinterface1_ar_last = 1'd0;
reg           basesoc_axiinterface1_ar_param_dest = 1'd0;
wire          basesoc_axiinterface1_ar_param_id;
reg           basesoc_axiinterface1_ar_param_user = 1'd0;
wire   [31:0] basesoc_axiinterface1_ar_payload_addr;
wire    [1:0] basesoc_axiinterface1_ar_payload_burst;
wire    [3:0] basesoc_axiinterface1_ar_payload_cache;
wire    [7:0] basesoc_axiinterface1_ar_payload_len;
wire          basesoc_axiinterface1_ar_payload_lock;
wire    [2:0] basesoc_axiinterface1_ar_payload_prot;
wire    [3:0] basesoc_axiinterface1_ar_payload_qos;
reg     [3:0] basesoc_axiinterface1_ar_payload_region = 4'd0;
wire    [2:0] basesoc_axiinterface1_ar_payload_size;
reg           basesoc_axiinterface1_ar_ready = 1'd0;
wire          basesoc_axiinterface1_ar_valid;
reg           basesoc_axiinterface1_aw_first = 1'd0;
reg           basesoc_axiinterface1_aw_last = 1'd0;
reg           basesoc_axiinterface1_aw_param_dest = 1'd0;
wire          basesoc_axiinterface1_aw_param_id;
reg           basesoc_axiinterface1_aw_param_user = 1'd0;
wire   [31:0] basesoc_axiinterface1_aw_payload_addr;
wire    [1:0] basesoc_axiinterface1_aw_payload_burst;
wire    [3:0] basesoc_axiinterface1_aw_payload_cache;
wire    [7:0] basesoc_axiinterface1_aw_payload_len;
wire          basesoc_axiinterface1_aw_payload_lock;
wire    [2:0] basesoc_axiinterface1_aw_payload_prot;
wire    [3:0] basesoc_axiinterface1_aw_payload_qos;
reg     [3:0] basesoc_axiinterface1_aw_payload_region = 4'd0;
wire    [2:0] basesoc_axiinterface1_aw_payload_size;
reg           basesoc_axiinterface1_aw_ready = 1'd0;
wire          basesoc_axiinterface1_aw_valid;
wire          basesoc_axiinterface1_b_first;
wire          basesoc_axiinterface1_b_last;
wire          basesoc_axiinterface1_b_param_dest;
wire          basesoc_axiinterface1_b_param_id;
wire          basesoc_axiinterface1_b_param_user;
wire    [1:0] basesoc_axiinterface1_b_payload_resp;
wire          basesoc_axiinterface1_b_ready;
reg           basesoc_axiinterface1_b_valid = 1'd0;
wire          basesoc_axiinterface1_r_first;
wire          basesoc_axiinterface1_r_last;
wire          basesoc_axiinterface1_r_param_dest;
wire          basesoc_axiinterface1_r_param_id;
wire          basesoc_axiinterface1_r_param_user;
wire   [31:0] basesoc_axiinterface1_r_payload_data;
wire    [1:0] basesoc_axiinterface1_r_payload_resp;
wire          basesoc_axiinterface1_r_ready;
reg           basesoc_axiinterface1_r_valid = 1'd0;
reg           basesoc_axiinterface1_w_first = 1'd0;
wire          basesoc_axiinterface1_w_last;
reg           basesoc_axiinterface1_w_param_dest = 1'd0;
reg           basesoc_axiinterface1_w_param_id = 1'd0;
reg           basesoc_axiinterface1_w_param_user = 1'd0;
wire   [31:0] basesoc_axiinterface1_w_payload_data;
wire    [3:0] basesoc_axiinterface1_w_payload_strb;
reg           basesoc_axiinterface1_w_ready = 1'd0;
wire          basesoc_axiinterface1_w_valid;
reg     [2:0] basesoc_axilite2csr_next_state = 3'd0;
reg     [2:0] basesoc_axilite2csr_state = 3'd0;
reg    [31:0] basesoc_axiliteinterface_ar_payload_addr = 32'd0;
reg           basesoc_axiliteinterface_ar_ready = 1'd0;
reg           basesoc_axiliteinterface_ar_valid = 1'd0;
reg    [31:0] basesoc_axiliteinterface_aw_payload_addr = 32'd0;
reg           basesoc_axiliteinterface_aw_ready = 1'd0;
reg           basesoc_axiliteinterface_aw_valid = 1'd0;
reg     [1:0] basesoc_axiliteinterface_b_payload_resp = 2'd0;
wire          basesoc_axiliteinterface_b_ready;
reg           basesoc_axiliteinterface_b_valid = 1'd0;
reg    [31:0] basesoc_axiliteinterface_r_payload_data = 32'd0;
reg     [1:0] basesoc_axiliteinterface_r_payload_resp = 2'd0;
reg           basesoc_axiliteinterface_r_ready = 1'd0;
reg           basesoc_axiliteinterface_r_valid = 1'd0;
reg    [31:0] basesoc_axiliteinterface_w_payload_data = 32'd0;
reg     [3:0] basesoc_axiliteinterface_w_payload_strb = 4'd0;
reg           basesoc_axiliteinterface_w_ready = 1'd0;
reg           basesoc_axiliteinterface_w_valid = 1'd0;
reg     [2:0] basesoc_axilitesram0_next_state = 3'd0;
reg     [2:0] basesoc_axilitesram0_state = 3'd0;
reg     [2:0] basesoc_axilitesram1_next_state = 3'd0;
reg     [2:0] basesoc_axilitesram1_state = 3'd0;
reg    [14:0] basesoc_basesoc_adr = 15'd0;
wire          basesoc_basesoc_ar_first;
wire          basesoc_basesoc_ar_last;
wire          basesoc_basesoc_ar_param_dest;
wire          basesoc_basesoc_ar_param_id;
wire          basesoc_basesoc_ar_param_user;
wire   [31:0] basesoc_basesoc_ar_payload_addr;
wire    [1:0] basesoc_basesoc_ar_payload_burst;
wire    [3:0] basesoc_basesoc_ar_payload_cache;
wire    [7:0] basesoc_basesoc_ar_payload_len;
wire          basesoc_basesoc_ar_payload_lock;
wire    [2:0] basesoc_basesoc_ar_payload_prot;
wire    [3:0] basesoc_basesoc_ar_payload_qos;
wire    [3:0] basesoc_basesoc_ar_payload_region;
wire    [2:0] basesoc_basesoc_ar_payload_size;
reg           basesoc_basesoc_ar_ready = 1'd0;
wire          basesoc_basesoc_ar_valid;
wire          basesoc_basesoc_aw_first;
wire          basesoc_basesoc_aw_last;
wire          basesoc_basesoc_aw_param_dest;
wire          basesoc_basesoc_aw_param_id;
wire          basesoc_basesoc_aw_param_user;
wire   [31:0] basesoc_basesoc_aw_payload_addr;
wire    [1:0] basesoc_basesoc_aw_payload_burst;
wire    [3:0] basesoc_basesoc_aw_payload_cache;
wire    [7:0] basesoc_basesoc_aw_payload_len;
wire          basesoc_basesoc_aw_payload_lock;
wire    [2:0] basesoc_basesoc_aw_payload_prot;
wire    [3:0] basesoc_basesoc_aw_payload_qos;
wire    [3:0] basesoc_basesoc_aw_payload_region;
wire    [2:0] basesoc_basesoc_aw_payload_size;
reg           basesoc_basesoc_aw_ready = 1'd0;
wire          basesoc_basesoc_aw_valid;
reg           basesoc_basesoc_b_first = 1'd0;
reg           basesoc_basesoc_b_last = 1'd0;
reg           basesoc_basesoc_b_param_dest = 1'd0;
reg           basesoc_basesoc_b_param_id = 1'd0;
reg           basesoc_basesoc_b_param_user = 1'd0;
reg     [1:0] basesoc_basesoc_b_payload_resp = 2'd0;
wire          basesoc_basesoc_b_ready;
reg           basesoc_basesoc_b_valid = 1'd0;
wire   [31:0] basesoc_basesoc_dat_r;
reg           basesoc_basesoc_do_read = 1'd0;
reg           basesoc_basesoc_do_write = 1'd0;
reg           basesoc_basesoc_last_was_read = 1'd0;
reg           basesoc_basesoc_last_was_read_axilitesram0_next_value2 = 1'd0;
reg           basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 = 1'd0;
reg    [14:0] basesoc_basesoc_port_adr_reg = 15'd0;
reg    [14:0] basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 = 15'd0;
reg           basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 = 1'd0;
reg    [31:0] basesoc_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 = 32'd0;
reg           basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 = 1'd0;
reg           basesoc_basesoc_r_first = 1'd0;
reg           basesoc_basesoc_r_last = 1'd0;
reg           basesoc_basesoc_r_param_dest = 1'd0;
reg           basesoc_basesoc_r_param_id = 1'd0;
reg           basesoc_basesoc_r_param_user = 1'd0;
reg    [31:0] basesoc_basesoc_r_payload_data = 32'd0;
reg     [1:0] basesoc_basesoc_r_payload_resp = 2'd0;
wire          basesoc_basesoc_r_ready;
reg           basesoc_basesoc_r_valid = 1'd0;
wire          basesoc_basesoc_w_first;
wire          basesoc_basesoc_w_last;
wire          basesoc_basesoc_w_param_dest;
wire          basesoc_basesoc_w_param_id;
wire          basesoc_basesoc_w_param_user;
wire   [31:0] basesoc_basesoc_w_payload_data;
wire    [3:0] basesoc_basesoc_w_payload_strb;
reg           basesoc_basesoc_w_ready = 1'd0;
wire          basesoc_basesoc_w_valid;
wire          basesoc_bus_error;
reg    [31:0] basesoc_bus_errors = 32'd0;
reg           basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_bus_errors_status;
wire          basesoc_bus_errors_we;
wire          basesoc_cpu_rst;
wire   [31:0] basesoc_dat_r;
wire   [31:0] basesoc_dat_w;
wire          basesoc_dbus_ack;
wire   [29:0] basesoc_dbus_adr;
wire    [1:0] basesoc_dbus_bte;
wire    [2:0] basesoc_dbus_cti;
wire          basesoc_dbus_cyc;
wire   [31:0] basesoc_dbus_dat_r;
wire   [31:0] basesoc_dbus_dat_w;
wire          basesoc_dbus_err;
wire    [3:0] basesoc_dbus_sel;
wire          basesoc_dbus_stb;
wire          basesoc_dbus_we;
reg           basesoc_do_read = 1'd0;
reg           basesoc_do_write = 1'd0;
wire          basesoc_gw5apll0;
wire          basesoc_gw5apll1;
wire          basesoc_gw5apll2;
wire          basesoc_gw5apll3;
wire          basesoc_gw5apll4;
wire          basesoc_gw5apll5;
wire          basesoc_gw5apll6;
wire          basesoc_ibus_ack;
wire   [29:0] basesoc_ibus_adr;
wire    [1:0] basesoc_ibus_bte;
wire    [2:0] basesoc_ibus_cti;
wire          basesoc_ibus_cyc;
wire   [31:0] basesoc_ibus_dat_r;
wire   [31:0] basesoc_ibus_dat_w;
wire          basesoc_ibus_err;
wire    [3:0] basesoc_ibus_sel;
wire          basesoc_ibus_stb;
wire          basesoc_ibus_we;
reg           basesoc_interface0_adapted_interface_ack = 1'd0;
reg    [31:0] basesoc_interface0_adapted_interface_adr = 32'd0;
wire    [1:0] basesoc_interface0_adapted_interface_bte;
wire    [2:0] basesoc_interface0_adapted_interface_cti;
wire          basesoc_interface0_adapted_interface_cyc;
reg    [31:0] basesoc_interface0_adapted_interface_dat_r = 32'd0;
wire   [31:0] basesoc_interface0_adapted_interface_dat_w;
reg           basesoc_interface0_adapted_interface_err = 1'd0;
wire    [3:0] basesoc_interface0_adapted_interface_sel;
wire          basesoc_interface0_adapted_interface_stb;
wire          basesoc_interface0_adapted_interface_we;
reg           basesoc_interface1_adapted_interface_ack = 1'd0;
reg    [31:0] basesoc_interface1_adapted_interface_adr = 32'd0;
wire    [1:0] basesoc_interface1_adapted_interface_bte;
wire    [2:0] basesoc_interface1_adapted_interface_cti;
wire          basesoc_interface1_adapted_interface_cyc;
reg    [31:0] basesoc_interface1_adapted_interface_dat_r = 32'd0;
wire   [31:0] basesoc_interface1_adapted_interface_dat_w;
reg           basesoc_interface1_adapted_interface_err = 1'd0;
wire    [3:0] basesoc_interface1_adapted_interface_sel;
wire          basesoc_interface1_adapted_interface_stb;
wire          basesoc_interface1_adapted_interface_we;
reg    [31:0] basesoc_interrupt = 32'd0;
reg           basesoc_last_was_read = 1'd0;
reg           basesoc_last_was_read_axilite2csr_next_value2 = 1'd0;
reg           basesoc_last_was_read_axilite2csr_next_value_ce2 = 1'd0;
reg    [13:0] basesoc_port_adr_reg = 14'd0;
reg    [13:0] basesoc_port_adr_reg_axilite2csr_next_value0 = 14'd0;
reg           basesoc_port_adr_reg_axilite2csr_next_value_ce0 = 1'd0;
reg    [31:0] basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] basesoc_port_dat_r_latched_axilite2csr_next_value1 = 32'd0;
reg           basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 = 1'd0;
reg    [10:0] basesoc_ram_adr = 11'd0;
wire          basesoc_ram_bus_ar_first;
wire          basesoc_ram_bus_ar_last;
wire          basesoc_ram_bus_ar_param_dest;
wire          basesoc_ram_bus_ar_param_id;
wire          basesoc_ram_bus_ar_param_user;
wire   [31:0] basesoc_ram_bus_ar_payload_addr;
wire    [1:0] basesoc_ram_bus_ar_payload_burst;
wire    [3:0] basesoc_ram_bus_ar_payload_cache;
wire    [7:0] basesoc_ram_bus_ar_payload_len;
wire          basesoc_ram_bus_ar_payload_lock;
wire    [2:0] basesoc_ram_bus_ar_payload_prot;
wire    [3:0] basesoc_ram_bus_ar_payload_qos;
wire    [3:0] basesoc_ram_bus_ar_payload_region;
wire    [2:0] basesoc_ram_bus_ar_payload_size;
reg           basesoc_ram_bus_ar_ready = 1'd0;
wire          basesoc_ram_bus_ar_valid;
wire          basesoc_ram_bus_aw_first;
wire          basesoc_ram_bus_aw_last;
wire          basesoc_ram_bus_aw_param_dest;
wire          basesoc_ram_bus_aw_param_id;
wire          basesoc_ram_bus_aw_param_user;
wire   [31:0] basesoc_ram_bus_aw_payload_addr;
wire    [1:0] basesoc_ram_bus_aw_payload_burst;
wire    [3:0] basesoc_ram_bus_aw_payload_cache;
wire    [7:0] basesoc_ram_bus_aw_payload_len;
wire          basesoc_ram_bus_aw_payload_lock;
wire    [2:0] basesoc_ram_bus_aw_payload_prot;
wire    [3:0] basesoc_ram_bus_aw_payload_qos;
wire    [3:0] basesoc_ram_bus_aw_payload_region;
wire    [2:0] basesoc_ram_bus_aw_payload_size;
reg           basesoc_ram_bus_aw_ready = 1'd0;
wire          basesoc_ram_bus_aw_valid;
reg           basesoc_ram_bus_b_first = 1'd0;
reg           basesoc_ram_bus_b_last = 1'd0;
reg           basesoc_ram_bus_b_param_dest = 1'd0;
reg           basesoc_ram_bus_b_param_id = 1'd0;
reg           basesoc_ram_bus_b_param_user = 1'd0;
reg     [1:0] basesoc_ram_bus_b_payload_resp = 2'd0;
wire          basesoc_ram_bus_b_ready;
reg           basesoc_ram_bus_b_valid = 1'd0;
reg           basesoc_ram_bus_r_first = 1'd0;
reg           basesoc_ram_bus_r_last = 1'd0;
reg           basesoc_ram_bus_r_param_dest = 1'd0;
reg           basesoc_ram_bus_r_param_id = 1'd0;
reg           basesoc_ram_bus_r_param_user = 1'd0;
reg    [31:0] basesoc_ram_bus_r_payload_data = 32'd0;
reg     [1:0] basesoc_ram_bus_r_payload_resp = 2'd0;
wire          basesoc_ram_bus_r_ready;
reg           basesoc_ram_bus_r_valid = 1'd0;
wire          basesoc_ram_bus_w_first;
wire          basesoc_ram_bus_w_last;
wire          basesoc_ram_bus_w_param_dest;
wire          basesoc_ram_bus_w_param_id;
wire          basesoc_ram_bus_w_param_user;
wire   [31:0] basesoc_ram_bus_w_payload_data;
wire    [3:0] basesoc_ram_bus_w_payload_strb;
reg           basesoc_ram_bus_w_ready = 1'd0;
wire          basesoc_ram_bus_w_valid;
wire   [31:0] basesoc_ram_dat_r;
reg    [31:0] basesoc_ram_dat_w = 32'd0;
reg           basesoc_ram_do_read = 1'd0;
reg           basesoc_ram_do_write = 1'd0;
reg           basesoc_ram_last_was_read = 1'd0;
reg           basesoc_ram_last_was_read_axilitesram1_next_value2 = 1'd0;
reg           basesoc_ram_last_was_read_axilitesram1_next_value_ce2 = 1'd0;
reg    [10:0] basesoc_ram_port_adr_reg = 11'd0;
reg    [10:0] basesoc_ram_port_adr_reg_axilitesram1_next_value0 = 11'd0;
reg           basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 = 1'd0;
reg    [31:0] basesoc_ram_port_dat_r_latched = 32'd0;
reg    [31:0] basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 = 32'd0;
reg           basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 = 1'd0;
reg     [3:0] basesoc_ram_we = 4'd0;
wire          basesoc_re;
wire          basesoc_reset;
reg           basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_reset_storage = 2'd0;
reg           basesoc_rs232phyrx_next_state = 1'd0;
reg           basesoc_rs232phyrx_state = 1'd0;
reg           basesoc_rs232phytx_next_state = 1'd0;
reg           basesoc_rs232phytx_state = 1'd0;
reg     [3:0] basesoc_rx_count = 4'd0;
reg     [3:0] basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_rx_data = 8'd0;
reg     [7:0] basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_rx_enable = 1'd0;
reg    [31:0] basesoc_rx_phase = 32'd0;
wire          basesoc_rx_rx;
reg           basesoc_rx_rx_d = 1'd0;
reg           basesoc_rx_source_first = 1'd0;
reg           basesoc_rx_source_last = 1'd0;
reg     [7:0] basesoc_rx_source_payload_data = 8'd0;
wire          basesoc_rx_source_ready;
reg           basesoc_rx_source_valid = 1'd0;
reg           basesoc_rx_tick = 1'd0;
reg           basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_scratch_storage = 32'd305419896;
reg           basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           basesoc_soc_rst = 1'd0;
wire          basesoc_socbushandler_ar_first;
wire          basesoc_socbushandler_ar_last;
wire          basesoc_socbushandler_ar_param_dest;
wire          basesoc_socbushandler_ar_param_id;
wire          basesoc_socbushandler_ar_param_user;
wire   [31:0] basesoc_socbushandler_ar_payload_addr;
wire    [1:0] basesoc_socbushandler_ar_payload_burst;
wire    [3:0] basesoc_socbushandler_ar_payload_cache;
wire    [7:0] basesoc_socbushandler_ar_payload_len;
wire          basesoc_socbushandler_ar_payload_lock;
wire    [2:0] basesoc_socbushandler_ar_payload_prot;
wire    [3:0] basesoc_socbushandler_ar_payload_qos;
wire    [3:0] basesoc_socbushandler_ar_payload_region;
wire    [2:0] basesoc_socbushandler_ar_payload_size;
reg           basesoc_socbushandler_ar_ready = 1'd0;
wire          basesoc_socbushandler_ar_valid;
wire          basesoc_socbushandler_aw_first;
wire          basesoc_socbushandler_aw_last;
wire          basesoc_socbushandler_aw_param_dest;
wire          basesoc_socbushandler_aw_param_id;
wire          basesoc_socbushandler_aw_param_user;
wire   [31:0] basesoc_socbushandler_aw_payload_addr;
wire    [1:0] basesoc_socbushandler_aw_payload_burst;
wire    [3:0] basesoc_socbushandler_aw_payload_cache;
wire    [7:0] basesoc_socbushandler_aw_payload_len;
wire          basesoc_socbushandler_aw_payload_lock;
wire    [2:0] basesoc_socbushandler_aw_payload_prot;
wire    [3:0] basesoc_socbushandler_aw_payload_qos;
wire    [3:0] basesoc_socbushandler_aw_payload_region;
wire    [2:0] basesoc_socbushandler_aw_payload_size;
reg           basesoc_socbushandler_aw_ready = 1'd0;
wire          basesoc_socbushandler_aw_valid;
wire          basesoc_socbushandler_ax_beat_first;
wire          basesoc_socbushandler_ax_beat_last;
wire          basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] basesoc_socbushandler_ax_beat_payload_addr;
reg           basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          basesoc_socbushandler_ax_beat_valid;
reg           basesoc_socbushandler_ax_burst_first = 1'd0;
reg           basesoc_socbushandler_ax_burst_last = 1'd0;
reg           basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          basesoc_socbushandler_ax_burst_ready;
reg           basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           basesoc_socbushandler_b_first = 1'd0;
reg           basesoc_socbushandler_b_last = 1'd0;
reg           basesoc_socbushandler_b_param_dest = 1'd0;
reg           basesoc_socbushandler_b_param_id = 1'd0;
reg           basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] basesoc_socbushandler_b_payload_resp = 2'd0;
wire          basesoc_socbushandler_b_ready;
reg           basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] basesoc_socbushandler_beat_size;
wire   [11:0] basesoc_socbushandler_beat_wrap;
reg           basesoc_socbushandler_cmd_done = 1'd0;
reg           basesoc_socbushandler_cmd_done_axi2axilite_next_value0 = 1'd0;
reg           basesoc_socbushandler_cmd_done_axi2axilite_next_value_ce0 = 1'd0;
reg           basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value1 = 1'd0;
reg           basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value_ce1 = 1'd0;
wire          basesoc_socbushandler_pipe_valid_sink_first;
wire          basesoc_socbushandler_pipe_valid_sink_last;
wire          basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          basesoc_socbushandler_pipe_valid_sink_param_id;
wire          basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          basesoc_socbushandler_pipe_valid_sink_ready;
wire          basesoc_socbushandler_pipe_valid_sink_valid;
reg           basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          basesoc_socbushandler_pipe_valid_source_ready;
reg           basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           basesoc_socbushandler_r_first = 1'd0;
reg           basesoc_socbushandler_r_last = 1'd0;
reg           basesoc_socbushandler_r_param_dest = 1'd0;
reg           basesoc_socbushandler_r_param_id = 1'd0;
reg           basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] basesoc_socbushandler_r_payload_resp = 2'd0;
wire          basesoc_socbushandler_r_ready;
reg           basesoc_socbushandler_r_valid = 1'd0;
wire          basesoc_socbushandler_sink_sink_first;
wire          basesoc_socbushandler_sink_sink_last;
wire          basesoc_socbushandler_sink_sink_param_dest;
wire          basesoc_socbushandler_sink_sink_param_id;
wire          basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] basesoc_socbushandler_sink_sink_payload_len;
wire          basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] basesoc_socbushandler_sink_sink_payload_size;
wire          basesoc_socbushandler_sink_sink_ready;
wire          basesoc_socbushandler_sink_sink_valid;
wire          basesoc_socbushandler_source_source_first;
wire          basesoc_socbushandler_source_source_last;
wire          basesoc_socbushandler_source_source_param_dest;
wire          basesoc_socbushandler_source_source_param_id;
wire          basesoc_socbushandler_source_source_param_user;
wire   [31:0] basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] basesoc_socbushandler_source_source_payload_len;
wire          basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] basesoc_socbushandler_source_source_payload_region;
wire    [2:0] basesoc_socbushandler_source_source_payload_size;
reg           basesoc_socbushandler_source_source_ready = 1'd0;
wire          basesoc_socbushandler_source_source_valid;
wire          basesoc_socbushandler_w_first;
wire          basesoc_socbushandler_w_last;
wire          basesoc_socbushandler_w_param_dest;
wire          basesoc_socbushandler_w_param_id;
wire          basesoc_socbushandler_w_param_user;
wire   [31:0] basesoc_socbushandler_w_payload_data;
wire    [3:0] basesoc_socbushandler_w_payload_strb;
reg           basesoc_socbushandler_w_ready = 1'd0;
wire          basesoc_socbushandler_w_valid;
reg           basesoc_timer_en_re = 1'd0;
reg           basesoc_timer_en_storage = 1'd0;
reg           basesoc_timer_enable_re = 1'd0;
reg           basesoc_timer_enable_storage = 1'd0;
wire          basesoc_timer_irq;
reg           basesoc_timer_load_re = 1'd0;
reg    [31:0] basesoc_timer_load_storage = 32'd0;
reg           basesoc_timer_pending_r = 1'd0;
reg           basesoc_timer_pending_re = 1'd0;
reg           basesoc_timer_pending_status = 1'd0;
wire          basesoc_timer_pending_we;
reg           basesoc_timer_reload_re = 1'd0;
reg    [31:0] basesoc_timer_reload_storage = 32'd0;
reg           basesoc_timer_status_re = 1'd0;
reg           basesoc_timer_status_status = 1'd0;
wire          basesoc_timer_status_we;
reg           basesoc_timer_update_value_re = 1'd0;
reg           basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] basesoc_timer_value = 32'd0;
reg           basesoc_timer_value_re = 1'd0;
reg    [31:0] basesoc_timer_value_status = 32'd0;
wire          basesoc_timer_value_we;
wire          basesoc_timer_zero0;
wire          basesoc_timer_zero1;
wire          basesoc_timer_zero2;
reg           basesoc_timer_zero_clear = 1'd0;
reg           basesoc_timer_zero_pending = 1'd0;
wire          basesoc_timer_zero_status;
wire          basesoc_timer_zero_trigger;
reg           basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] basesoc_tx_count = 4'd0;
reg     [3:0] basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_tx_data = 8'd0;
reg     [7:0] basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_tx_enable = 1'd0;
reg    [31:0] basesoc_tx_phase = 32'd0;
wire          basesoc_tx_sink_first;
wire          basesoc_tx_sink_last;
wire    [7:0] basesoc_tx_sink_payload_data;
reg           basesoc_tx_sink_ready = 1'd0;
wire          basesoc_tx_sink_valid;
reg           basesoc_tx_tick = 1'd0;
reg           basesoc_uart_enable_re = 1'd0;
reg     [1:0] basesoc_uart_enable_storage = 2'd0;
wire          basesoc_uart_irq;
reg     [1:0] basesoc_uart_pending_r = 2'd0;
reg           basesoc_uart_pending_re = 1'd0;
reg     [1:0] basesoc_uart_pending_status = 2'd0;
wire          basesoc_uart_pending_we;
wire          basesoc_uart_rx0;
wire          basesoc_uart_rx1;
wire          basesoc_uart_rx2;
reg           basesoc_uart_rx_clear = 1'd0;
reg     [3:0] basesoc_uart_rx_fifo_consume = 4'd0;
wire          basesoc_uart_rx_fifo_do_read;
wire          basesoc_uart_rx_fifo_fifo_in_first;
wire          basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          basesoc_uart_rx_fifo_fifo_out_first;
wire          basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_rx_fifo_level1;
reg     [3:0] basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_rx_fifo_rdport_dat_r;
wire          basesoc_uart_rx_fifo_rdport_re;
wire          basesoc_uart_rx_fifo_re;
reg           basesoc_uart_rx_fifo_readable = 1'd0;
reg           basesoc_uart_rx_fifo_replace = 1'd0;
wire          basesoc_uart_rx_fifo_sink_first;
wire          basesoc_uart_rx_fifo_sink_last;
wire    [7:0] basesoc_uart_rx_fifo_sink_payload_data;
wire          basesoc_uart_rx_fifo_sink_ready;
wire          basesoc_uart_rx_fifo_sink_valid;
wire          basesoc_uart_rx_fifo_source_first;
wire          basesoc_uart_rx_fifo_source_last;
wire    [7:0] basesoc_uart_rx_fifo_source_payload_data;
wire          basesoc_uart_rx_fifo_source_ready;
wire          basesoc_uart_rx_fifo_source_valid;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_dout;
wire          basesoc_uart_rx_fifo_syncfifo_re;
wire          basesoc_uart_rx_fifo_syncfifo_readable;
wire          basesoc_uart_rx_fifo_syncfifo_we;
wire          basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_w;
wire          basesoc_uart_rx_fifo_wrport_we;
reg           basesoc_uart_rx_pending = 1'd0;
wire          basesoc_uart_rx_status;
wire          basesoc_uart_rx_trigger;
reg           basesoc_uart_rx_trigger_d = 1'd0;
reg           basesoc_uart_rxempty_re = 1'd0;
wire          basesoc_uart_rxempty_status;
wire          basesoc_uart_rxempty_we;
reg           basesoc_uart_rxfull_re = 1'd0;
wire          basesoc_uart_rxfull_status;
wire          basesoc_uart_rxfull_we;
wire    [7:0] basesoc_uart_rxtx_r;
reg           basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] basesoc_uart_rxtx_w;
reg           basesoc_uart_rxtx_we = 1'd0;
reg           basesoc_uart_status_re = 1'd0;
reg     [1:0] basesoc_uart_status_status = 2'd0;
wire          basesoc_uart_status_we;
wire          basesoc_uart_tx0;
wire          basesoc_uart_tx1;
wire          basesoc_uart_tx2;
reg           basesoc_uart_tx_clear = 1'd0;
reg     [3:0] basesoc_uart_tx_fifo_consume = 4'd0;
wire          basesoc_uart_tx_fifo_do_read;
wire          basesoc_uart_tx_fifo_fifo_in_first;
wire          basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          basesoc_uart_tx_fifo_fifo_out_first;
wire          basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_tx_fifo_level1;
reg     [3:0] basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_tx_fifo_rdport_dat_r;
wire          basesoc_uart_tx_fifo_rdport_re;
wire          basesoc_uart_tx_fifo_re;
reg           basesoc_uart_tx_fifo_readable = 1'd0;
reg           basesoc_uart_tx_fifo_replace = 1'd0;
reg           basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] basesoc_uart_tx_fifo_sink_payload_data;
wire          basesoc_uart_tx_fifo_sink_ready;
wire          basesoc_uart_tx_fifo_sink_valid;
wire          basesoc_uart_tx_fifo_source_first;
wire          basesoc_uart_tx_fifo_source_last;
wire    [7:0] basesoc_uart_tx_fifo_source_payload_data;
wire          basesoc_uart_tx_fifo_source_ready;
wire          basesoc_uart_tx_fifo_source_valid;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_dout;
wire          basesoc_uart_tx_fifo_syncfifo_re;
wire          basesoc_uart_tx_fifo_syncfifo_readable;
wire          basesoc_uart_tx_fifo_syncfifo_we;
wire          basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_w;
wire          basesoc_uart_tx_fifo_wrport_we;
reg           basesoc_uart_tx_pending = 1'd0;
wire          basesoc_uart_tx_status;
wire          basesoc_uart_tx_trigger;
reg           basesoc_uart_tx_trigger_d = 1'd0;
reg           basesoc_uart_txempty_re = 1'd0;
wire          basesoc_uart_txempty_status;
wire          basesoc_uart_txempty_we;
reg           basesoc_uart_txfull_re = 1'd0;
wire          basesoc_uart_txfull_status;
wire          basesoc_uart_txfull_we;
wire          basesoc_uart_uart_sink_first;
wire          basesoc_uart_uart_sink_last;
wire    [7:0] basesoc_uart_uart_sink_payload_data;
wire          basesoc_uart_uart_sink_ready;
wire          basesoc_uart_uart_sink_valid;
wire          basesoc_uart_uart_source_first;
wire          basesoc_uart_uart_source_last;
wire    [7:0] basesoc_uart_uart_source_payload_data;
wire          basesoc_uart_uart_source_ready;
wire          basesoc_uart_uart_source_valid;
reg    [31:0] basesoc_vexriscv = 32'd0;
wire          basesoc_we;
wire   [31:0] basesoc_wishbone2axi0_addr;
reg    [31:0] basesoc_wishbone2axi0_ar_payload_addr = 32'd0;
wire          basesoc_wishbone2axi0_ar_ready;
reg           basesoc_wishbone2axi0_ar_valid = 1'd0;
reg    [31:0] basesoc_wishbone2axi0_aw_payload_addr = 32'd0;
wire          basesoc_wishbone2axi0_aw_ready;
reg           basesoc_wishbone2axi0_aw_valid = 1'd0;
wire    [1:0] basesoc_wishbone2axi0_b_payload_resp;
reg           basesoc_wishbone2axi0_b_ready = 1'd0;
wire          basesoc_wishbone2axi0_b_valid;
reg           basesoc_wishbone2axi0_cmd_done = 1'd0;
reg           basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 = 1'd0;
reg           basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 = 1'd0;
reg           basesoc_wishbone2axi0_data_done = 1'd0;
reg           basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value1 = 1'd0;
reg           basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 = 1'd0;
wire   [31:0] basesoc_wishbone2axi0_r_payload_data;
wire    [1:0] basesoc_wishbone2axi0_r_payload_resp;
reg           basesoc_wishbone2axi0_r_ready = 1'd0;
wire          basesoc_wishbone2axi0_r_valid;
reg    [31:0] basesoc_wishbone2axi0_w_payload_data = 32'd0;
reg     [3:0] basesoc_wishbone2axi0_w_payload_strb = 4'd0;
wire          basesoc_wishbone2axi0_w_ready;
reg           basesoc_wishbone2axi0_w_valid = 1'd0;
wire   [31:0] basesoc_wishbone2axi1_addr;
reg    [31:0] basesoc_wishbone2axi1_ar_payload_addr = 32'd0;
wire          basesoc_wishbone2axi1_ar_ready;
reg           basesoc_wishbone2axi1_ar_valid = 1'd0;
reg    [31:0] basesoc_wishbone2axi1_aw_payload_addr = 32'd0;
wire          basesoc_wishbone2axi1_aw_ready;
reg           basesoc_wishbone2axi1_aw_valid = 1'd0;
wire    [1:0] basesoc_wishbone2axi1_b_payload_resp;
reg           basesoc_wishbone2axi1_b_ready = 1'd0;
wire          basesoc_wishbone2axi1_b_valid;
reg           basesoc_wishbone2axi1_cmd_done = 1'd0;
reg           basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 = 1'd0;
reg           basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 = 1'd0;
reg           basesoc_wishbone2axi1_data_done = 1'd0;
reg           basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value1 = 1'd0;
reg           basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 = 1'd0;
wire   [31:0] basesoc_wishbone2axi1_r_payload_data;
wire    [1:0] basesoc_wishbone2axi1_r_payload_resp;
reg           basesoc_wishbone2axi1_r_ready = 1'd0;
wire          basesoc_wishbone2axi1_r_valid;
reg    [31:0] basesoc_wishbone2axi1_w_payload_data = 32'd0;
reg     [3:0] basesoc_wishbone2axi1_w_payload_strb = 4'd0;
wire          basesoc_wishbone2axi1_w_ready;
reg           basesoc_wishbone2axi1_w_valid = 1'd0;
reg     [5:0] chaser = 6'd0;
reg    [21:0] count = 22'd4166666;
wire          crg_clkin;
wire          crg_clkout;
wire          crg_locked;
reg    [15:0] crg_por_count = 16'd65535;
wire          crg_por_done;
wire          crg_reset;
reg           crg_rst = 1'd0;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire    [5:0] csr_bankarray_csrbank1_out0_r;
reg           csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [5:0] csr_bankarray_csrbank1_out0_w;
reg           csr_bankarray_csrbank1_out0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire          csr_bankarray_csrbank2_en0_r;
reg           csr_bankarray_csrbank2_en0_re = 1'd0;
wire          csr_bankarray_csrbank2_en0_w;
reg           csr_bankarray_csrbank2_en0_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_enable0_r;
reg           csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_enable0_w;
reg           csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_pending_r;
reg           csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_pending_w;
reg           csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank2_ev_status_r;
reg           csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank2_ev_status_w;
reg           csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_load0_r;
reg           csr_bankarray_csrbank2_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_load0_w;
reg           csr_bankarray_csrbank2_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_reload0_r;
reg           csr_bankarray_csrbank2_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_reload0_w;
reg           csr_bankarray_csrbank2_reload0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire          csr_bankarray_csrbank2_update_value0_r;
reg           csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank2_update_value0_w;
reg           csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_value_r;
reg           csr_bankarray_csrbank2_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_value_w;
reg           csr_bankarray_csrbank2_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_r;
reg           csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_w;
reg           csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_r;
reg           csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_w;
reg           csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_r;
reg           csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_w;
reg           csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_r;
reg           csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_w;
reg           csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_r;
reg           csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_w;
reg           csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank3_txempty_r;
reg           csr_bankarray_csrbank3_txempty_re = 1'd0;
wire          csr_bankarray_csrbank3_txempty_w;
reg           csr_bankarray_csrbank3_txempty_we = 1'd0;
wire          csr_bankarray_csrbank3_txfull_r;
reg           csr_bankarray_csrbank3_txfull_re = 1'd0;
wire          csr_bankarray_csrbank3_txfull_w;
reg           csr_bankarray_csrbank3_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_re;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_re;
wire          csr_bankarray_interface3_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
wire          done;
wire          error;
reg           fsm0_next_state = 1'd0;
reg           fsm0_state = 1'd0;
reg           fsm1_next_state = 1'd0;
reg           fsm1_state = 1'd0;
reg     [5:0] leds = 6'd0;
reg           mode = 1'd0;
reg           multiregimpl0 = 1'd0;
reg           multiregimpl1 = 1'd0;
wire          por_clk;
reg           por_rst = 1'd0;
wire          r_first;
reg           r_last = 1'd0;
wire          r_param_dest;
wire          r_param_id;
wire          r_param_user;
reg    [31:0] r_payload_data = 32'd0;
reg     [1:0] r_payload_resp = 2'd0;
wire          r_ready;
reg           r_valid = 1'd0;
reg           rd_error = 1'd0;
reg     [7:0] rd_lock_counter = 8'd0;
wire          rd_lock_empty;
wire          rd_lock_full;
wire          rd_lock_stall;
reg    [19:0] rd_timer_count = 20'd1000000;
wire          rd_timer_done;
reg           rd_timer_wait = 1'd0;
reg           re = 1'd0;
wire          rr_read_ce;
reg           rr_read_grant = 1'd0;
wire    [1:0] rr_read_request;
wire          rr_write_ce;
reg           rr_write_grant = 1'd0;
wire    [1:0] rr_write_request;
wire          rst1;
reg           self0 = 1'd0;
reg           self1 = 1'd0;
reg     [3:0] self10 = 4'd0;
reg     [3:0] self11 = 4'd0;
reg           self12 = 1'd0;
reg           self13 = 1'd0;
reg           self14 = 1'd0;
reg           self15 = 1'd0;
reg           self16 = 1'd0;
reg           self17 = 1'd0;
reg    [31:0] self18 = 32'd0;
reg     [3:0] self19 = 4'd0;
reg           self2 = 1'd0;
reg           self20 = 1'd0;
reg           self21 = 1'd0;
reg           self22 = 1'd0;
reg           self23 = 1'd0;
reg           self24 = 1'd0;
reg           self25 = 1'd0;
reg           self26 = 1'd0;
reg    [31:0] self27 = 32'd0;
reg     [1:0] self28 = 2'd0;
reg     [7:0] self29 = 8'd0;
reg    [31:0] self3 = 32'd0;
reg     [2:0] self30 = 3'd0;
reg           self31 = 1'd0;
reg     [2:0] self32 = 3'd0;
reg     [3:0] self33 = 4'd0;
reg     [3:0] self34 = 4'd0;
reg     [3:0] self35 = 4'd0;
reg           self36 = 1'd0;
reg           self37 = 1'd0;
reg           self38 = 1'd0;
reg           self39 = 1'd0;
reg     [1:0] self4 = 2'd0;
reg     [7:0] self5 = 8'd0;
reg     [2:0] self6 = 3'd0;
reg           self7 = 1'd0;
reg     [2:0] self8 = 3'd0;
reg     [3:0] self9 = 4'd0;
reg     [2:0] slave_sel0 = 3'd0;
reg     [2:0] slave_sel1 = 3'd0;
reg     [2:0] slave_sel_dec0 = 3'd0;
reg     [2:0] slave_sel_dec1 = 3'd0;
reg     [2:0] slave_sel_reg0 = 3'd0;
reg     [2:0] slave_sel_reg1 = 3'd0;
wire   [29:0] slice_proxy0;
wire   [29:0] slice_proxy1;
wire   [29:0] slice_proxy2;
wire   [29:0] slice_proxy3;
wire   [29:0] slice_proxy4;
wire   [29:0] slice_proxy5;
reg     [5:0] storage = 6'd0;
wire          sys_clk;
wire          sys_rst;
wire          w_first;
wire          w_last;
wire          w_param_dest;
wire          w_param_id;
wire          w_param_user;
wire   [31:0] w_payload_data;
wire    [3:0] w_payload_strb;
reg           w_ready = 1'd0;
wire          w_valid;
wire          wait_1;
reg     [1:0] wishbone2axi0_next_state = 2'd0;
reg     [1:0] wishbone2axi0_state = 2'd0;
reg     [1:0] wishbone2axi1_next_state = 2'd0;
reg     [1:0] wishbone2axi1_state = 2'd0;
reg           wr_error = 1'd0;
reg     [7:0] wr_lock_counter = 8'd0;
wire          wr_lock_empty;
wire          wr_lock_full;
wire          wr_lock_stall;
reg    [19:0] wr_timer_count = 20'd1000000;
wire          wr_timer_done;
reg           wr_timer_wait = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_reset = (basesoc_soc_rst | basesoc_cpu_rst);
always @(*) begin
    crg_rst <= 1'd0;
    if (basesoc_soc_rst) begin
        crg_rst <= 1'd1;
    end
end
assign basesoc_bus_error = error;
always @(*) begin
    basesoc_interrupt <= 32'd0;
    basesoc_interrupt[1] <= basesoc_timer_irq;
    basesoc_interrupt[0] <= basesoc_uart_irq;
end
assign por_clk = clk50;
assign crg_por_done = (crg_por_count == 1'd0);
assign crg_reset = ((~crg_por_done) | rst);
assign crg_clkin = clk50;
assign sys_clk = crg_clkout;
assign basesoc_interface0_adapted_interface_dat_w = basesoc_ibus_dat_w;
assign basesoc_ibus_dat_r = basesoc_interface0_adapted_interface_dat_r;
assign basesoc_interface0_adapted_interface_sel = basesoc_ibus_sel;
assign basesoc_interface0_adapted_interface_cyc = basesoc_ibus_cyc;
assign basesoc_interface0_adapted_interface_stb = basesoc_ibus_stb;
assign basesoc_ibus_ack = basesoc_interface0_adapted_interface_ack;
assign basesoc_interface0_adapted_interface_we = basesoc_ibus_we;
assign basesoc_interface0_adapted_interface_cti = basesoc_ibus_cti;
assign basesoc_interface0_adapted_interface_bte = basesoc_ibus_bte;
assign basesoc_ibus_err = basesoc_interface0_adapted_interface_err;
always @(*) begin
    basesoc_interface0_adapted_interface_adr <= 32'd0;
    basesoc_interface0_adapted_interface_adr[31:2] <= basesoc_ibus_adr;
end
assign basesoc_interface1_adapted_interface_dat_w = basesoc_dbus_dat_w;
assign basesoc_dbus_dat_r = basesoc_interface1_adapted_interface_dat_r;
assign basesoc_interface1_adapted_interface_sel = basesoc_dbus_sel;
assign basesoc_interface1_adapted_interface_cyc = basesoc_dbus_cyc;
assign basesoc_interface1_adapted_interface_stb = basesoc_dbus_stb;
assign basesoc_dbus_ack = basesoc_interface1_adapted_interface_ack;
assign basesoc_interface1_adapted_interface_we = basesoc_dbus_we;
assign basesoc_interface1_adapted_interface_cti = basesoc_dbus_cti;
assign basesoc_interface1_adapted_interface_bte = basesoc_dbus_bte;
assign basesoc_dbus_err = basesoc_interface1_adapted_interface_err;
always @(*) begin
    basesoc_interface1_adapted_interface_adr <= 32'd0;
    basesoc_interface1_adapted_interface_adr[31:2] <= basesoc_dbus_adr;
end
assign basesoc_wishbone2axi0_addr = (basesoc_interface0_adapted_interface_adr - 1'd0);
always @(*) begin
    basesoc_interface0_adapted_interface_ack <= 1'd0;
    basesoc_interface0_adapted_interface_dat_r <= 32'd0;
    basesoc_interface0_adapted_interface_err <= 1'd0;
    basesoc_wishbone2axi0_ar_payload_addr <= 32'd0;
    basesoc_wishbone2axi0_ar_valid <= 1'd0;
    basesoc_wishbone2axi0_aw_payload_addr <= 32'd0;
    basesoc_wishbone2axi0_aw_valid <= 1'd0;
    basesoc_wishbone2axi0_b_ready <= 1'd0;
    basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd0;
    basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd0;
    basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd0;
    basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd0;
    basesoc_wishbone2axi0_r_ready <= 1'd0;
    basesoc_wishbone2axi0_w_payload_data <= 32'd0;
    basesoc_wishbone2axi0_w_payload_strb <= 4'd0;
    basesoc_wishbone2axi0_w_valid <= 1'd0;
    wishbone2axi0_next_state <= 2'd0;
    wishbone2axi0_next_state <= wishbone2axi0_state;
    case (wishbone2axi0_state)
        1'd1: begin
            basesoc_wishbone2axi0_aw_valid <= (~basesoc_wishbone2axi0_cmd_done);
            basesoc_wishbone2axi0_aw_payload_addr[31:0] <= basesoc_wishbone2axi0_addr;
            if ((basesoc_wishbone2axi0_aw_valid & basesoc_wishbone2axi0_aw_ready)) begin
                basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd1;
                basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            end
            basesoc_wishbone2axi0_w_valid <= (~basesoc_wishbone2axi0_data_done);
            basesoc_wishbone2axi0_w_payload_data <= basesoc_interface0_adapted_interface_dat_w;
            basesoc_wishbone2axi0_w_payload_strb <= basesoc_interface0_adapted_interface_sel;
            if ((basesoc_wishbone2axi0_w_valid & basesoc_wishbone2axi0_w_ready)) begin
                basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd1;
                basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd1;
            end
            basesoc_wishbone2axi0_b_ready <= (basesoc_wishbone2axi0_cmd_done & basesoc_wishbone2axi0_data_done);
            if ((basesoc_wishbone2axi0_b_valid & basesoc_wishbone2axi0_b_ready)) begin
                if ((basesoc_wishbone2axi0_b_payload_resp == 1'd0)) begin
                    basesoc_interface0_adapted_interface_ack <= 1'd1;
                    wishbone2axi0_next_state <= 1'd0;
                end else begin
                    wishbone2axi0_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            basesoc_wishbone2axi0_ar_valid <= (~basesoc_wishbone2axi0_cmd_done);
            basesoc_wishbone2axi0_ar_payload_addr[31:0] <= basesoc_wishbone2axi0_addr;
            if ((basesoc_wishbone2axi0_ar_valid & basesoc_wishbone2axi0_ar_ready)) begin
                basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd1;
                basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            end
            basesoc_wishbone2axi0_r_ready <= basesoc_wishbone2axi0_cmd_done;
            if ((basesoc_wishbone2axi0_r_valid & basesoc_wishbone2axi0_r_ready)) begin
                if ((basesoc_wishbone2axi0_r_payload_resp == 1'd0)) begin
                    basesoc_interface0_adapted_interface_dat_r <= basesoc_wishbone2axi0_r_payload_data;
                    basesoc_interface0_adapted_interface_ack <= 1'd1;
                    wishbone2axi0_next_state <= 1'd0;
                end else begin
                    wishbone2axi0_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            basesoc_interface0_adapted_interface_ack <= 1'd1;
            basesoc_interface0_adapted_interface_err <= 1'd1;
            wishbone2axi0_next_state <= 1'd0;
        end
        default: begin
            basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd0;
            basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd0;
            basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd1;
            if ((basesoc_interface0_adapted_interface_stb & basesoc_interface0_adapted_interface_cyc)) begin
                if (basesoc_interface0_adapted_interface_we) begin
                    wishbone2axi0_next_state <= 1'd1;
                end else begin
                    wishbone2axi0_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign basesoc_axiinterface0_aw_valid = basesoc_wishbone2axi0_aw_valid;
assign basesoc_wishbone2axi0_aw_ready = basesoc_axiinterface0_aw_ready;
assign basesoc_axiinterface0_aw_payload_addr = basesoc_wishbone2axi0_aw_payload_addr;
assign basesoc_axiinterface0_aw_payload_burst = 1'd1;
assign basesoc_axiinterface0_aw_payload_len = 1'd0;
assign basesoc_axiinterface0_aw_payload_size = 2'd2;
assign basesoc_axiinterface0_aw_payload_lock = 1'd0;
assign basesoc_axiinterface0_aw_payload_prot = 1'd0;
assign basesoc_axiinterface0_aw_payload_cache = 2'd3;
assign basesoc_axiinterface0_aw_payload_qos = 1'd0;
assign basesoc_axiinterface0_aw_param_id = 1'd0;
assign basesoc_axiinterface0_w_valid = basesoc_wishbone2axi0_w_valid;
assign basesoc_wishbone2axi0_w_ready = basesoc_axiinterface0_w_ready;
assign basesoc_axiinterface0_w_payload_data = basesoc_wishbone2axi0_w_payload_data;
assign basesoc_axiinterface0_w_payload_strb = basesoc_wishbone2axi0_w_payload_strb;
assign basesoc_axiinterface0_w_last = 1'd1;
assign basesoc_wishbone2axi0_b_valid = basesoc_axiinterface0_b_valid;
assign basesoc_wishbone2axi0_b_payload_resp = basesoc_axiinterface0_b_payload_resp;
assign basesoc_axiinterface0_b_ready = basesoc_wishbone2axi0_b_ready;
assign basesoc_axiinterface0_ar_valid = basesoc_wishbone2axi0_ar_valid;
assign basesoc_wishbone2axi0_ar_ready = basesoc_axiinterface0_ar_ready;
assign basesoc_axiinterface0_ar_payload_addr = basesoc_wishbone2axi0_ar_payload_addr;
assign basesoc_axiinterface0_ar_payload_burst = 1'd1;
assign basesoc_axiinterface0_ar_payload_len = 1'd0;
assign basesoc_axiinterface0_ar_payload_size = 2'd2;
assign basesoc_axiinterface0_ar_payload_lock = 1'd0;
assign basesoc_axiinterface0_ar_payload_prot = 1'd0;
assign basesoc_axiinterface0_ar_payload_cache = 2'd3;
assign basesoc_axiinterface0_ar_payload_qos = 1'd0;
assign basesoc_axiinterface0_ar_param_id = 1'd0;
assign basesoc_wishbone2axi0_r_valid = basesoc_axiinterface0_r_valid;
assign basesoc_wishbone2axi0_r_payload_resp = basesoc_axiinterface0_r_payload_resp;
assign basesoc_wishbone2axi0_r_payload_data = basesoc_axiinterface0_r_payload_data;
assign basesoc_axiinterface0_r_ready = basesoc_wishbone2axi0_r_ready;
assign basesoc_wishbone2axi1_addr = (basesoc_interface1_adapted_interface_adr - 1'd0);
always @(*) begin
    basesoc_interface1_adapted_interface_ack <= 1'd0;
    basesoc_interface1_adapted_interface_dat_r <= 32'd0;
    basesoc_interface1_adapted_interface_err <= 1'd0;
    basesoc_wishbone2axi1_ar_payload_addr <= 32'd0;
    basesoc_wishbone2axi1_ar_valid <= 1'd0;
    basesoc_wishbone2axi1_aw_payload_addr <= 32'd0;
    basesoc_wishbone2axi1_aw_valid <= 1'd0;
    basesoc_wishbone2axi1_b_ready <= 1'd0;
    basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd0;
    basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd0;
    basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd0;
    basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd0;
    basesoc_wishbone2axi1_r_ready <= 1'd0;
    basesoc_wishbone2axi1_w_payload_data <= 32'd0;
    basesoc_wishbone2axi1_w_payload_strb <= 4'd0;
    basesoc_wishbone2axi1_w_valid <= 1'd0;
    wishbone2axi1_next_state <= 2'd0;
    wishbone2axi1_next_state <= wishbone2axi1_state;
    case (wishbone2axi1_state)
        1'd1: begin
            basesoc_wishbone2axi1_aw_valid <= (~basesoc_wishbone2axi1_cmd_done);
            basesoc_wishbone2axi1_aw_payload_addr[31:0] <= basesoc_wishbone2axi1_addr;
            if ((basesoc_wishbone2axi1_aw_valid & basesoc_wishbone2axi1_aw_ready)) begin
                basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd1;
                basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            end
            basesoc_wishbone2axi1_w_valid <= (~basesoc_wishbone2axi1_data_done);
            basesoc_wishbone2axi1_w_payload_data <= basesoc_interface1_adapted_interface_dat_w;
            basesoc_wishbone2axi1_w_payload_strb <= basesoc_interface1_adapted_interface_sel;
            if ((basesoc_wishbone2axi1_w_valid & basesoc_wishbone2axi1_w_ready)) begin
                basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd1;
                basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd1;
            end
            basesoc_wishbone2axi1_b_ready <= (basesoc_wishbone2axi1_cmd_done & basesoc_wishbone2axi1_data_done);
            if ((basesoc_wishbone2axi1_b_valid & basesoc_wishbone2axi1_b_ready)) begin
                if ((basesoc_wishbone2axi1_b_payload_resp == 1'd0)) begin
                    basesoc_interface1_adapted_interface_ack <= 1'd1;
                    wishbone2axi1_next_state <= 1'd0;
                end else begin
                    wishbone2axi1_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            basesoc_wishbone2axi1_ar_valid <= (~basesoc_wishbone2axi1_cmd_done);
            basesoc_wishbone2axi1_ar_payload_addr[31:0] <= basesoc_wishbone2axi1_addr;
            if ((basesoc_wishbone2axi1_ar_valid & basesoc_wishbone2axi1_ar_ready)) begin
                basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd1;
                basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            end
            basesoc_wishbone2axi1_r_ready <= basesoc_wishbone2axi1_cmd_done;
            if ((basesoc_wishbone2axi1_r_valid & basesoc_wishbone2axi1_r_ready)) begin
                if ((basesoc_wishbone2axi1_r_payload_resp == 1'd0)) begin
                    basesoc_interface1_adapted_interface_dat_r <= basesoc_wishbone2axi1_r_payload_data;
                    basesoc_interface1_adapted_interface_ack <= 1'd1;
                    wishbone2axi1_next_state <= 1'd0;
                end else begin
                    wishbone2axi1_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            basesoc_interface1_adapted_interface_ack <= 1'd1;
            basesoc_interface1_adapted_interface_err <= 1'd1;
            wishbone2axi1_next_state <= 1'd0;
        end
        default: begin
            basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd0;
            basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd0;
            basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd1;
            if ((basesoc_interface1_adapted_interface_stb & basesoc_interface1_adapted_interface_cyc)) begin
                if (basesoc_interface1_adapted_interface_we) begin
                    wishbone2axi1_next_state <= 1'd1;
                end else begin
                    wishbone2axi1_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign basesoc_axiinterface1_aw_valid = basesoc_wishbone2axi1_aw_valid;
assign basesoc_wishbone2axi1_aw_ready = basesoc_axiinterface1_aw_ready;
assign basesoc_axiinterface1_aw_payload_addr = basesoc_wishbone2axi1_aw_payload_addr;
assign basesoc_axiinterface1_aw_payload_burst = 1'd1;
assign basesoc_axiinterface1_aw_payload_len = 1'd0;
assign basesoc_axiinterface1_aw_payload_size = 2'd2;
assign basesoc_axiinterface1_aw_payload_lock = 1'd0;
assign basesoc_axiinterface1_aw_payload_prot = 1'd0;
assign basesoc_axiinterface1_aw_payload_cache = 2'd3;
assign basesoc_axiinterface1_aw_payload_qos = 1'd0;
assign basesoc_axiinterface1_aw_param_id = 1'd0;
assign basesoc_axiinterface1_w_valid = basesoc_wishbone2axi1_w_valid;
assign basesoc_wishbone2axi1_w_ready = basesoc_axiinterface1_w_ready;
assign basesoc_axiinterface1_w_payload_data = basesoc_wishbone2axi1_w_payload_data;
assign basesoc_axiinterface1_w_payload_strb = basesoc_wishbone2axi1_w_payload_strb;
assign basesoc_axiinterface1_w_last = 1'd1;
assign basesoc_wishbone2axi1_b_valid = basesoc_axiinterface1_b_valid;
assign basesoc_wishbone2axi1_b_payload_resp = basesoc_axiinterface1_b_payload_resp;
assign basesoc_axiinterface1_b_ready = basesoc_wishbone2axi1_b_ready;
assign basesoc_axiinterface1_ar_valid = basesoc_wishbone2axi1_ar_valid;
assign basesoc_wishbone2axi1_ar_ready = basesoc_axiinterface1_ar_ready;
assign basesoc_axiinterface1_ar_payload_addr = basesoc_wishbone2axi1_ar_payload_addr;
assign basesoc_axiinterface1_ar_payload_burst = 1'd1;
assign basesoc_axiinterface1_ar_payload_len = 1'd0;
assign basesoc_axiinterface1_ar_payload_size = 2'd2;
assign basesoc_axiinterface1_ar_payload_lock = 1'd0;
assign basesoc_axiinterface1_ar_payload_prot = 1'd0;
assign basesoc_axiinterface1_ar_payload_cache = 2'd3;
assign basesoc_axiinterface1_ar_payload_qos = 1'd0;
assign basesoc_axiinterface1_ar_param_id = 1'd0;
assign basesoc_wishbone2axi1_r_valid = basesoc_axiinterface1_r_valid;
assign basesoc_wishbone2axi1_r_payload_resp = basesoc_axiinterface1_r_payload_resp;
assign basesoc_wishbone2axi1_r_payload_data = basesoc_axiinterface1_r_payload_data;
assign basesoc_axiinterface1_r_ready = basesoc_wishbone2axi1_r_ready;
assign basesoc_socbushandler_sink_sink_valid = basesoc_socbushandler_ax_burst_valid;
assign basesoc_socbushandler_ax_burst_ready = basesoc_socbushandler_sink_sink_ready;
assign basesoc_socbushandler_sink_sink_first = basesoc_socbushandler_ax_burst_first;
assign basesoc_socbushandler_sink_sink_last = basesoc_socbushandler_ax_burst_last;
assign basesoc_socbushandler_sink_sink_payload_addr = basesoc_socbushandler_ax_burst_payload_addr;
assign basesoc_socbushandler_sink_sink_payload_burst = basesoc_socbushandler_ax_burst_payload_burst;
assign basesoc_socbushandler_sink_sink_payload_len = basesoc_socbushandler_ax_burst_payload_len;
assign basesoc_socbushandler_sink_sink_payload_size = basesoc_socbushandler_ax_burst_payload_size;
assign basesoc_socbushandler_sink_sink_payload_lock = basesoc_socbushandler_ax_burst_payload_lock;
assign basesoc_socbushandler_sink_sink_payload_prot = basesoc_socbushandler_ax_burst_payload_prot;
assign basesoc_socbushandler_sink_sink_payload_cache = basesoc_socbushandler_ax_burst_payload_cache;
assign basesoc_socbushandler_sink_sink_payload_qos = basesoc_socbushandler_ax_burst_payload_qos;
assign basesoc_socbushandler_sink_sink_payload_region = basesoc_socbushandler_ax_burst_payload_region;
assign basesoc_socbushandler_sink_sink_param_id = basesoc_socbushandler_ax_burst_param_id;
assign basesoc_socbushandler_sink_sink_param_dest = basesoc_socbushandler_ax_burst_param_dest;
assign basesoc_socbushandler_sink_sink_param_user = basesoc_socbushandler_ax_burst_param_user;
assign basesoc_axiliteinterface_b_ready = 1'd1;
assign basesoc_socbushandler_pipe_valid_sink_ready = ((~basesoc_socbushandler_pipe_valid_source_valid) | basesoc_socbushandler_pipe_valid_source_ready);
assign basesoc_socbushandler_pipe_valid_sink_valid = basesoc_socbushandler_sink_sink_valid;
assign basesoc_socbushandler_sink_sink_ready = basesoc_socbushandler_pipe_valid_sink_ready;
assign basesoc_socbushandler_pipe_valid_sink_first = basesoc_socbushandler_sink_sink_first;
assign basesoc_socbushandler_pipe_valid_sink_last = basesoc_socbushandler_sink_sink_last;
assign basesoc_socbushandler_pipe_valid_sink_payload_addr = basesoc_socbushandler_sink_sink_payload_addr;
assign basesoc_socbushandler_pipe_valid_sink_payload_burst = basesoc_socbushandler_sink_sink_payload_burst;
assign basesoc_socbushandler_pipe_valid_sink_payload_len = basesoc_socbushandler_sink_sink_payload_len;
assign basesoc_socbushandler_pipe_valid_sink_payload_size = basesoc_socbushandler_sink_sink_payload_size;
assign basesoc_socbushandler_pipe_valid_sink_payload_lock = basesoc_socbushandler_sink_sink_payload_lock;
assign basesoc_socbushandler_pipe_valid_sink_payload_prot = basesoc_socbushandler_sink_sink_payload_prot;
assign basesoc_socbushandler_pipe_valid_sink_payload_cache = basesoc_socbushandler_sink_sink_payload_cache;
assign basesoc_socbushandler_pipe_valid_sink_payload_qos = basesoc_socbushandler_sink_sink_payload_qos;
assign basesoc_socbushandler_pipe_valid_sink_payload_region = basesoc_socbushandler_sink_sink_payload_region;
assign basesoc_socbushandler_pipe_valid_sink_param_id = basesoc_socbushandler_sink_sink_param_id;
assign basesoc_socbushandler_pipe_valid_sink_param_dest = basesoc_socbushandler_sink_sink_param_dest;
assign basesoc_socbushandler_pipe_valid_sink_param_user = basesoc_socbushandler_sink_sink_param_user;
assign basesoc_socbushandler_source_source_valid = basesoc_socbushandler_pipe_valid_source_valid;
assign basesoc_socbushandler_pipe_valid_source_ready = basesoc_socbushandler_source_source_ready;
assign basesoc_socbushandler_source_source_first = basesoc_socbushandler_pipe_valid_source_first;
assign basesoc_socbushandler_source_source_last = basesoc_socbushandler_pipe_valid_source_last;
assign basesoc_socbushandler_source_source_payload_addr = basesoc_socbushandler_pipe_valid_source_payload_addr;
assign basesoc_socbushandler_source_source_payload_burst = basesoc_socbushandler_pipe_valid_source_payload_burst;
assign basesoc_socbushandler_source_source_payload_len = basesoc_socbushandler_pipe_valid_source_payload_len;
assign basesoc_socbushandler_source_source_payload_size = basesoc_socbushandler_pipe_valid_source_payload_size;
assign basesoc_socbushandler_source_source_payload_lock = basesoc_socbushandler_pipe_valid_source_payload_lock;
assign basesoc_socbushandler_source_source_payload_prot = basesoc_socbushandler_pipe_valid_source_payload_prot;
assign basesoc_socbushandler_source_source_payload_cache = basesoc_socbushandler_pipe_valid_source_payload_cache;
assign basesoc_socbushandler_source_source_payload_qos = basesoc_socbushandler_pipe_valid_source_payload_qos;
assign basesoc_socbushandler_source_source_payload_region = basesoc_socbushandler_pipe_valid_source_payload_region;
assign basesoc_socbushandler_source_source_param_id = basesoc_socbushandler_pipe_valid_source_param_id;
assign basesoc_socbushandler_source_source_param_dest = basesoc_socbushandler_pipe_valid_source_param_dest;
assign basesoc_socbushandler_source_source_param_user = basesoc_socbushandler_pipe_valid_source_param_user;
assign basesoc_socbushandler_beat_size = (1'd1 <<< basesoc_socbushandler_source_source_payload_size);
assign basesoc_socbushandler_beat_wrap = (basesoc_socbushandler_source_source_payload_len <<< basesoc_socbushandler_source_source_payload_size);
assign basesoc_socbushandler_ax_beat_valid = (basesoc_socbushandler_source_source_valid | (~basesoc_socbushandler_ax_beat_first));
assign basesoc_socbushandler_ax_beat_first = (basesoc_socbushandler_beat_count == 1'd0);
assign basesoc_socbushandler_ax_beat_last = (basesoc_socbushandler_beat_count == basesoc_socbushandler_source_source_payload_len);
assign basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, basesoc_socbushandler_source_source_payload_addr}) + basesoc_socbushandler_beat_offset);
assign basesoc_socbushandler_ax_beat_param_id = basesoc_socbushandler_source_source_param_id;
always @(*) begin
    basesoc_socbushandler_source_source_ready <= 1'd0;
    if (basesoc_socbushandler_ax_beat_ready) begin
        if (basesoc_socbushandler_ax_beat_last) begin
            basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    axi2axilite_next_state <= 2'd0;
    basesoc_axiliteinterface_ar_payload_addr <= 32'd0;
    basesoc_axiliteinterface_ar_valid <= 1'd0;
    basesoc_axiliteinterface_aw_payload_addr <= 32'd0;
    basesoc_axiliteinterface_aw_valid <= 1'd0;
    basesoc_axiliteinterface_r_ready <= 1'd0;
    basesoc_axiliteinterface_w_payload_data <= 32'd0;
    basesoc_axiliteinterface_w_payload_strb <= 4'd0;
    basesoc_axiliteinterface_w_valid <= 1'd0;
    basesoc_socbushandler_ar_ready <= 1'd0;
    basesoc_socbushandler_aw_ready <= 1'd0;
    basesoc_socbushandler_ax_beat_ready <= 1'd0;
    basesoc_socbushandler_ax_burst_first <= 1'd0;
    basesoc_socbushandler_ax_burst_last <= 1'd0;
    basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    basesoc_socbushandler_ax_burst_valid <= 1'd0;
    basesoc_socbushandler_b_param_id <= 1'd0;
    basesoc_socbushandler_b_payload_resp <= 2'd0;
    basesoc_socbushandler_b_valid <= 1'd0;
    basesoc_socbushandler_cmd_done_axi2axilite_next_value0 <= 1'd0;
    basesoc_socbushandler_cmd_done_axi2axilite_next_value_ce0 <= 1'd0;
    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd0;
    basesoc_socbushandler_r_last <= 1'd0;
    basesoc_socbushandler_r_param_id <= 1'd0;
    basesoc_socbushandler_r_payload_data <= 32'd0;
    basesoc_socbushandler_r_payload_resp <= 2'd0;
    basesoc_socbushandler_r_valid <= 1'd0;
    basesoc_socbushandler_w_ready <= 1'd0;
    axi2axilite_next_state <= axi2axilite_state;
    case (axi2axilite_state)
        1'd1: begin
            basesoc_axiliteinterface_ar_valid <= (basesoc_socbushandler_ax_beat_valid & (~basesoc_socbushandler_cmd_done));
            basesoc_axiliteinterface_ar_payload_addr <= basesoc_socbushandler_ax_beat_payload_addr;
            basesoc_socbushandler_ax_beat_ready <= (basesoc_axiliteinterface_ar_ready & (~basesoc_socbushandler_cmd_done));
            if ((basesoc_socbushandler_ax_beat_valid & basesoc_socbushandler_ax_beat_last)) begin
                if (basesoc_axiliteinterface_ar_ready) begin
                    basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    basesoc_socbushandler_cmd_done_axi2axilite_next_value0 <= 1'd1;
                    basesoc_socbushandler_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_socbushandler_r_valid <= basesoc_axiliteinterface_r_valid;
            basesoc_socbushandler_r_last <= basesoc_socbushandler_cmd_done;
            basesoc_socbushandler_r_payload_resp <= 1'd0;
            basesoc_socbushandler_r_param_id <= basesoc_socbushandler_ax_beat_param_id;
            basesoc_socbushandler_r_payload_data <= basesoc_axiliteinterface_r_payload_data;
            basesoc_axiliteinterface_r_ready <= basesoc_socbushandler_r_ready;
            if (((basesoc_socbushandler_r_valid & basesoc_socbushandler_r_last) & basesoc_socbushandler_r_ready)) begin
                basesoc_socbushandler_ax_beat_ready <= 1'd1;
                axi2axilite_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_axiliteinterface_aw_valid <= (basesoc_socbushandler_ax_beat_valid & (~basesoc_socbushandler_cmd_done));
            basesoc_axiliteinterface_aw_payload_addr <= basesoc_socbushandler_ax_beat_payload_addr;
            basesoc_socbushandler_ax_beat_ready <= (basesoc_axiliteinterface_aw_ready & (~basesoc_socbushandler_cmd_done));
            if ((basesoc_socbushandler_ax_beat_valid & basesoc_socbushandler_ax_beat_last)) begin
                if (basesoc_axiliteinterface_aw_ready) begin
                    basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    basesoc_socbushandler_cmd_done_axi2axilite_next_value0 <= 1'd1;
                    basesoc_socbushandler_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_axiliteinterface_w_valid <= basesoc_socbushandler_w_valid;
            basesoc_axiliteinterface_w_payload_data <= basesoc_socbushandler_w_payload_data;
            basesoc_axiliteinterface_w_payload_strb <= basesoc_socbushandler_w_payload_strb;
            basesoc_socbushandler_w_ready <= basesoc_axiliteinterface_w_ready;
            if (((basesoc_socbushandler_w_valid & basesoc_socbushandler_w_last) & basesoc_socbushandler_w_ready)) begin
                axi2axilite_next_state <= 2'd3;
            end
        end
        2'd3: begin
            basesoc_socbushandler_b_valid <= 1'd1;
            basesoc_socbushandler_b_payload_resp <= 1'd0;
            basesoc_socbushandler_b_param_id <= basesoc_socbushandler_ax_beat_param_id;
            if (basesoc_socbushandler_b_ready) begin
                basesoc_socbushandler_ax_beat_ready <= 1'd1;
                axi2axilite_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_socbushandler_cmd_done_axi2axilite_next_value0 <= 1'd0;
            basesoc_socbushandler_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
            if ((basesoc_socbushandler_ar_valid & basesoc_socbushandler_aw_valid)) begin
                if (basesoc_socbushandler_last_ar_aw_n) begin
                    basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_aw_valid;
                    basesoc_socbushandler_aw_ready <= basesoc_socbushandler_ax_burst_ready;
                    basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_aw_first;
                    basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_aw_last;
                    basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_aw_payload_addr;
                    basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_aw_payload_burst;
                    basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_aw_payload_len;
                    basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_aw_payload_size;
                    basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_aw_payload_lock;
                    basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_aw_payload_prot;
                    basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_aw_payload_cache;
                    basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_aw_payload_qos;
                    basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_aw_payload_region;
                    basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_aw_param_id;
                    basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_aw_param_dest;
                    basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_aw_param_user;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    axi2axilite_next_state <= 2'd2;
                end else begin
                    basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_ar_valid;
                    basesoc_socbushandler_ar_ready <= basesoc_socbushandler_ax_burst_ready;
                    basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_ar_first;
                    basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_ar_last;
                    basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_ar_payload_addr;
                    basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_ar_payload_burst;
                    basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_ar_payload_len;
                    basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_ar_payload_size;
                    basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_ar_payload_lock;
                    basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_ar_payload_prot;
                    basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_ar_payload_cache;
                    basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_ar_payload_qos;
                    basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_ar_payload_region;
                    basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_ar_param_id;
                    basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_ar_param_dest;
                    basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_ar_param_user;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value1 <= 1'd1;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    axi2axilite_next_state <= 1'd1;
                end
            end else begin
                if (basesoc_socbushandler_ar_valid) begin
                    basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_ar_valid;
                    basesoc_socbushandler_ar_ready <= basesoc_socbushandler_ax_burst_ready;
                    basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_ar_first;
                    basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_ar_last;
                    basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_ar_payload_addr;
                    basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_ar_payload_burst;
                    basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_ar_payload_len;
                    basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_ar_payload_size;
                    basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_ar_payload_lock;
                    basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_ar_payload_prot;
                    basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_ar_payload_cache;
                    basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_ar_payload_qos;
                    basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_ar_payload_region;
                    basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_ar_param_id;
                    basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_ar_param_dest;
                    basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_ar_param_user;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value1 <= 1'd1;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    axi2axilite_next_state <= 1'd1;
                end else begin
                    if (basesoc_socbushandler_aw_valid) begin
                        basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_aw_valid;
                        basesoc_socbushandler_aw_ready <= basesoc_socbushandler_ax_burst_ready;
                        basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_aw_first;
                        basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_aw_last;
                        basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_aw_payload_addr;
                        basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_aw_payload_burst;
                        basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_aw_payload_len;
                        basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_aw_payload_size;
                        basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_aw_payload_lock;
                        basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_aw_payload_prot;
                        basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_aw_payload_cache;
                        basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_aw_payload_qos;
                        basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_aw_payload_region;
                        basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_aw_param_id;
                        basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_aw_param_dest;
                        basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_aw_param_user;
                        basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
                        basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                        axi2axilite_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign aw_valid = self0;
assign aw_first = self1;
assign aw_last = self2;
assign aw_payload_addr = self3;
assign aw_payload_burst = self4;
assign aw_payload_len = self5;
assign aw_payload_size = self6;
assign aw_payload_lock = self7;
assign aw_payload_prot = self8;
assign aw_payload_cache = self9;
assign aw_payload_qos = self10;
assign aw_payload_region = self11;
assign aw_param_id = self12;
assign aw_param_dest = self13;
assign aw_param_user = self14;
assign w_valid = self15;
assign w_first = self16;
assign w_last = self17;
assign w_payload_data = self18;
assign w_payload_strb = self19;
assign w_param_id = self20;
assign w_param_dest = self21;
assign w_param_user = self22;
assign b_ready = self23;
assign ar_valid = self24;
assign ar_first = self25;
assign ar_last = self26;
assign ar_payload_addr = self27;
assign ar_payload_burst = self28;
assign ar_payload_len = self29;
assign ar_payload_size = self30;
assign ar_payload_lock = self31;
assign ar_payload_prot = self32;
assign ar_payload_cache = self33;
assign ar_payload_qos = self34;
assign ar_payload_region = self35;
assign ar_param_id = self36;
assign ar_param_dest = self37;
assign ar_param_user = self38;
assign r_ready = self39;
always @(*) begin
    basesoc_axiinterface0_aw_ready <= 1'd0;
    if ((rr_write_grant == 1'd0)) begin
        basesoc_axiinterface0_aw_ready <= aw_ready;
    end
end
always @(*) begin
    basesoc_axiinterface1_aw_ready <= 1'd0;
    if ((rr_write_grant == 1'd1)) begin
        basesoc_axiinterface1_aw_ready <= aw_ready;
    end
end
always @(*) begin
    basesoc_axiinterface0_w_ready <= 1'd0;
    if ((rr_write_grant == 1'd0)) begin
        basesoc_axiinterface0_w_ready <= w_ready;
    end
end
always @(*) begin
    basesoc_axiinterface1_w_ready <= 1'd0;
    if ((rr_write_grant == 1'd1)) begin
        basesoc_axiinterface1_w_ready <= w_ready;
    end
end
always @(*) begin
    basesoc_axiinterface0_b_valid <= 1'd0;
    if ((rr_write_grant == 1'd0)) begin
        basesoc_axiinterface0_b_valid <= b_valid;
    end
end
always @(*) begin
    basesoc_axiinterface1_b_valid <= 1'd0;
    if ((rr_write_grant == 1'd1)) begin
        basesoc_axiinterface1_b_valid <= b_valid;
    end
end
assign basesoc_axiinterface0_b_first = b_first;
assign basesoc_axiinterface1_b_first = b_first;
assign basesoc_axiinterface0_b_last = b_last;
assign basesoc_axiinterface1_b_last = b_last;
assign basesoc_axiinterface0_b_payload_resp = b_payload_resp;
assign basesoc_axiinterface1_b_payload_resp = b_payload_resp;
assign basesoc_axiinterface0_b_param_id = b_param_id;
assign basesoc_axiinterface1_b_param_id = b_param_id;
assign basesoc_axiinterface0_b_param_dest = b_param_dest;
assign basesoc_axiinterface1_b_param_dest = b_param_dest;
assign basesoc_axiinterface0_b_param_user = b_param_user;
assign basesoc_axiinterface1_b_param_user = b_param_user;
always @(*) begin
    basesoc_axiinterface0_ar_ready <= 1'd0;
    if ((rr_read_grant == 1'd0)) begin
        basesoc_axiinterface0_ar_ready <= ar_ready;
    end
end
always @(*) begin
    basesoc_axiinterface1_ar_ready <= 1'd0;
    if ((rr_read_grant == 1'd1)) begin
        basesoc_axiinterface1_ar_ready <= ar_ready;
    end
end
always @(*) begin
    basesoc_axiinterface0_r_valid <= 1'd0;
    if ((rr_read_grant == 1'd0)) begin
        basesoc_axiinterface0_r_valid <= r_valid;
    end
end
always @(*) begin
    basesoc_axiinterface1_r_valid <= 1'd0;
    if ((rr_read_grant == 1'd1)) begin
        basesoc_axiinterface1_r_valid <= r_valid;
    end
end
assign basesoc_axiinterface0_r_first = r_first;
assign basesoc_axiinterface1_r_first = r_first;
assign basesoc_axiinterface0_r_last = r_last;
assign basesoc_axiinterface1_r_last = r_last;
assign basesoc_axiinterface0_r_payload_resp = r_payload_resp;
assign basesoc_axiinterface1_r_payload_resp = r_payload_resp;
assign basesoc_axiinterface0_r_payload_data = r_payload_data;
assign basesoc_axiinterface1_r_payload_data = r_payload_data;
assign basesoc_axiinterface0_r_param_id = r_param_id;
assign basesoc_axiinterface1_r_param_id = r_param_id;
assign basesoc_axiinterface0_r_param_dest = r_param_dest;
assign basesoc_axiinterface1_r_param_dest = r_param_dest;
assign basesoc_axiinterface0_r_param_user = r_param_user;
assign basesoc_axiinterface1_r_param_user = r_param_user;
assign rr_write_ce = ((~((aw_valid | w_valid) | b_valid)) & wr_lock_empty);
assign rr_read_ce = ((~(ar_valid | r_valid)) & rd_lock_empty);
assign rr_write_request = {((basesoc_axiinterface1_aw_valid | basesoc_axiinterface1_w_valid) | basesoc_axiinterface1_b_valid), ((basesoc_axiinterface0_aw_valid | basesoc_axiinterface0_w_valid) | basesoc_axiinterface0_b_valid)};
assign rr_read_request = {(basesoc_axiinterface1_ar_valid | basesoc_axiinterface1_r_valid), (basesoc_axiinterface0_ar_valid | basesoc_axiinterface0_r_valid)};
assign wr_lock_full = (wr_lock_counter == 8'd255);
assign wr_lock_empty = (wr_lock_counter == 1'd0);
assign wr_lock_stall = ((aw_valid & aw_ready) & wr_lock_full);
assign rd_lock_full = (rd_lock_counter == 8'd255);
assign rd_lock_empty = (rd_lock_counter == 1'd0);
assign rd_lock_stall = ((ar_valid & ar_ready) & rd_lock_full);
always @(*) begin
    slave_sel_dec0 <= 3'd0;
    slave_sel_dec0[0] <= (slice_proxy0[29:15] == 1'd0);
    slave_sel_dec0[1] <= (slice_proxy2[29:11] == 16'd32768);
    slave_sel_dec0[2] <= (slice_proxy4[29:14] == 16'd61440);
end
always @(*) begin
    slave_sel_dec1 <= 3'd0;
    slave_sel_dec1[0] <= (slice_proxy1[29:15] == 1'd0);
    slave_sel_dec1[1] <= (slice_proxy3[29:11] == 16'd32768);
    slave_sel_dec1[2] <= (slice_proxy5[29:14] == 16'd61440);
end
always @(*) begin
    slave_sel0 <= 3'd0;
    if (axirequestcounter0_empty) begin
        slave_sel0 <= slave_sel_dec0;
    end else begin
        slave_sel0 <= slave_sel_reg0;
    end
end
always @(*) begin
    slave_sel1 <= 3'd0;
    if (axirequestcounter1_empty) begin
        slave_sel1 <= slave_sel_dec1;
    end else begin
        slave_sel1 <= slave_sel_reg1;
    end
end
assign basesoc_basesoc_aw_valid = (aw_valid & slave_sel0[0]);
assign basesoc_basesoc_aw_first = aw_first;
assign basesoc_basesoc_aw_last = aw_last;
assign basesoc_basesoc_aw_payload_addr = aw_payload_addr;
assign basesoc_basesoc_aw_payload_burst = aw_payload_burst;
assign basesoc_basesoc_aw_payload_len = aw_payload_len;
assign basesoc_basesoc_aw_payload_size = aw_payload_size;
assign basesoc_basesoc_aw_payload_lock = aw_payload_lock;
assign basesoc_basesoc_aw_payload_prot = aw_payload_prot;
assign basesoc_basesoc_aw_payload_cache = aw_payload_cache;
assign basesoc_basesoc_aw_payload_qos = aw_payload_qos;
assign basesoc_basesoc_aw_payload_region = aw_payload_region;
assign basesoc_basesoc_aw_param_id = aw_param_id;
assign basesoc_basesoc_aw_param_dest = aw_param_dest;
assign basesoc_basesoc_aw_param_user = aw_param_user;
assign basesoc_basesoc_w_valid = (w_valid & slave_sel0[0]);
assign basesoc_basesoc_w_first = w_first;
assign basesoc_basesoc_w_last = w_last;
assign basesoc_basesoc_w_payload_data = w_payload_data;
assign basesoc_basesoc_w_payload_strb = w_payload_strb;
assign basesoc_basesoc_w_param_id = w_param_id;
assign basesoc_basesoc_w_param_dest = w_param_dest;
assign basesoc_basesoc_w_param_user = w_param_user;
assign basesoc_basesoc_b_ready = (b_ready & slave_sel0[0]);
assign basesoc_basesoc_ar_valid = (ar_valid & slave_sel1[0]);
assign basesoc_basesoc_ar_first = ar_first;
assign basesoc_basesoc_ar_last = ar_last;
assign basesoc_basesoc_ar_payload_addr = ar_payload_addr;
assign basesoc_basesoc_ar_payload_burst = ar_payload_burst;
assign basesoc_basesoc_ar_payload_len = ar_payload_len;
assign basesoc_basesoc_ar_payload_size = ar_payload_size;
assign basesoc_basesoc_ar_payload_lock = ar_payload_lock;
assign basesoc_basesoc_ar_payload_prot = ar_payload_prot;
assign basesoc_basesoc_ar_payload_cache = ar_payload_cache;
assign basesoc_basesoc_ar_payload_qos = ar_payload_qos;
assign basesoc_basesoc_ar_payload_region = ar_payload_region;
assign basesoc_basesoc_ar_param_id = ar_param_id;
assign basesoc_basesoc_ar_param_dest = ar_param_dest;
assign basesoc_basesoc_ar_param_user = ar_param_user;
assign basesoc_basesoc_r_ready = (r_ready & slave_sel1[0]);
assign basesoc_ram_bus_aw_valid = (aw_valid & slave_sel0[1]);
assign basesoc_ram_bus_aw_first = aw_first;
assign basesoc_ram_bus_aw_last = aw_last;
assign basesoc_ram_bus_aw_payload_addr = aw_payload_addr;
assign basesoc_ram_bus_aw_payload_burst = aw_payload_burst;
assign basesoc_ram_bus_aw_payload_len = aw_payload_len;
assign basesoc_ram_bus_aw_payload_size = aw_payload_size;
assign basesoc_ram_bus_aw_payload_lock = aw_payload_lock;
assign basesoc_ram_bus_aw_payload_prot = aw_payload_prot;
assign basesoc_ram_bus_aw_payload_cache = aw_payload_cache;
assign basesoc_ram_bus_aw_payload_qos = aw_payload_qos;
assign basesoc_ram_bus_aw_payload_region = aw_payload_region;
assign basesoc_ram_bus_aw_param_id = aw_param_id;
assign basesoc_ram_bus_aw_param_dest = aw_param_dest;
assign basesoc_ram_bus_aw_param_user = aw_param_user;
assign basesoc_ram_bus_w_valid = (w_valid & slave_sel0[1]);
assign basesoc_ram_bus_w_first = w_first;
assign basesoc_ram_bus_w_last = w_last;
assign basesoc_ram_bus_w_payload_data = w_payload_data;
assign basesoc_ram_bus_w_payload_strb = w_payload_strb;
assign basesoc_ram_bus_w_param_id = w_param_id;
assign basesoc_ram_bus_w_param_dest = w_param_dest;
assign basesoc_ram_bus_w_param_user = w_param_user;
assign basesoc_ram_bus_b_ready = (b_ready & slave_sel0[1]);
assign basesoc_ram_bus_ar_valid = (ar_valid & slave_sel1[1]);
assign basesoc_ram_bus_ar_first = ar_first;
assign basesoc_ram_bus_ar_last = ar_last;
assign basesoc_ram_bus_ar_payload_addr = ar_payload_addr;
assign basesoc_ram_bus_ar_payload_burst = ar_payload_burst;
assign basesoc_ram_bus_ar_payload_len = ar_payload_len;
assign basesoc_ram_bus_ar_payload_size = ar_payload_size;
assign basesoc_ram_bus_ar_payload_lock = ar_payload_lock;
assign basesoc_ram_bus_ar_payload_prot = ar_payload_prot;
assign basesoc_ram_bus_ar_payload_cache = ar_payload_cache;
assign basesoc_ram_bus_ar_payload_qos = ar_payload_qos;
assign basesoc_ram_bus_ar_payload_region = ar_payload_region;
assign basesoc_ram_bus_ar_param_id = ar_param_id;
assign basesoc_ram_bus_ar_param_dest = ar_param_dest;
assign basesoc_ram_bus_ar_param_user = ar_param_user;
assign basesoc_ram_bus_r_ready = (r_ready & slave_sel1[1]);
assign basesoc_socbushandler_aw_valid = (aw_valid & slave_sel0[2]);
assign basesoc_socbushandler_aw_first = aw_first;
assign basesoc_socbushandler_aw_last = aw_last;
assign basesoc_socbushandler_aw_payload_addr = aw_payload_addr;
assign basesoc_socbushandler_aw_payload_burst = aw_payload_burst;
assign basesoc_socbushandler_aw_payload_len = aw_payload_len;
assign basesoc_socbushandler_aw_payload_size = aw_payload_size;
assign basesoc_socbushandler_aw_payload_lock = aw_payload_lock;
assign basesoc_socbushandler_aw_payload_prot = aw_payload_prot;
assign basesoc_socbushandler_aw_payload_cache = aw_payload_cache;
assign basesoc_socbushandler_aw_payload_qos = aw_payload_qos;
assign basesoc_socbushandler_aw_payload_region = aw_payload_region;
assign basesoc_socbushandler_aw_param_id = aw_param_id;
assign basesoc_socbushandler_aw_param_dest = aw_param_dest;
assign basesoc_socbushandler_aw_param_user = aw_param_user;
assign basesoc_socbushandler_w_valid = (w_valid & slave_sel0[2]);
assign basesoc_socbushandler_w_first = w_first;
assign basesoc_socbushandler_w_last = w_last;
assign basesoc_socbushandler_w_payload_data = w_payload_data;
assign basesoc_socbushandler_w_payload_strb = w_payload_strb;
assign basesoc_socbushandler_w_param_id = w_param_id;
assign basesoc_socbushandler_w_param_dest = w_param_dest;
assign basesoc_socbushandler_w_param_user = w_param_user;
assign basesoc_socbushandler_b_ready = (b_ready & slave_sel0[2]);
assign basesoc_socbushandler_ar_valid = (ar_valid & slave_sel1[2]);
assign basesoc_socbushandler_ar_first = ar_first;
assign basesoc_socbushandler_ar_last = ar_last;
assign basesoc_socbushandler_ar_payload_addr = ar_payload_addr;
assign basesoc_socbushandler_ar_payload_burst = ar_payload_burst;
assign basesoc_socbushandler_ar_payload_len = ar_payload_len;
assign basesoc_socbushandler_ar_payload_size = ar_payload_size;
assign basesoc_socbushandler_ar_payload_lock = ar_payload_lock;
assign basesoc_socbushandler_ar_payload_prot = ar_payload_prot;
assign basesoc_socbushandler_ar_payload_cache = ar_payload_cache;
assign basesoc_socbushandler_ar_payload_qos = ar_payload_qos;
assign basesoc_socbushandler_ar_payload_region = ar_payload_region;
assign basesoc_socbushandler_ar_param_id = ar_param_id;
assign basesoc_socbushandler_ar_param_dest = ar_param_dest;
assign basesoc_socbushandler_ar_param_user = ar_param_user;
assign basesoc_socbushandler_r_ready = (r_ready & slave_sel1[2]);
assign b_first = (((basesoc_basesoc_b_first & {1{slave_sel0[0]}}) | (basesoc_ram_bus_b_first & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_first & {1{slave_sel0[2]}}));
assign b_last = (((basesoc_basesoc_b_last & {1{slave_sel0[0]}}) | (basesoc_ram_bus_b_last & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_last & {1{slave_sel0[2]}}));
assign b_param_id = (((basesoc_basesoc_b_param_id & {1{slave_sel0[0]}}) | (basesoc_ram_bus_b_param_id & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_param_id & {1{slave_sel0[2]}}));
assign b_param_dest = (((basesoc_basesoc_b_param_dest & {1{slave_sel0[0]}}) | (basesoc_ram_bus_b_param_dest & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_param_dest & {1{slave_sel0[2]}}));
assign b_param_user = (((basesoc_basesoc_b_param_user & {1{slave_sel0[0]}}) | (basesoc_ram_bus_b_param_user & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_param_user & {1{slave_sel0[2]}}));
assign r_first = (((basesoc_basesoc_r_first & {1{slave_sel1[0]}}) | (basesoc_ram_bus_r_first & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_first & {1{slave_sel1[2]}}));
assign r_param_id = (((basesoc_basesoc_r_param_id & {1{slave_sel1[0]}}) | (basesoc_ram_bus_r_param_id & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_param_id & {1{slave_sel1[2]}}));
assign r_param_dest = (((basesoc_basesoc_r_param_dest & {1{slave_sel1[0]}}) | (basesoc_ram_bus_r_param_dest & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_param_dest & {1{slave_sel1[2]}}));
assign r_param_user = (((basesoc_basesoc_r_param_user & {1{slave_sel1[0]}}) | (basesoc_ram_bus_r_param_user & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_param_user & {1{slave_sel1[2]}}));
assign axirequestcounter0_full = (axirequestcounter0_counter == 8'd255);
assign axirequestcounter0_empty = (axirequestcounter0_counter == 1'd0);
assign axirequestcounter0_stall = ((aw_valid & aw_ready) & axirequestcounter0_full);
assign axirequestcounter1_full = (axirequestcounter1_counter == 8'd255);
assign axirequestcounter1_empty = (axirequestcounter1_counter == 1'd0);
assign axirequestcounter1_stall = ((ar_valid & ar_ready) & axirequestcounter1_full);
assign error = (wr_error | rd_error);
assign wr_timer_done = (wr_timer_count == 1'd0);
assign rd_timer_done = (rd_timer_count == 1'd0);
always @(*) begin
    aw_ready <= 1'd0;
    b_payload_resp <= 2'd0;
    b_valid <= 1'd0;
    fsm0_next_state <= 1'd0;
    w_ready <= 1'd0;
    wr_error <= 1'd0;
    wr_timer_wait <= 1'd0;
    aw_ready <= (((basesoc_basesoc_aw_ready & {1{slave_sel0[0]}}) | (basesoc_ram_bus_aw_ready & {1{slave_sel0[1]}})) | (basesoc_socbushandler_aw_ready & {1{slave_sel0[2]}}));
    w_ready <= (((basesoc_basesoc_w_ready & {1{slave_sel0[0]}}) | (basesoc_ram_bus_w_ready & {1{slave_sel0[1]}})) | (basesoc_socbushandler_w_ready & {1{slave_sel0[2]}}));
    b_valid <= (((basesoc_basesoc_b_valid & {1{slave_sel0[0]}}) | (basesoc_ram_bus_b_valid & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_valid & {1{slave_sel0[2]}}));
    b_payload_resp <= (((basesoc_basesoc_b_payload_resp & {2{slave_sel0[0]}}) | (basesoc_ram_bus_b_payload_resp & {2{slave_sel0[1]}})) | (basesoc_socbushandler_b_payload_resp & {2{slave_sel0[2]}}));
    fsm0_next_state <= fsm0_state;
    case (fsm0_state)
        1'd1: begin
            aw_ready <= aw_valid;
            w_ready <= w_valid;
            b_valid <= ((~aw_valid) & (~w_valid));
            b_payload_resp <= 2'd2;
            if ((b_valid & b_ready)) begin
                fsm0_next_state <= 1'd0;
            end
        end
        default: begin
            wr_timer_wait <= ((aw_valid & (~aw_ready)) | (w_valid & (~w_ready)));
            if ((wr_timer_done & wr_timer_wait)) begin
                wr_error <= 1'd1;
                fsm0_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    ar_ready <= 1'd0;
    fsm1_next_state <= 1'd0;
    r_last <= 1'd0;
    r_payload_data <= 32'd0;
    r_payload_resp <= 2'd0;
    r_valid <= 1'd0;
    rd_error <= 1'd0;
    rd_timer_wait <= 1'd0;
    ar_ready <= (((basesoc_basesoc_ar_ready & {1{slave_sel1[0]}}) | (basesoc_ram_bus_ar_ready & {1{slave_sel1[1]}})) | (basesoc_socbushandler_ar_ready & {1{slave_sel1[2]}}));
    r_valid <= (((basesoc_basesoc_r_valid & {1{slave_sel1[0]}}) | (basesoc_ram_bus_r_valid & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_valid & {1{slave_sel1[2]}}));
    r_last <= (((basesoc_basesoc_r_last & {1{slave_sel1[0]}}) | (basesoc_ram_bus_r_last & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_last & {1{slave_sel1[2]}}));
    r_payload_resp <= (((basesoc_basesoc_r_payload_resp & {2{slave_sel1[0]}}) | (basesoc_ram_bus_r_payload_resp & {2{slave_sel1[1]}})) | (basesoc_socbushandler_r_payload_resp & {2{slave_sel1[2]}}));
    r_payload_data <= (((basesoc_basesoc_r_payload_data & {32{slave_sel1[0]}}) | (basesoc_ram_bus_r_payload_data & {32{slave_sel1[1]}})) | (basesoc_socbushandler_r_payload_data & {32{slave_sel1[2]}}));
    fsm1_next_state <= fsm1_state;
    case (fsm1_state)
        1'd1: begin
            ar_ready <= ar_valid;
            r_valid <= (~ar_valid);
            r_last <= 1'd1;
            r_payload_resp <= 2'd2;
            r_payload_data <= 32'd4294967295;
            if ((r_valid & r_ready)) begin
                fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            rd_timer_wait <= (ar_valid & (~ar_ready));
            if ((rd_timer_done & rd_timer_wait)) begin
                rd_error <= 1'd1;
                fsm1_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_bus_errors_status = basesoc_bus_errors;
always @(*) begin
    basesoc_axilitesram0_next_state <= 3'd0;
    basesoc_basesoc_adr <= 15'd0;
    basesoc_basesoc_ar_ready <= 1'd0;
    basesoc_basesoc_aw_ready <= 1'd0;
    basesoc_basesoc_b_payload_resp <= 2'd0;
    basesoc_basesoc_b_valid <= 1'd0;
    basesoc_basesoc_do_read <= 1'd0;
    basesoc_basesoc_do_write <= 1'd0;
    basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd0;
    basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd0;
    basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 <= 15'd0;
    basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 <= 1'd0;
    basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 <= 32'd0;
    basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 <= 1'd0;
    basesoc_basesoc_r_payload_data <= 32'd0;
    basesoc_basesoc_r_payload_resp <= 2'd0;
    basesoc_basesoc_r_valid <= 1'd0;
    basesoc_basesoc_w_ready <= 1'd0;
    basesoc_axilitesram0_next_state <= basesoc_axilitesram0_state;
    case (basesoc_axilitesram0_state)
        1'd1: begin
            basesoc_basesoc_adr <= basesoc_basesoc_port_adr_reg;
            if (basesoc_basesoc_w_valid) begin
                basesoc_basesoc_w_ready <= 1'd1;
                basesoc_axilitesram0_next_state <= 3'd4;
            end
        end
        2'd2: begin
            basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 <= basesoc_basesoc_dat_r;
            basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 <= 1'd1;
            basesoc_axilitesram0_next_state <= 2'd3;
        end
        2'd3: begin
            basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd1;
            basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd1;
            basesoc_basesoc_r_payload_data <= basesoc_basesoc_port_dat_r_latched;
            basesoc_basesoc_r_payload_resp <= 1'd0;
            basesoc_basesoc_r_valid <= 1'd1;
            if (basesoc_basesoc_r_ready) begin
                basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        3'd4: begin
            basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd0;
            basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd1;
            basesoc_basesoc_b_valid <= 1'd1;
            basesoc_basesoc_b_payload_resp <= 1'd0;
            if (basesoc_basesoc_b_ready) begin
                basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        default: begin
            if ((basesoc_basesoc_aw_valid & basesoc_basesoc_ar_valid)) begin
                basesoc_basesoc_do_write <= basesoc_basesoc_last_was_read;
                basesoc_basesoc_do_read <= (~basesoc_basesoc_last_was_read);
            end else begin
                basesoc_basesoc_do_write <= basesoc_basesoc_aw_valid;
                basesoc_basesoc_do_read <= basesoc_basesoc_ar_valid;
            end
            basesoc_basesoc_aw_ready <= (basesoc_basesoc_last_was_read | (~basesoc_basesoc_ar_valid));
            basesoc_basesoc_ar_ready <= ((~basesoc_basesoc_last_was_read) | (~basesoc_basesoc_aw_valid));
            if (basesoc_basesoc_do_write) begin
                basesoc_basesoc_adr <= basesoc_basesoc_aw_payload_addr[31:2];
                if (basesoc_basesoc_w_valid) begin
                    basesoc_basesoc_w_ready <= 1'd1;
                    basesoc_axilitesram0_next_state <= 3'd4;
                end else begin
                    basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 <= basesoc_basesoc_adr;
                    basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 <= 1'd1;
                    basesoc_axilitesram0_next_state <= 1'd1;
                end
            end else begin
                if (basesoc_basesoc_do_read) begin
                    basesoc_basesoc_adr <= basesoc_basesoc_ar_payload_addr[31:2];
                    basesoc_axilitesram0_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    basesoc_ram_dat_w <= 32'd0;
    basesoc_ram_dat_w <= basesoc_ram_bus_w_payload_data;
    basesoc_ram_dat_w <= basesoc_ram_bus_w_payload_data;
end
always @(*) begin
    basesoc_ram_we <= 4'd0;
    basesoc_ram_we[0] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[0]);
    basesoc_ram_we[1] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[1]);
    basesoc_ram_we[2] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[2]);
    basesoc_ram_we[3] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[3]);
    basesoc_ram_we[0] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[0]);
    basesoc_ram_we[1] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[1]);
    basesoc_ram_we[2] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[2]);
    basesoc_ram_we[3] <= ((basesoc_ram_bus_w_valid & basesoc_ram_bus_w_ready) & basesoc_ram_bus_w_payload_strb[3]);
end
always @(*) begin
    basesoc_axilitesram1_next_state <= 3'd0;
    basesoc_ram_adr <= 11'd0;
    basesoc_ram_bus_ar_ready <= 1'd0;
    basesoc_ram_bus_aw_ready <= 1'd0;
    basesoc_ram_bus_b_payload_resp <= 2'd0;
    basesoc_ram_bus_b_valid <= 1'd0;
    basesoc_ram_bus_r_payload_data <= 32'd0;
    basesoc_ram_bus_r_payload_resp <= 2'd0;
    basesoc_ram_bus_r_valid <= 1'd0;
    basesoc_ram_bus_w_ready <= 1'd0;
    basesoc_ram_do_read <= 1'd0;
    basesoc_ram_do_write <= 1'd0;
    basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd0;
    basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd0;
    basesoc_ram_port_adr_reg_axilitesram1_next_value0 <= 11'd0;
    basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 <= 1'd0;
    basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 <= 32'd0;
    basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 <= 1'd0;
    basesoc_axilitesram1_next_state <= basesoc_axilitesram1_state;
    case (basesoc_axilitesram1_state)
        1'd1: begin
            basesoc_ram_adr <= basesoc_ram_port_adr_reg;
            if (basesoc_ram_bus_w_valid) begin
                basesoc_ram_bus_w_ready <= 1'd1;
                basesoc_axilitesram1_next_state <= 3'd4;
            end
        end
        2'd2: begin
            basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 <= basesoc_ram_dat_r;
            basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 <= 1'd1;
            basesoc_axilitesram1_next_state <= 2'd3;
        end
        2'd3: begin
            basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd1;
            basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd1;
            basesoc_ram_bus_r_payload_data <= basesoc_ram_port_dat_r_latched;
            basesoc_ram_bus_r_payload_resp <= 1'd0;
            basesoc_ram_bus_r_valid <= 1'd1;
            if (basesoc_ram_bus_r_ready) begin
                basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        3'd4: begin
            basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd0;
            basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd1;
            basesoc_ram_bus_b_valid <= 1'd1;
            basesoc_ram_bus_b_payload_resp <= 1'd0;
            if (basesoc_ram_bus_b_ready) begin
                basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        default: begin
            if ((basesoc_ram_bus_aw_valid & basesoc_ram_bus_ar_valid)) begin
                basesoc_ram_do_write <= basesoc_ram_last_was_read;
                basesoc_ram_do_read <= (~basesoc_ram_last_was_read);
            end else begin
                basesoc_ram_do_write <= basesoc_ram_bus_aw_valid;
                basesoc_ram_do_read <= basesoc_ram_bus_ar_valid;
            end
            basesoc_ram_bus_aw_ready <= (basesoc_ram_last_was_read | (~basesoc_ram_bus_ar_valid));
            basesoc_ram_bus_ar_ready <= ((~basesoc_ram_last_was_read) | (~basesoc_ram_bus_aw_valid));
            if (basesoc_ram_do_write) begin
                basesoc_ram_adr <= basesoc_ram_bus_aw_payload_addr[31:2];
                if (basesoc_ram_bus_w_valid) begin
                    basesoc_ram_bus_w_ready <= 1'd1;
                    basesoc_axilitesram1_next_state <= 3'd4;
                end else begin
                    basesoc_ram_port_adr_reg_axilitesram1_next_value0 <= basesoc_ram_adr;
                    basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 <= 1'd1;
                    basesoc_axilitesram1_next_state <= 1'd1;
                end
            end else begin
                if (basesoc_ram_do_read) begin
                    basesoc_ram_adr <= basesoc_ram_bus_ar_payload_addr[31:2];
                    basesoc_axilitesram1_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    basesoc_rs232phytx_next_state <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    basesoc_tx_enable <= 1'd0;
    basesoc_tx_sink_ready <= 1'd0;
    basesoc_rs232phytx_next_state <= basesoc_rs232phytx_state;
    case (basesoc_rs232phytx_state)
        1'd1: begin
            basesoc_tx_enable <= 1'd1;
            if (basesoc_tx_tick) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= basesoc_tx_data;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_count_rs232phytx_next_value0 <= (basesoc_tx_count + 1'd1);
                basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, basesoc_tx_data[7:1]};
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((basesoc_tx_count == 4'd9)) begin
                    basesoc_tx_sink_ready <= 1'd1;
                    basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (basesoc_tx_sink_valid) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= basesoc_tx_sink_payload_data;
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_rs232phyrx_next_state <= 1'd0;
    basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    basesoc_rx_enable <= 1'd0;
    basesoc_rx_source_payload_data <= 8'd0;
    basesoc_rx_source_valid <= 1'd0;
    basesoc_rs232phyrx_next_state <= basesoc_rs232phyrx_state;
    case (basesoc_rs232phyrx_state)
        1'd1: begin
            basesoc_rx_enable <= 1'd1;
            if (basesoc_rx_tick) begin
                basesoc_rx_count_rs232phyrx_next_value0 <= (basesoc_rx_count + 1'd1);
                basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                basesoc_rx_data_rs232phyrx_next_value1 <= {basesoc_rx_rx, basesoc_rx_data[7:1]};
                basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((basesoc_rx_count == 4'd9)) begin
                    basesoc_rx_source_valid <= (basesoc_rx_rx == 1'd1);
                    basesoc_rx_source_payload_data <= basesoc_rx_data;
                    basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((basesoc_rx_rx == 1'd0) & (basesoc_rx_rx_d == 1'd1))) begin
                basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_uart_uart_sink_valid = basesoc_rx_source_valid;
assign basesoc_rx_source_ready = basesoc_uart_uart_sink_ready;
assign basesoc_uart_uart_sink_first = basesoc_rx_source_first;
assign basesoc_uart_uart_sink_last = basesoc_rx_source_last;
assign basesoc_uart_uart_sink_payload_data = basesoc_rx_source_payload_data;
assign basesoc_tx_sink_valid = basesoc_uart_uart_source_valid;
assign basesoc_uart_uart_source_ready = basesoc_tx_sink_ready;
assign basesoc_tx_sink_first = basesoc_uart_uart_source_first;
assign basesoc_tx_sink_last = basesoc_uart_uart_source_last;
assign basesoc_tx_sink_payload_data = basesoc_uart_uart_source_payload_data;
assign basesoc_uart_tx_fifo_sink_valid = basesoc_uart_rxtx_re;
assign basesoc_uart_tx_fifo_sink_payload_data = basesoc_uart_rxtx_r;
assign basesoc_uart_uart_source_valid = basesoc_uart_tx_fifo_source_valid;
assign basesoc_uart_tx_fifo_source_ready = basesoc_uart_uart_source_ready;
assign basesoc_uart_uart_source_first = basesoc_uart_tx_fifo_source_first;
assign basesoc_uart_uart_source_last = basesoc_uart_tx_fifo_source_last;
assign basesoc_uart_uart_source_payload_data = basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_uart_txfull_status = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_txempty_status = (~basesoc_uart_tx_fifo_source_valid);
assign basesoc_uart_tx_trigger = basesoc_uart_tx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_valid = basesoc_uart_uart_sink_valid;
assign basesoc_uart_uart_sink_ready = basesoc_uart_rx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_first = basesoc_uart_uart_sink_first;
assign basesoc_uart_rx_fifo_sink_last = basesoc_uart_uart_sink_last;
assign basesoc_uart_rx_fifo_sink_payload_data = basesoc_uart_uart_sink_payload_data;
assign basesoc_uart_rxtx_w = basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_uart_rx_fifo_source_ready = (basesoc_uart_rx_clear | (1'd0 & basesoc_uart_rxtx_we));
assign basesoc_uart_rxempty_status = (~basesoc_uart_rx_fifo_source_valid);
assign basesoc_uart_rxfull_status = (~basesoc_uart_rx_fifo_sink_ready);
assign basesoc_uart_rx_trigger = basesoc_uart_rx_fifo_source_valid;
assign basesoc_uart_tx0 = basesoc_uart_tx_status;
assign basesoc_uart_tx1 = basesoc_uart_tx_pending;
always @(*) begin
    basesoc_uart_tx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[0])) begin
        basesoc_uart_tx_clear <= 1'd1;
    end
end
assign basesoc_uart_rx0 = basesoc_uart_rx_status;
assign basesoc_uart_rx1 = basesoc_uart_rx_pending;
always @(*) begin
    basesoc_uart_rx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[1])) begin
        basesoc_uart_rx_clear <= 1'd1;
    end
end
assign basesoc_uart_irq = ((basesoc_uart_pending_status[0] & basesoc_uart_enable_storage[0]) | (basesoc_uart_pending_status[1] & basesoc_uart_enable_storage[1]));
assign basesoc_uart_tx_status = basesoc_uart_tx_trigger;
assign basesoc_uart_rx_status = basesoc_uart_rx_trigger;
assign basesoc_uart_tx_fifo_syncfifo_din = {basesoc_uart_tx_fifo_fifo_in_last, basesoc_uart_tx_fifo_fifo_in_first, basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_uart_tx_fifo_fifo_out_last, basesoc_uart_tx_fifo_fifo_out_first, basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_uart_tx_fifo_sink_ready = basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_uart_tx_fifo_syncfifo_we = basesoc_uart_tx_fifo_sink_valid;
assign basesoc_uart_tx_fifo_fifo_in_first = basesoc_uart_tx_fifo_sink_first;
assign basesoc_uart_tx_fifo_fifo_in_last = basesoc_uart_tx_fifo_sink_last;
assign basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_uart_tx_fifo_source_valid = basesoc_uart_tx_fifo_readable;
assign basesoc_uart_tx_fifo_source_first = basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_uart_tx_fifo_source_last = basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_uart_tx_fifo_source_payload_data = basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_uart_tx_fifo_re = basesoc_uart_tx_fifo_source_ready;
assign basesoc_uart_tx_fifo_syncfifo_re = (basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_uart_tx_fifo_readable) | basesoc_uart_tx_fifo_re));
assign basesoc_uart_tx_fifo_level1 = (basesoc_uart_tx_fifo_level0 + basesoc_uart_tx_fifo_readable);
always @(*) begin
    basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_tx_fifo_replace) begin
        basesoc_uart_tx_fifo_wrport_adr <= (basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_tx_fifo_wrport_adr <= basesoc_uart_tx_fifo_produce;
    end
end
assign basesoc_uart_tx_fifo_wrport_dat_w = basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_uart_tx_fifo_wrport_we = (basesoc_uart_tx_fifo_syncfifo_we & (basesoc_uart_tx_fifo_syncfifo_writable | basesoc_uart_tx_fifo_replace));
assign basesoc_uart_tx_fifo_do_read = (basesoc_uart_tx_fifo_syncfifo_readable & basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_uart_tx_fifo_rdport_adr = basesoc_uart_tx_fifo_consume;
assign basesoc_uart_tx_fifo_syncfifo_dout = basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_uart_tx_fifo_rdport_re = basesoc_uart_tx_fifo_do_read;
assign basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_uart_rx_fifo_syncfifo_din = {basesoc_uart_rx_fifo_fifo_in_last, basesoc_uart_rx_fifo_fifo_in_first, basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_uart_rx_fifo_fifo_out_last, basesoc_uart_rx_fifo_fifo_out_first, basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_uart_rx_fifo_sink_ready = basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_uart_rx_fifo_syncfifo_we = basesoc_uart_rx_fifo_sink_valid;
assign basesoc_uart_rx_fifo_fifo_in_first = basesoc_uart_rx_fifo_sink_first;
assign basesoc_uart_rx_fifo_fifo_in_last = basesoc_uart_rx_fifo_sink_last;
assign basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_uart_rx_fifo_source_valid = basesoc_uart_rx_fifo_readable;
assign basesoc_uart_rx_fifo_source_first = basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_uart_rx_fifo_source_last = basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_uart_rx_fifo_source_payload_data = basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_uart_rx_fifo_re = basesoc_uart_rx_fifo_source_ready;
assign basesoc_uart_rx_fifo_syncfifo_re = (basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_uart_rx_fifo_readable) | basesoc_uart_rx_fifo_re));
assign basesoc_uart_rx_fifo_level1 = (basesoc_uart_rx_fifo_level0 + basesoc_uart_rx_fifo_readable);
always @(*) begin
    basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_rx_fifo_replace) begin
        basesoc_uart_rx_fifo_wrport_adr <= (basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_rx_fifo_wrport_adr <= basesoc_uart_rx_fifo_produce;
    end
end
assign basesoc_uart_rx_fifo_wrport_dat_w = basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_uart_rx_fifo_wrport_we = (basesoc_uart_rx_fifo_syncfifo_we & (basesoc_uart_rx_fifo_syncfifo_writable | basesoc_uart_rx_fifo_replace));
assign basesoc_uart_rx_fifo_do_read = (basesoc_uart_rx_fifo_syncfifo_readable & basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_uart_rx_fifo_rdport_adr = basesoc_uart_rx_fifo_consume;
assign basesoc_uart_rx_fifo_syncfifo_dout = basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_uart_rx_fifo_rdport_re = basesoc_uart_rx_fifo_do_read;
assign basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_uart_rx_fifo_level0 != 1'd0);
assign basesoc_timer_zero_trigger = (basesoc_timer_value == 1'd0);
assign basesoc_timer_zero0 = basesoc_timer_zero_status;
assign basesoc_timer_zero1 = basesoc_timer_zero_pending;
always @(*) begin
    basesoc_timer_zero_clear <= 1'd0;
    if ((basesoc_timer_pending_re & basesoc_timer_pending_r)) begin
        basesoc_timer_zero_clear <= 1'd1;
    end
end
assign basesoc_timer_irq = (basesoc_timer_pending_status & basesoc_timer_enable_storage);
assign basesoc_timer_zero_status = basesoc_timer_zero_trigger;
assign wait_1 = (~done);
always @(*) begin
    leds <= 6'd0;
    if ((mode == 1'd1)) begin
        leds <= storage;
    end else begin
        leds <= chaser;
    end
end
assign {led_n5, led_n4, led_n3, led_n2, led_n1, led_n0} = (leds ^ 1'd0);
assign done = (count == 1'd0);
assign basesoc_dat_w = basesoc_axiliteinterface_w_payload_data;
assign basesoc_we = ((basesoc_axiliteinterface_w_valid & basesoc_axiliteinterface_w_ready) & (basesoc_axiliteinterface_w_payload_strb != 1'd0));
assign basesoc_re = (basesoc_axiliteinterface_ar_valid & basesoc_axiliteinterface_ar_ready);
always @(*) begin
    basesoc_adr <= 14'd0;
    basesoc_axilite2csr_next_state <= 3'd0;
    basesoc_axiliteinterface_ar_ready <= 1'd0;
    basesoc_axiliteinterface_aw_ready <= 1'd0;
    basesoc_axiliteinterface_b_payload_resp <= 2'd0;
    basesoc_axiliteinterface_b_valid <= 1'd0;
    basesoc_axiliteinterface_r_payload_data <= 32'd0;
    basesoc_axiliteinterface_r_payload_resp <= 2'd0;
    basesoc_axiliteinterface_r_valid <= 1'd0;
    basesoc_axiliteinterface_w_ready <= 1'd0;
    basesoc_do_read <= 1'd0;
    basesoc_do_write <= 1'd0;
    basesoc_last_was_read_axilite2csr_next_value2 <= 1'd0;
    basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd0;
    basesoc_port_adr_reg_axilite2csr_next_value0 <= 14'd0;
    basesoc_port_adr_reg_axilite2csr_next_value_ce0 <= 1'd0;
    basesoc_port_dat_r_latched_axilite2csr_next_value1 <= 32'd0;
    basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 <= 1'd0;
    basesoc_axilite2csr_next_state <= basesoc_axilite2csr_state;
    case (basesoc_axilite2csr_state)
        1'd1: begin
            basesoc_adr <= basesoc_port_adr_reg;
            if (basesoc_axiliteinterface_w_valid) begin
                basesoc_axiliteinterface_w_ready <= 1'd1;
                basesoc_axilite2csr_next_state <= 3'd4;
            end
        end
        2'd2: begin
            basesoc_port_dat_r_latched_axilite2csr_next_value1 <= basesoc_dat_r;
            basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 <= 1'd1;
            basesoc_axilite2csr_next_state <= 2'd3;
        end
        2'd3: begin
            basesoc_last_was_read_axilite2csr_next_value2 <= 1'd1;
            basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd1;
            basesoc_axiliteinterface_r_payload_data <= basesoc_port_dat_r_latched;
            basesoc_axiliteinterface_r_payload_resp <= 1'd0;
            basesoc_axiliteinterface_r_valid <= 1'd1;
            if (basesoc_axiliteinterface_r_ready) begin
                basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        3'd4: begin
            basesoc_last_was_read_axilite2csr_next_value2 <= 1'd0;
            basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd1;
            basesoc_axiliteinterface_b_valid <= 1'd1;
            basesoc_axiliteinterface_b_payload_resp <= 1'd0;
            if (basesoc_axiliteinterface_b_ready) begin
                basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        default: begin
            if ((basesoc_axiliteinterface_aw_valid & basesoc_axiliteinterface_ar_valid)) begin
                basesoc_do_write <= basesoc_last_was_read;
                basesoc_do_read <= (~basesoc_last_was_read);
            end else begin
                basesoc_do_write <= basesoc_axiliteinterface_aw_valid;
                basesoc_do_read <= basesoc_axiliteinterface_ar_valid;
            end
            basesoc_axiliteinterface_aw_ready <= (basesoc_last_was_read | (~basesoc_axiliteinterface_ar_valid));
            basesoc_axiliteinterface_ar_ready <= ((~basesoc_last_was_read) | (~basesoc_axiliteinterface_aw_valid));
            if (basesoc_do_write) begin
                basesoc_adr <= basesoc_axiliteinterface_aw_payload_addr[31:2];
                if (basesoc_axiliteinterface_w_valid) begin
                    basesoc_axiliteinterface_w_ready <= 1'd1;
                    basesoc_axilite2csr_next_state <= 3'd4;
                end else begin
                    basesoc_port_adr_reg_axilite2csr_next_value0 <= basesoc_adr;
                    basesoc_port_adr_reg_axilite2csr_next_value_ce0 <= 1'd1;
                    basesoc_axilite2csr_next_state <= 1'd1;
                end
            end else begin
                if (basesoc_do_read) begin
                    basesoc_adr <= basesoc_axiliteinterface_ar_payload_addr[31:2];
                    basesoc_axilite2csr_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    basesoc_soc_rst <= 1'd0;
    if (basesoc_reset_re) begin
        basesoc_soc_rst <= basesoc_reset_storage[0];
    end
end
assign basesoc_cpu_rst = basesoc_reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = basesoc_reset_storage[1:0];
assign csr_bankarray_csrbank0_scratch0_w = basesoc_scratch_storage[31:0];
assign csr_bankarray_csrbank0_bus_errors_w = basesoc_bus_errors_status[31:0];
assign basesoc_bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_out0_r = csr_bankarray_interface1_bank_bus_dat_w[5:0];
always @(*) begin
    csr_bankarray_csrbank1_out0_re <= 1'd0;
    csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_out0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_out0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_out0_w = storage[5:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_load0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_load0_re <= 1'd0;
    csr_bankarray_csrbank2_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_load0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_load0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_reload0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_reload0_re <= 1'd0;
    csr_bankarray_csrbank2_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank2_reload0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_reload0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_en0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_en0_re <= 1'd0;
    csr_bankarray_csrbank2_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank2_en0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_en0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_update_value0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_update_value0_re <= 1'd0;
    csr_bankarray_csrbank2_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank2_update_value0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_update_value0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_value_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_value_re <= 1'd0;
    csr_bankarray_csrbank2_value_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank2_value_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_value_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_status_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank2_ev_status_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_status_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_pending_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank2_ev_pending_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_pending_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_enable0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank2_ev_enable0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_enable0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_load0_w = basesoc_timer_load_storage[31:0];
assign csr_bankarray_csrbank2_reload0_w = basesoc_timer_reload_storage[31:0];
assign csr_bankarray_csrbank2_en0_w = basesoc_timer_en_storage;
assign csr_bankarray_csrbank2_update_value0_w = basesoc_timer_update_value_storage;
assign csr_bankarray_csrbank2_value_w = basesoc_timer_value_status[31:0];
assign basesoc_timer_value_we = csr_bankarray_csrbank2_value_we;
always @(*) begin
    basesoc_timer_status_status <= 1'd0;
    basesoc_timer_status_status <= basesoc_timer_zero0;
end
assign csr_bankarray_csrbank2_ev_status_w = basesoc_timer_status_status;
assign basesoc_timer_status_we = csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
    basesoc_timer_pending_status <= 1'd0;
    basesoc_timer_pending_status <= basesoc_timer_zero1;
end
assign csr_bankarray_csrbank2_ev_pending_w = basesoc_timer_pending_status;
assign basesoc_timer_pending_we = csr_bankarray_csrbank2_ev_pending_we;
assign basesoc_timer_zero2 = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank2_ev_enable0_w = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign basesoc_uart_rxtx_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    basesoc_uart_rxtx_re <= 1'd0;
    basesoc_uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        basesoc_uart_rxtx_re <= csr_bankarray_interface3_bank_bus_we;
        basesoc_uart_rxtx_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_txfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txfull_re <= 1'd0;
    csr_bankarray_csrbank3_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_txfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txfull_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_rxempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxempty_re <= 1'd0;
    csr_bankarray_csrbank3_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_rxempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxempty_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_status_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_ev_status_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_status_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_pending_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_ev_pending_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_pending_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_enable0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_enable0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_txempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txempty_re <= 1'd0;
    csr_bankarray_csrbank3_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_txempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txempty_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_rxfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxfull_re <= 1'd0;
    csr_bankarray_csrbank3_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_rxfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxfull_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_txfull_w = basesoc_uart_txfull_status;
assign basesoc_uart_txfull_we = csr_bankarray_csrbank3_txfull_we;
assign csr_bankarray_csrbank3_rxempty_w = basesoc_uart_rxempty_status;
assign basesoc_uart_rxempty_we = csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
    basesoc_uart_status_status <= 2'd0;
    basesoc_uart_status_status[0] <= basesoc_uart_tx0;
    basesoc_uart_status_status[1] <= basesoc_uart_rx0;
end
assign csr_bankarray_csrbank3_ev_status_w = basesoc_uart_status_status[1:0];
assign basesoc_uart_status_we = csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
    basesoc_uart_pending_status <= 2'd0;
    basesoc_uart_pending_status[0] <= basesoc_uart_tx1;
    basesoc_uart_pending_status[1] <= basesoc_uart_rx1;
end
assign csr_bankarray_csrbank3_ev_pending_w = basesoc_uart_pending_status[1:0];
assign basesoc_uart_pending_we = csr_bankarray_csrbank3_ev_pending_we;
assign basesoc_uart_tx2 = basesoc_uart_enable_storage[0];
assign basesoc_uart_rx2 = basesoc_uart_enable_storage[1];
assign csr_bankarray_csrbank3_ev_enable0_w = basesoc_uart_enable_storage[1:0];
assign csr_bankarray_csrbank3_txempty_w = basesoc_uart_txempty_status;
assign basesoc_uart_txempty_we = csr_bankarray_csrbank3_txempty_we;
assign csr_bankarray_csrbank3_rxfull_w = basesoc_uart_rxfull_status;
assign basesoc_uart_rxfull_we = csr_bankarray_csrbank3_rxfull_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_re = basesoc_re;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface2_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface3_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
assign slice_proxy0 = aw_payload_addr[31:2];
assign slice_proxy1 = ar_payload_addr[31:2];
assign slice_proxy2 = aw_payload_addr[31:2];
assign slice_proxy3 = ar_payload_addr[31:2];
assign slice_proxy4 = aw_payload_addr[31:2];
assign slice_proxy5 = ar_payload_addr[31:2];
always @(*) begin
    self0 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self0 <= basesoc_axiinterface0_aw_valid;
        end
        default: begin
            self0 <= basesoc_axiinterface1_aw_valid;
        end
    endcase
end
always @(*) begin
    self1 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self1 <= basesoc_axiinterface0_aw_first;
        end
        default: begin
            self1 <= basesoc_axiinterface1_aw_first;
        end
    endcase
end
always @(*) begin
    self2 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self2 <= basesoc_axiinterface0_aw_last;
        end
        default: begin
            self2 <= basesoc_axiinterface1_aw_last;
        end
    endcase
end
always @(*) begin
    self3 <= 32'd0;
    case (rr_write_grant)
        1'd0: begin
            self3 <= basesoc_axiinterface0_aw_payload_addr;
        end
        default: begin
            self3 <= basesoc_axiinterface1_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    self4 <= 2'd0;
    case (rr_write_grant)
        1'd0: begin
            self4 <= basesoc_axiinterface0_aw_payload_burst;
        end
        default: begin
            self4 <= basesoc_axiinterface1_aw_payload_burst;
        end
    endcase
end
always @(*) begin
    self5 <= 8'd0;
    case (rr_write_grant)
        1'd0: begin
            self5 <= basesoc_axiinterface0_aw_payload_len;
        end
        default: begin
            self5 <= basesoc_axiinterface1_aw_payload_len;
        end
    endcase
end
always @(*) begin
    self6 <= 3'd0;
    case (rr_write_grant)
        1'd0: begin
            self6 <= basesoc_axiinterface0_aw_payload_size;
        end
        default: begin
            self6 <= basesoc_axiinterface1_aw_payload_size;
        end
    endcase
end
always @(*) begin
    self7 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self7 <= basesoc_axiinterface0_aw_payload_lock;
        end
        default: begin
            self7 <= basesoc_axiinterface1_aw_payload_lock;
        end
    endcase
end
always @(*) begin
    self8 <= 3'd0;
    case (rr_write_grant)
        1'd0: begin
            self8 <= basesoc_axiinterface0_aw_payload_prot;
        end
        default: begin
            self8 <= basesoc_axiinterface1_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    self9 <= 4'd0;
    case (rr_write_grant)
        1'd0: begin
            self9 <= basesoc_axiinterface0_aw_payload_cache;
        end
        default: begin
            self9 <= basesoc_axiinterface1_aw_payload_cache;
        end
    endcase
end
always @(*) begin
    self10 <= 4'd0;
    case (rr_write_grant)
        1'd0: begin
            self10 <= basesoc_axiinterface0_aw_payload_qos;
        end
        default: begin
            self10 <= basesoc_axiinterface1_aw_payload_qos;
        end
    endcase
end
always @(*) begin
    self11 <= 4'd0;
    case (rr_write_grant)
        1'd0: begin
            self11 <= basesoc_axiinterface0_aw_payload_region;
        end
        default: begin
            self11 <= basesoc_axiinterface1_aw_payload_region;
        end
    endcase
end
always @(*) begin
    self12 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self12 <= basesoc_axiinterface0_aw_param_id;
        end
        default: begin
            self12 <= basesoc_axiinterface1_aw_param_id;
        end
    endcase
end
always @(*) begin
    self13 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self13 <= basesoc_axiinterface0_aw_param_dest;
        end
        default: begin
            self13 <= basesoc_axiinterface1_aw_param_dest;
        end
    endcase
end
always @(*) begin
    self14 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self14 <= basesoc_axiinterface0_aw_param_user;
        end
        default: begin
            self14 <= basesoc_axiinterface1_aw_param_user;
        end
    endcase
end
always @(*) begin
    self15 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self15 <= basesoc_axiinterface0_w_valid;
        end
        default: begin
            self15 <= basesoc_axiinterface1_w_valid;
        end
    endcase
end
always @(*) begin
    self16 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self16 <= basesoc_axiinterface0_w_first;
        end
        default: begin
            self16 <= basesoc_axiinterface1_w_first;
        end
    endcase
end
always @(*) begin
    self17 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self17 <= basesoc_axiinterface0_w_last;
        end
        default: begin
            self17 <= basesoc_axiinterface1_w_last;
        end
    endcase
end
always @(*) begin
    self18 <= 32'd0;
    case (rr_write_grant)
        1'd0: begin
            self18 <= basesoc_axiinterface0_w_payload_data;
        end
        default: begin
            self18 <= basesoc_axiinterface1_w_payload_data;
        end
    endcase
end
always @(*) begin
    self19 <= 4'd0;
    case (rr_write_grant)
        1'd0: begin
            self19 <= basesoc_axiinterface0_w_payload_strb;
        end
        default: begin
            self19 <= basesoc_axiinterface1_w_payload_strb;
        end
    endcase
end
always @(*) begin
    self20 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self20 <= basesoc_axiinterface0_w_param_id;
        end
        default: begin
            self20 <= basesoc_axiinterface1_w_param_id;
        end
    endcase
end
always @(*) begin
    self21 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self21 <= basesoc_axiinterface0_w_param_dest;
        end
        default: begin
            self21 <= basesoc_axiinterface1_w_param_dest;
        end
    endcase
end
always @(*) begin
    self22 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self22 <= basesoc_axiinterface0_w_param_user;
        end
        default: begin
            self22 <= basesoc_axiinterface1_w_param_user;
        end
    endcase
end
always @(*) begin
    self23 <= 1'd0;
    case (rr_write_grant)
        1'd0: begin
            self23 <= basesoc_axiinterface0_b_ready;
        end
        default: begin
            self23 <= basesoc_axiinterface1_b_ready;
        end
    endcase
end
always @(*) begin
    self24 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self24 <= basesoc_axiinterface0_ar_valid;
        end
        default: begin
            self24 <= basesoc_axiinterface1_ar_valid;
        end
    endcase
end
always @(*) begin
    self25 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self25 <= basesoc_axiinterface0_ar_first;
        end
        default: begin
            self25 <= basesoc_axiinterface1_ar_first;
        end
    endcase
end
always @(*) begin
    self26 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self26 <= basesoc_axiinterface0_ar_last;
        end
        default: begin
            self26 <= basesoc_axiinterface1_ar_last;
        end
    endcase
end
always @(*) begin
    self27 <= 32'd0;
    case (rr_read_grant)
        1'd0: begin
            self27 <= basesoc_axiinterface0_ar_payload_addr;
        end
        default: begin
            self27 <= basesoc_axiinterface1_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    self28 <= 2'd0;
    case (rr_read_grant)
        1'd0: begin
            self28 <= basesoc_axiinterface0_ar_payload_burst;
        end
        default: begin
            self28 <= basesoc_axiinterface1_ar_payload_burst;
        end
    endcase
end
always @(*) begin
    self29 <= 8'd0;
    case (rr_read_grant)
        1'd0: begin
            self29 <= basesoc_axiinterface0_ar_payload_len;
        end
        default: begin
            self29 <= basesoc_axiinterface1_ar_payload_len;
        end
    endcase
end
always @(*) begin
    self30 <= 3'd0;
    case (rr_read_grant)
        1'd0: begin
            self30 <= basesoc_axiinterface0_ar_payload_size;
        end
        default: begin
            self30 <= basesoc_axiinterface1_ar_payload_size;
        end
    endcase
end
always @(*) begin
    self31 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self31 <= basesoc_axiinterface0_ar_payload_lock;
        end
        default: begin
            self31 <= basesoc_axiinterface1_ar_payload_lock;
        end
    endcase
end
always @(*) begin
    self32 <= 3'd0;
    case (rr_read_grant)
        1'd0: begin
            self32 <= basesoc_axiinterface0_ar_payload_prot;
        end
        default: begin
            self32 <= basesoc_axiinterface1_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    self33 <= 4'd0;
    case (rr_read_grant)
        1'd0: begin
            self33 <= basesoc_axiinterface0_ar_payload_cache;
        end
        default: begin
            self33 <= basesoc_axiinterface1_ar_payload_cache;
        end
    endcase
end
always @(*) begin
    self34 <= 4'd0;
    case (rr_read_grant)
        1'd0: begin
            self34 <= basesoc_axiinterface0_ar_payload_qos;
        end
        default: begin
            self34 <= basesoc_axiinterface1_ar_payload_qos;
        end
    endcase
end
always @(*) begin
    self35 <= 4'd0;
    case (rr_read_grant)
        1'd0: begin
            self35 <= basesoc_axiinterface0_ar_payload_region;
        end
        default: begin
            self35 <= basesoc_axiinterface1_ar_payload_region;
        end
    endcase
end
always @(*) begin
    self36 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self36 <= basesoc_axiinterface0_ar_param_id;
        end
        default: begin
            self36 <= basesoc_axiinterface1_ar_param_id;
        end
    endcase
end
always @(*) begin
    self37 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self37 <= basesoc_axiinterface0_ar_param_dest;
        end
        default: begin
            self37 <= basesoc_axiinterface1_ar_param_dest;
        end
    endcase
end
always @(*) begin
    self38 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self38 <= basesoc_axiinterface0_ar_param_user;
        end
        default: begin
            self38 <= basesoc_axiinterface1_ar_param_user;
        end
    endcase
end
always @(*) begin
    self39 <= 1'd0;
    case (rr_read_grant)
        1'd0: begin
            self39 <= basesoc_axiinterface0_r_ready;
        end
        default: begin
            self39 <= basesoc_axiinterface1_r_ready;
        end
    endcase
end
assign basesoc_rx_rx = multiregimpl1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    if ((~crg_por_done)) begin
        crg_por_count <= (crg_por_count - 1'd1);
    end
    if (por_rst) begin
        crg_por_count <= 16'd65535;
    end
end

always @(posedge sys_clk) begin
    wishbone2axi0_state <= wishbone2axi0_next_state;
    if (basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0) begin
        basesoc_wishbone2axi0_cmd_done <= basesoc_wishbone2axi0_cmd_done_wishbone2axi0_next_value0;
    end
    if (basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1) begin
        basesoc_wishbone2axi0_data_done <= basesoc_wishbone2axi0_data_done_wishbone2axi0_next_value1;
    end
    wishbone2axi1_state <= wishbone2axi1_next_state;
    if (basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0) begin
        basesoc_wishbone2axi1_cmd_done <= basesoc_wishbone2axi1_cmd_done_wishbone2axi1_next_value0;
    end
    if (basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1) begin
        basesoc_wishbone2axi1_data_done <= basesoc_wishbone2axi1_data_done_wishbone2axi1_next_value1;
    end
    if (((~basesoc_socbushandler_pipe_valid_source_valid) | basesoc_socbushandler_pipe_valid_source_ready)) begin
        basesoc_socbushandler_pipe_valid_source_valid <= basesoc_socbushandler_pipe_valid_sink_valid;
        basesoc_socbushandler_pipe_valid_source_first <= basesoc_socbushandler_pipe_valid_sink_first;
        basesoc_socbushandler_pipe_valid_source_last <= basesoc_socbushandler_pipe_valid_sink_last;
        basesoc_socbushandler_pipe_valid_source_payload_addr <= basesoc_socbushandler_pipe_valid_sink_payload_addr;
        basesoc_socbushandler_pipe_valid_source_payload_burst <= basesoc_socbushandler_pipe_valid_sink_payload_burst;
        basesoc_socbushandler_pipe_valid_source_payload_len <= basesoc_socbushandler_pipe_valid_sink_payload_len;
        basesoc_socbushandler_pipe_valid_source_payload_size <= basesoc_socbushandler_pipe_valid_sink_payload_size;
        basesoc_socbushandler_pipe_valid_source_payload_lock <= basesoc_socbushandler_pipe_valid_sink_payload_lock;
        basesoc_socbushandler_pipe_valid_source_payload_prot <= basesoc_socbushandler_pipe_valid_sink_payload_prot;
        basesoc_socbushandler_pipe_valid_source_payload_cache <= basesoc_socbushandler_pipe_valid_sink_payload_cache;
        basesoc_socbushandler_pipe_valid_source_payload_qos <= basesoc_socbushandler_pipe_valid_sink_payload_qos;
        basesoc_socbushandler_pipe_valid_source_payload_region <= basesoc_socbushandler_pipe_valid_sink_payload_region;
        basesoc_socbushandler_pipe_valid_source_param_id <= basesoc_socbushandler_pipe_valid_sink_param_id;
        basesoc_socbushandler_pipe_valid_source_param_dest <= basesoc_socbushandler_pipe_valid_sink_param_dest;
        basesoc_socbushandler_pipe_valid_source_param_user <= basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((basesoc_socbushandler_ax_beat_valid & basesoc_socbushandler_ax_beat_ready)) begin
        if (basesoc_socbushandler_ax_beat_last) begin
            basesoc_socbushandler_beat_count <= 1'd0;
            basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            basesoc_socbushandler_beat_count <= (basesoc_socbushandler_beat_count + 1'd1);
            if ((((basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                basesoc_socbushandler_beat_offset <= (basesoc_socbushandler_beat_offset + $signed({1'd0, basesoc_socbushandler_beat_size}));
            end
        end
        if (((basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((basesoc_socbushandler_ax_beat_payload_addr & basesoc_socbushandler_beat_wrap) == basesoc_socbushandler_beat_wrap)) begin
                basesoc_socbushandler_beat_offset <= (basesoc_socbushandler_beat_offset - $signed({1'd0, basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    axi2axilite_state <= axi2axilite_next_state;
    if (basesoc_socbushandler_cmd_done_axi2axilite_next_value_ce0) begin
        basesoc_socbushandler_cmd_done <= basesoc_socbushandler_cmd_done_axi2axilite_next_value0;
    end
    if (basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value_ce1) begin
        basesoc_socbushandler_last_ar_aw_n <= basesoc_socbushandler_last_ar_aw_n_axi2axilite_next_value1;
    end
    if (rr_write_ce) begin
        case (rr_write_grant)
            1'd0: begin
                if (rr_write_request[1]) begin
                    rr_write_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (rr_write_request[0]) begin
                    rr_write_grant <= 1'd0;
                end
            end
        endcase
    end
    if (rr_read_ce) begin
        case (rr_read_grant)
            1'd0: begin
                if (rr_read_request[1]) begin
                    rr_read_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (rr_read_request[0]) begin
                    rr_read_grant <= 1'd0;
                end
            end
        endcase
    end
    if (((aw_valid & aw_ready) & (b_valid & b_ready))) begin
        wr_lock_counter <= wr_lock_counter;
    end else begin
        if (((aw_valid & aw_ready) & (~wr_lock_full))) begin
            wr_lock_counter <= (wr_lock_counter + 1'd1);
        end else begin
            if (((b_valid & b_ready) & (~wr_lock_empty))) begin
                wr_lock_counter <= (wr_lock_counter - 1'd1);
            end
        end
    end
    if (((ar_valid & ar_ready) & ((r_valid & r_ready) & r_last))) begin
        rd_lock_counter <= rd_lock_counter;
    end else begin
        if (((ar_valid & ar_ready) & (~rd_lock_full))) begin
            rd_lock_counter <= (rd_lock_counter + 1'd1);
        end else begin
            if ((((r_valid & r_ready) & r_last) & (~rd_lock_empty))) begin
                rd_lock_counter <= (rd_lock_counter - 1'd1);
            end
        end
    end
    if (axirequestcounter0_empty) begin
        slave_sel_reg0 <= slave_sel_dec0;
    end
    if (axirequestcounter1_empty) begin
        slave_sel_reg1 <= slave_sel_dec1;
    end
    if (((aw_valid & aw_ready) & (b_valid & b_ready))) begin
        axirequestcounter0_counter <= axirequestcounter0_counter;
    end else begin
        if (((aw_valid & aw_ready) & (~axirequestcounter0_full))) begin
            axirequestcounter0_counter <= (axirequestcounter0_counter + 1'd1);
        end else begin
            if (((b_valid & b_ready) & (~axirequestcounter0_empty))) begin
                axirequestcounter0_counter <= (axirequestcounter0_counter - 1'd1);
            end
        end
    end
    if (((ar_valid & ar_ready) & ((r_valid & r_ready) & r_last))) begin
        axirequestcounter1_counter <= axirequestcounter1_counter;
    end else begin
        if (((ar_valid & ar_ready) & (~axirequestcounter1_full))) begin
            axirequestcounter1_counter <= (axirequestcounter1_counter + 1'd1);
        end else begin
            if ((((r_valid & r_ready) & r_last) & (~axirequestcounter1_empty))) begin
                axirequestcounter1_counter <= (axirequestcounter1_counter - 1'd1);
            end
        end
    end
    if (wr_timer_wait) begin
        if ((~wr_timer_done)) begin
            wr_timer_count <= (wr_timer_count - 1'd1);
        end
    end else begin
        wr_timer_count <= 20'd1000000;
    end
    if (rd_timer_wait) begin
        if ((~rd_timer_done)) begin
            rd_timer_count <= (rd_timer_count - 1'd1);
        end
    end else begin
        rd_timer_count <= 20'd1000000;
    end
    fsm0_state <= fsm0_next_state;
    fsm1_state <= fsm1_next_state;
    if ((basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_bus_error) begin
            basesoc_bus_errors <= (basesoc_bus_errors + 1'd1);
        end
    end
    basesoc_axilitesram0_state <= basesoc_axilitesram0_next_state;
    if (basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0) begin
        basesoc_basesoc_port_adr_reg <= basesoc_basesoc_port_adr_reg_axilitesram0_next_value0;
    end
    if (basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1) begin
        basesoc_basesoc_port_dat_r_latched <= basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1;
    end
    if (basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2) begin
        basesoc_basesoc_last_was_read <= basesoc_basesoc_last_was_read_axilitesram0_next_value2;
    end
    basesoc_axilitesram1_state <= basesoc_axilitesram1_next_state;
    if (basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0) begin
        basesoc_ram_port_adr_reg <= basesoc_ram_port_adr_reg_axilitesram1_next_value0;
    end
    if (basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1) begin
        basesoc_ram_port_dat_r_latched <= basesoc_ram_port_dat_r_latched_axilitesram1_next_value1;
    end
    if (basesoc_ram_last_was_read_axilitesram1_next_value_ce2) begin
        basesoc_ram_last_was_read <= basesoc_ram_last_was_read_axilitesram1_next_value2;
    end
    {basesoc_tx_tick, basesoc_tx_phase} <= 24'd9895604;
    if (basesoc_tx_enable) begin
        {basesoc_tx_tick, basesoc_tx_phase} <= (basesoc_tx_phase + 24'd9895604);
    end
    basesoc_rs232phytx_state <= basesoc_rs232phytx_next_state;
    if (basesoc_tx_count_rs232phytx_next_value_ce0) begin
        basesoc_tx_count <= basesoc_tx_count_rs232phytx_next_value0;
    end
    if (basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (basesoc_tx_data_rs232phytx_next_value_ce2) begin
        basesoc_tx_data <= basesoc_tx_data_rs232phytx_next_value2;
    end
    basesoc_rx_rx_d <= basesoc_rx_rx;
    {basesoc_rx_tick, basesoc_rx_phase} <= 32'd2147483648;
    if (basesoc_rx_enable) begin
        {basesoc_rx_tick, basesoc_rx_phase} <= (basesoc_rx_phase + 24'd9895604);
    end
    basesoc_rs232phyrx_state <= basesoc_rs232phyrx_next_state;
    if (basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        basesoc_rx_count <= basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        basesoc_rx_data <= basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (basesoc_uart_tx_clear) begin
        basesoc_uart_tx_pending <= 1'd0;
    end
    basesoc_uart_tx_trigger_d <= basesoc_uart_tx_trigger;
    if ((basesoc_uart_tx_trigger & (~basesoc_uart_tx_trigger_d))) begin
        basesoc_uart_tx_pending <= 1'd1;
    end
    if (basesoc_uart_rx_clear) begin
        basesoc_uart_rx_pending <= 1'd0;
    end
    basesoc_uart_rx_trigger_d <= basesoc_uart_rx_trigger;
    if ((basesoc_uart_rx_trigger & (~basesoc_uart_rx_trigger_d))) begin
        basesoc_uart_rx_pending <= 1'd1;
    end
    if (basesoc_uart_tx_fifo_syncfifo_re) begin
        basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_tx_fifo_re) begin
            basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        basesoc_uart_tx_fifo_produce <= (basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_tx_fifo_do_read) begin
        basesoc_uart_tx_fifo_consume <= (basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        if ((~basesoc_uart_tx_fifo_do_read)) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_tx_fifo_do_read) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_uart_rx_fifo_syncfifo_re) begin
        basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_rx_fifo_re) begin
            basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        basesoc_uart_rx_fifo_produce <= (basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_rx_fifo_do_read) begin
        basesoc_uart_rx_fifo_consume <= (basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        if ((~basesoc_uart_rx_fifo_do_read)) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_rx_fifo_do_read) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_timer_en_storage) begin
        if ((basesoc_timer_value == 1'd0)) begin
            basesoc_timer_value <= basesoc_timer_reload_storage;
        end else begin
            basesoc_timer_value <= (basesoc_timer_value - 1'd1);
        end
    end else begin
        basesoc_timer_value <= basesoc_timer_load_storage;
    end
    if (basesoc_timer_update_value_re) begin
        basesoc_timer_value_status <= basesoc_timer_value;
    end
    if (basesoc_timer_zero_clear) begin
        basesoc_timer_zero_pending <= 1'd0;
    end
    basesoc_timer_zero_trigger_d <= basesoc_timer_zero_trigger;
    if ((basesoc_timer_zero_trigger & (~basesoc_timer_zero_trigger_d))) begin
        basesoc_timer_zero_pending <= 1'd1;
    end
    if (done) begin
        chaser <= {chaser, (~chaser[5])};
    end
    if (re) begin
        mode <= 1'd1;
    end
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 22'd4166666;
    end
    basesoc_axilite2csr_state <= basesoc_axilite2csr_next_state;
    if (basesoc_port_adr_reg_axilite2csr_next_value_ce0) begin
        basesoc_port_adr_reg <= basesoc_port_adr_reg_axilite2csr_next_value0;
    end
    if (basesoc_port_dat_r_latched_axilite2csr_next_value_ce1) begin
        basesoc_port_dat_r_latched <= basesoc_port_dat_r_latched_axilite2csr_next_value1;
    end
    if (basesoc_last_was_read_axilite2csr_next_value_ce2) begin
        basesoc_last_was_read <= basesoc_last_was_read_axilite2csr_next_value2;
    end
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        basesoc_reset_storage[1:0] <= csr_bankarray_csrbank0_reset0_r;
    end
    basesoc_reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        basesoc_scratch_storage[31:0] <= csr_bankarray_csrbank0_scratch0_r;
    end
    basesoc_scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    basesoc_bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_out0_re) begin
        storage[5:0] <= csr_bankarray_csrbank1_out0_r;
    end
    re <= csr_bankarray_csrbank1_out0_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_value_w;
            end
            3'd5: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_load0_re) begin
        basesoc_timer_load_storage[31:0] <= csr_bankarray_csrbank2_load0_r;
    end
    basesoc_timer_load_re <= csr_bankarray_csrbank2_load0_re;
    if (csr_bankarray_csrbank2_reload0_re) begin
        basesoc_timer_reload_storage[31:0] <= csr_bankarray_csrbank2_reload0_r;
    end
    basesoc_timer_reload_re <= csr_bankarray_csrbank2_reload0_re;
    if (csr_bankarray_csrbank2_en0_re) begin
        basesoc_timer_en_storage <= csr_bankarray_csrbank2_en0_r;
    end
    basesoc_timer_en_re <= csr_bankarray_csrbank2_en0_re;
    if (csr_bankarray_csrbank2_update_value0_re) begin
        basesoc_timer_update_value_storage <= csr_bankarray_csrbank2_update_value0_r;
    end
    basesoc_timer_update_value_re <= csr_bankarray_csrbank2_update_value0_re;
    basesoc_timer_value_re <= csr_bankarray_csrbank2_value_re;
    basesoc_timer_status_re <= csr_bankarray_csrbank2_ev_status_re;
    if (csr_bankarray_csrbank2_ev_pending_re) begin
        basesoc_timer_pending_r <= csr_bankarray_csrbank2_ev_pending_r;
    end
    basesoc_timer_pending_re <= csr_bankarray_csrbank2_ev_pending_re;
    if (csr_bankarray_csrbank2_ev_enable0_re) begin
        basesoc_timer_enable_storage <= csr_bankarray_csrbank2_ev_enable0_r;
    end
    basesoc_timer_enable_re <= csr_bankarray_csrbank2_ev_enable0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= basesoc_uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxfull_w;
            end
        endcase
    end
    basesoc_uart_txfull_re <= csr_bankarray_csrbank3_txfull_re;
    basesoc_uart_rxempty_re <= csr_bankarray_csrbank3_rxempty_re;
    basesoc_uart_status_re <= csr_bankarray_csrbank3_ev_status_re;
    if (csr_bankarray_csrbank3_ev_pending_re) begin
        basesoc_uart_pending_r[1:0] <= csr_bankarray_csrbank3_ev_pending_r;
    end
    basesoc_uart_pending_re <= csr_bankarray_csrbank3_ev_pending_re;
    if (csr_bankarray_csrbank3_ev_enable0_re) begin
        basesoc_uart_enable_storage[1:0] <= csr_bankarray_csrbank3_ev_enable0_r;
    end
    basesoc_uart_enable_re <= csr_bankarray_csrbank3_ev_enable0_re;
    basesoc_uart_txempty_re <= csr_bankarray_csrbank3_txempty_re;
    basesoc_uart_rxfull_re <= csr_bankarray_csrbank3_rxfull_re;
    if (sys_rst) begin
        basesoc_reset_storage <= 2'd0;
        basesoc_reset_re <= 1'd0;
        basesoc_scratch_storage <= 32'd305419896;
        basesoc_scratch_re <= 1'd0;
        basesoc_bus_errors_re <= 1'd0;
        basesoc_bus_errors <= 32'd0;
        basesoc_wishbone2axi0_cmd_done <= 1'd0;
        basesoc_wishbone2axi0_data_done <= 1'd0;
        basesoc_wishbone2axi1_cmd_done <= 1'd0;
        basesoc_wishbone2axi1_data_done <= 1'd0;
        basesoc_basesoc_last_was_read <= 1'd0;
        basesoc_basesoc_port_dat_r_latched <= 32'd0;
        basesoc_basesoc_port_adr_reg <= 15'd0;
        basesoc_ram_last_was_read <= 1'd0;
        basesoc_ram_port_dat_r_latched <= 32'd0;
        basesoc_ram_port_adr_reg <= 11'd0;
        serial_tx <= 1'd1;
        basesoc_tx_tick <= 1'd0;
        basesoc_rx_tick <= 1'd0;
        basesoc_rx_rx_d <= 1'd0;
        basesoc_uart_txfull_re <= 1'd0;
        basesoc_uart_rxempty_re <= 1'd0;
        basesoc_uart_tx_pending <= 1'd0;
        basesoc_uart_tx_trigger_d <= 1'd0;
        basesoc_uart_rx_pending <= 1'd0;
        basesoc_uart_rx_trigger_d <= 1'd0;
        basesoc_uart_status_re <= 1'd0;
        basesoc_uart_pending_re <= 1'd0;
        basesoc_uart_pending_r <= 2'd0;
        basesoc_uart_enable_storage <= 2'd0;
        basesoc_uart_enable_re <= 1'd0;
        basesoc_uart_txempty_re <= 1'd0;
        basesoc_uart_rxfull_re <= 1'd0;
        basesoc_uart_tx_fifo_readable <= 1'd0;
        basesoc_uart_tx_fifo_level0 <= 5'd0;
        basesoc_uart_tx_fifo_produce <= 4'd0;
        basesoc_uart_tx_fifo_consume <= 4'd0;
        basesoc_uart_rx_fifo_readable <= 1'd0;
        basesoc_uart_rx_fifo_level0 <= 5'd0;
        basesoc_uart_rx_fifo_produce <= 4'd0;
        basesoc_uart_rx_fifo_consume <= 4'd0;
        basesoc_timer_load_storage <= 32'd0;
        basesoc_timer_load_re <= 1'd0;
        basesoc_timer_reload_storage <= 32'd0;
        basesoc_timer_reload_re <= 1'd0;
        basesoc_timer_en_storage <= 1'd0;
        basesoc_timer_en_re <= 1'd0;
        basesoc_timer_update_value_storage <= 1'd0;
        basesoc_timer_update_value_re <= 1'd0;
        basesoc_timer_value_status <= 32'd0;
        basesoc_timer_value_re <= 1'd0;
        basesoc_timer_zero_pending <= 1'd0;
        basesoc_timer_zero_trigger_d <= 1'd0;
        basesoc_timer_status_re <= 1'd0;
        basesoc_timer_pending_re <= 1'd0;
        basesoc_timer_pending_r <= 1'd0;
        basesoc_timer_enable_storage <= 1'd0;
        basesoc_timer_enable_re <= 1'd0;
        basesoc_timer_value <= 32'd0;
        storage <= 6'd0;
        re <= 1'd0;
        chaser <= 6'd0;
        mode <= 1'd0;
        count <= 22'd4166666;
        basesoc_last_was_read <= 1'd0;
        basesoc_port_dat_r_latched <= 32'd0;
        basesoc_port_adr_reg <= 14'd0;
        basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        basesoc_socbushandler_beat_count <= 8'd0;
        basesoc_socbushandler_beat_offset <= 13'd0;
        basesoc_socbushandler_cmd_done <= 1'd0;
        basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        wishbone2axi0_state <= 2'd0;
        wishbone2axi1_state <= 2'd0;
        axi2axilite_state <= 2'd0;
        rr_write_grant <= 1'd0;
        rr_read_grant <= 1'd0;
        wr_lock_counter <= 8'd0;
        rd_lock_counter <= 8'd0;
        slave_sel_reg0 <= 3'd0;
        slave_sel_reg1 <= 3'd0;
        axirequestcounter0_counter <= 8'd0;
        axirequestcounter1_counter <= 8'd0;
        wr_timer_count <= 20'd1000000;
        rd_timer_count <= 20'd1000000;
        fsm0_state <= 1'd0;
        fsm1_state <= 1'd0;
        csr_bankarray_sel_r <= 1'd0;
        basesoc_axilitesram0_state <= 3'd0;
        basesoc_axilitesram1_state <= 3'd0;
        basesoc_rs232phytx_state <= 1'd0;
        basesoc_rs232phyrx_state <= 1'd0;
        basesoc_axilite2csr_state <= 3'd0;
    end
    multiregimpl0 <= serial_rx;
    multiregimpl1 <= multiregimpl0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 32768-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:32767];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_basesoc_adr];
end
assign basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (basesoc_ram_we[0])
		sram[basesoc_ram_adr][7:0] <= basesoc_ram_dat_w[7:0];
	if (basesoc_ram_we[1])
		sram[basesoc_ram_adr][15:8] <= basesoc_ram_dat_w[15:8];
	if (basesoc_ram_we[2])
		sram[basesoc_ram_adr][23:16] <= basesoc_ram_dat_w[23:16];
	if (basesoc_ram_we[3])
		sram[basesoc_ram_adr][31:24] <= basesoc_ram_dat_w[31:24];
	sram_adr0 <= basesoc_ram_adr;
end
assign basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 52-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:51];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_wrport_we)
		storage_1[basesoc_uart_tx_fifo_wrport_adr] <= basesoc_uart_tx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[basesoc_uart_tx_fifo_rdport_adr];
end
assign basesoc_uart_tx_fifo_wrport_dat_r = storage_1_dat0;
assign basesoc_uart_tx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:15];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_wrport_we)
		storage_2[basesoc_uart_rx_fifo_wrport_adr] <= basesoc_uart_rx_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_rdport_re)
		storage_2_dat1 <= storage_2[basesoc_uart_rx_fifo_rdport_adr];
end
assign basesoc_uart_rx_fifo_wrport_dat_r = storage_2_dat0;
assign basesoc_uart_rx_fifo_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Instance PLL of PLL Module.
//------------------------------------------------------------------------------
PLL #(
	// Parameters.
	.CLK0_IN_SEL       (1'd0),
	.CLK0_OUT_SEL      (1'd0),
	.CLK1_IN_SEL       (1'd0),
	.CLK1_OUT_SEL      (1'd0),
	.CLK2_IN_SEL       (1'd0),
	.CLK2_OUT_SEL      (1'd0),
	.CLK3_IN_SEL       (1'd0),
	.CLK3_OUT_SEL      (1'd0),
	.CLK4_IN_SEL       (1'd0),
	.CLK4_OUT_SEL      (1'd0),
	.CLK5_IN_SEL       (1'd0),
	.CLK5_OUT_SEL      (1'd0),
	.CLKFB_SEL         ("INTERNAL"),
	.CLKOUT0_DT_DIR    (1'd1),
	.CLKOUT0_DT_STEP   (1'd0),
	.CLKOUT0_EN        ("TRUE"),
	.CLKOUT0_PE_COARSE (1'd0),
	.CLKOUT0_PE_FINE   (1'd0),
	.CLKOUT1_DT_DIR    (1'd1),
	.CLKOUT1_DT_STEP   (1'd0),
	.CLKOUT1_EN        ("FALSE"),
	.CLKOUT1_PE_COARSE (1'd0),
	.CLKOUT1_PE_FINE   (1'd0),
	.CLKOUT2_DT_DIR    (1'd1),
	.CLKOUT2_DT_STEP   (1'd0),
	.CLKOUT2_EN        ("FALSE"),
	.CLKOUT2_PE_COARSE (1'd0),
	.CLKOUT2_PE_FINE   (1'd0),
	.CLKOUT3_DT_DIR    (1'd1),
	.CLKOUT3_DT_STEP   (1'd0),
	.CLKOUT3_EN        ("FALSE"),
	.CLKOUT3_PE_COARSE (1'd0),
	.CLKOUT3_PE_FINE   (1'd0),
	.CLKOUT4_EN        ("FALSE"),
	.CLKOUT4_PE_COARSE (1'd0),
	.CLKOUT4_PE_FINE   (1'd0),
	.CLKOUT5_EN        ("FALSE"),
	.CLKOUT5_PE_COARSE (1'd0),
	.CLKOUT5_PE_FINE   (1'd0),
	.CLKOUT6_EN        ("FALSE"),
	.CLKOUT6_PE_COARSE (1'd0),
	.CLKOUT6_PE_FINE   (1'd0),
	.DE0_EN            ("FALSE"),
	.DE1_EN            ("FALSE"),
	.DE2_EN            ("FALSE"),
	.DE3_EN            ("FALSE"),
	.DE4_EN            ("FALSE"),
	.DE5_EN            ("FALSE"),
	.DE6_EN            ("FALSE"),
	.DYN_DPA_EN        ("FALSE"),
	.DYN_DT0_SEL       ("FALSE"),
	.DYN_DT1_SEL       ("FALSE"),
	.DYN_DT2_SEL       ("FALSE"),
	.DYN_DT3_SEL       ("FALSE"),
	.DYN_FBDIV_SEL     ("FALSE"),
	.DYN_ICP_SEL       ("FALSE"),
	.DYN_IDIV_SEL      ("FALSE"),
	.DYN_LPF_SEL       ("FALSE"),
	.DYN_ODIV0_SEL     ("FALSE"),
	.DYN_ODIV1_SEL     ("FALSE"),
	.DYN_ODIV2_SEL     ("FALSE"),
	.DYN_ODIV3_SEL     ("FALSE"),
	.DYN_ODIV4_SEL     ("FALSE"),
	.DYN_ODIV5_SEL     ("FALSE"),
	.DYN_ODIV6_SEL     ("FALSE"),
	.DYN_PE0_SEL       ("FALSE"),
	.DYN_PE1_SEL       ("FALSE"),
	.DYN_PE2_SEL       ("FALSE"),
	.DYN_PE3_SEL       ("FALSE"),
	.DYN_PE4_SEL       ("FALSE"),
	.DYN_PE5_SEL       ("FALSE"),
	.DYN_PE6_SEL       ("FALSE"),
	.FBDIV_SEL         (1'd1),
	.FCLKIN            ("50.0"),
	.IDIV_SEL          (1'd1),
	.MDIV_FRAC_SEL     (1'd0),
	.MDIV_SEL          (5'd16),
	.ODIV0_FRAC_SEL    (1'd0),
	.ODIV0_SEL         (5'd16),
	.ODIV1_SEL         (4'd8),
	.ODIV2_SEL         (4'd8),
	.ODIV3_SEL         (4'd8),
	.ODIV4_SEL         (4'd8),
	.ODIV5_SEL         (4'd8),
	.ODIV6_SEL         (4'd8),
	.RESET_I_EN        ("FALSE"),
	.RESET_O_EN        ("FALSE"),
	.SSC_EN            ("FALSE")
) PLL (
	// Inputs.
	.CLKFB         (1'd0),
	.CLKIN         (crg_clkin),
	.DT0           (4'd0),
	.DT1           (4'd0),
	.DT2           (4'd0),
	.DT3           (4'd0),
	.ENCLK0        (1'd1),
	.ENCLK1        (1'd1),
	.ENCLK2        (1'd1),
	.ENCLK3        (1'd1),
	.ENCLK4        (1'd1),
	.ENCLK5        (1'd1),
	.ENCLK6        (1'd1),
	.FBDSEL        (6'd0),
	.ICPSEL        (6'd0),
	.IDSEL         (6'd0),
	.LPFCAP        (2'd0),
	.LPFRES        (3'd0),
	.MDSEL         (7'd0),
	.MDSEL_FRAC    (3'd0),
	.ODSEL0        (7'd0),
	.ODSEL0_FRAC   (3'd0),
	.ODSEL1        (7'd0),
	.ODSEL2        (7'd0),
	.ODSEL3        (7'd0),
	.ODSEL4        (7'd0),
	.ODSEL5        (7'd0),
	.ODSEL6        (7'd0),
	.PLLPWD        (1'd0),
	.PSDIR         (1'd0),
	.PSPULSE       (1'd0),
	.PSSEL         (3'd0),
	.RESET         (crg_reset),
	.RESET_I       (1'd0),
	.RESET_O       (1'd0),
	.SSCMDSEL      (7'd0),
	.SSCMDSEL_FRAC (3'd0),
	.SSCON         (1'd0),
	.SSCPOL        (1'd0),

	// Outputs.
	.CLKFBOUT      (basesoc_gw5apll6),
	.CLKOUT0       (crg_clkout),
	.CLKOUT1       (basesoc_gw5apll0),
	.CLKOUT2       (basesoc_gw5apll1),
	.CLKOUT3       (basesoc_gw5apll2),
	.CLKOUT4       (basesoc_gw5apll3),
	.CLKOUT5       (basesoc_gw5apll4),
	.CLKOUT6       (basesoc_gw5apll5),
	.LOCK          (crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (basesoc_dbus_err),
	.externalInterruptArray (basesoc_interrupt),
	.externalResetVector    (basesoc_vexriscv),
	.iBusWishbone_ACK       (basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (basesoc_ibus_err),
	.reset                  ((sys_rst | basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (basesoc_dbus_adr),
	.dBusWishbone_BTE       (basesoc_dbus_bte),
	.dBusWishbone_CTI       (basesoc_dbus_cti),
	.dBusWishbone_CYC       (basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (basesoc_dbus_sel),
	.dBusWishbone_STB       (basesoc_dbus_stb),
	.dBusWishbone_WE        (basesoc_dbus_we),
	.iBusWishbone_ADR       (basesoc_ibus_adr),
	.iBusWishbone_BTE       (basesoc_ibus_bte),
	.iBusWishbone_CTI       (basesoc_ibus_cti),
	.iBusWishbone_CYC       (basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (basesoc_ibus_sel),
	.iBusWishbone_STB       (basesoc_ibus_stb),
	.iBusWishbone_WE        (basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Instance DFFP of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP(
	// Inputs.
	.CLK    (sys_clk),
	.D      (1'd0),
	.PRESET ((~crg_locked)),

	// Outputs.
	.Q      (rst1)
);

//------------------------------------------------------------------------------
// Instance DFFP_1 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_1(
	// Inputs.
	.CLK    (sys_clk),
	.D      (rst1),
	.PRESET ((~crg_locked)),

	// Outputs.
	.Q      (sys_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-09-28 16:45:56.
//------------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_mega_138k_pro.v
// Device     : GW5AST-LV138FPG676AES
// LiteX sha1 : c3e87367c
// Date       : 2024-09-28 19:34:35
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sipeed_tang_mega_138k_pro (
    input  wire          clk50,
    output wire          led_n0,
    output wire          led_n1,
    output wire          led_n2,
    output wire          led_n3,
    output wire          led_n4,
    output wire          led_n5,
    input  wire          rst,
    input  wire          serial_rx,
    output reg           serial_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GW5APLL)
│    │    └─── [PLL]
└─── bus (SoCBusHandler)
│    └─── wishbone2axi_0* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── wishbone2axi_1* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── axi2axilite_0* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2axilite_1* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2axilite_2* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── _interconnect (AXIInterconnectShared)
│    │    └─── arbiter (AXIArbiter)
│    │    │    └─── rr_write (RoundRobin)
│    │    │    └─── rr_read (RoundRobin)
│    │    │    └─── wr_lock (_AXIRequestCounter)
│    │    │    └─── rd_lock (_AXIRequestCounter)
│    │    └─── decoder (AXIDecoder)
│    │    │    └─── _axirequestcounter_0* (_AXIRequestCounter)
│    │    │    └─── _axirequestcounter_1* (_AXIRequestCounter)
│    │    └─── timeout (AXITimeout)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    │    └─── waittimer_1* (WaitTimer)
│    │    │    └─── wr_fsm (FSM)
│    │    │    └─── rd_fsm (FSM)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (AXILiteSRAM)
│    └─── fsm (FSM)
└─── sram (AXILiteSRAM)
│    └─── fsm (FSM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (AXILite2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [DFFP]
└─── [DFFP]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          builder_ar_first;
wire          builder_ar_last;
wire          builder_ar_param_dest;
wire          builder_ar_param_id;
wire          builder_ar_param_user;
wire   [31:0] builder_ar_payload_addr;
wire    [1:0] builder_ar_payload_burst;
wire    [3:0] builder_ar_payload_cache;
wire    [7:0] builder_ar_payload_len;
wire          builder_ar_payload_lock;
wire    [2:0] builder_ar_payload_prot;
wire    [3:0] builder_ar_payload_qos;
wire    [3:0] builder_ar_payload_region;
wire    [2:0] builder_ar_payload_size;
reg           builder_ar_ready = 1'd0;
wire          builder_ar_valid;
wire          builder_aw_first;
wire          builder_aw_last;
wire          builder_aw_param_dest;
wire          builder_aw_param_id;
wire          builder_aw_param_user;
wire   [31:0] builder_aw_payload_addr;
wire    [1:0] builder_aw_payload_burst;
wire    [3:0] builder_aw_payload_cache;
wire    [7:0] builder_aw_payload_len;
wire          builder_aw_payload_lock;
wire    [2:0] builder_aw_payload_prot;
wire    [3:0] builder_aw_payload_qos;
wire    [3:0] builder_aw_payload_region;
wire    [2:0] builder_aw_payload_size;
reg           builder_aw_ready = 1'd0;
wire          builder_aw_valid;
reg     [1:0] builder_axi2axilite0_next_state = 2'd0;
reg     [1:0] builder_axi2axilite0_state = 2'd0;
reg     [1:0] builder_axi2axilite1_next_state = 2'd0;
reg     [1:0] builder_axi2axilite1_state = 2'd0;
reg     [1:0] builder_axi2axilite2_next_state = 2'd0;
reg     [1:0] builder_axi2axilite2_state = 2'd0;
reg     [7:0] builder_axirequestcounter0_counter = 8'd0;
wire          builder_axirequestcounter0_empty;
wire          builder_axirequestcounter0_full;
wire          builder_axirequestcounter0_stall;
reg     [7:0] builder_axirequestcounter1_counter = 8'd0;
wire          builder_axirequestcounter1_empty;
wire          builder_axirequestcounter1_full;
wire          builder_axirequestcounter1_stall;
wire          builder_b_first;
wire          builder_b_last;
wire          builder_b_param_dest;
wire          builder_b_param_id;
wire          builder_b_param_user;
reg     [1:0] builder_b_payload_resp = 2'd0;
wire          builder_b_ready;
reg           builder_b_valid = 1'd0;
reg    [13:0] builder_basesoc_adr = 14'd0;
reg     [2:0] builder_basesoc_axilite2csr_next_state = 3'd0;
reg     [2:0] builder_basesoc_axilite2csr_state = 3'd0;
reg    [31:0] builder_basesoc_axiliteinterface_ar_payload_addr = 32'd0;
reg           builder_basesoc_axiliteinterface_ar_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_ar_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_aw_payload_addr = 32'd0;
reg           builder_basesoc_axiliteinterface_aw_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_aw_valid = 1'd0;
reg     [1:0] builder_basesoc_axiliteinterface_b_payload_resp = 2'd0;
wire          builder_basesoc_axiliteinterface_b_ready;
reg           builder_basesoc_axiliteinterface_b_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_r_payload_data = 32'd0;
reg     [1:0] builder_basesoc_axiliteinterface_r_payload_resp = 2'd0;
reg           builder_basesoc_axiliteinterface_r_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_r_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_w_payload_data = 32'd0;
reg     [3:0] builder_basesoc_axiliteinterface_w_payload_strb = 4'd0;
reg           builder_basesoc_axiliteinterface_w_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_w_valid = 1'd0;
reg     [2:0] builder_basesoc_axilitesram0_next_state = 3'd0;
reg     [2:0] builder_basesoc_axilitesram0_state = 3'd0;
reg     [2:0] builder_basesoc_axilitesram1_next_state = 3'd0;
reg     [2:0] builder_basesoc_axilitesram1_state = 3'd0;
wire   [31:0] builder_basesoc_dat_r;
wire   [31:0] builder_basesoc_dat_w;
reg           builder_basesoc_do_read = 1'd0;
reg           builder_basesoc_do_write = 1'd0;
wire          builder_basesoc_gw5apll0;
wire          builder_basesoc_gw5apll1;
wire          builder_basesoc_gw5apll2;
wire          builder_basesoc_gw5apll3;
wire          builder_basesoc_gw5apll4;
wire          builder_basesoc_gw5apll5;
wire          builder_basesoc_gw5apll6;
reg           builder_basesoc_last_was_read = 1'd0;
reg           builder_basesoc_last_was_read_axilite2csr_next_value2 = 1'd0;
reg           builder_basesoc_last_was_read_axilite2csr_next_value_ce2 = 1'd0;
reg    [13:0] builder_basesoc_port_adr_reg = 14'd0;
reg    [13:0] builder_basesoc_port_adr_reg_axilite2csr_next_value0 = 14'd0;
reg           builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0 = 1'd0;
reg    [31:0] builder_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] builder_basesoc_port_dat_r_latched_axilite2csr_next_value1 = 32'd0;
reg           builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 = 1'd0;
wire          builder_basesoc_re;
reg           builder_basesoc_rs232phyrx_next_state = 1'd0;
reg           builder_basesoc_rs232phyrx_state = 1'd0;
reg           builder_basesoc_rs232phytx_next_state = 1'd0;
reg           builder_basesoc_rs232phytx_state = 1'd0;
wire          builder_basesoc_socbushandler_ar_first;
wire          builder_basesoc_socbushandler_ar_last;
wire          builder_basesoc_socbushandler_ar_param_dest;
wire          builder_basesoc_socbushandler_ar_param_id;
wire          builder_basesoc_socbushandler_ar_param_user;
wire   [31:0] builder_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_ar_payload_len;
wire          builder_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_region;
wire    [2:0] builder_basesoc_socbushandler_ar_payload_size;
reg           builder_basesoc_socbushandler_ar_ready = 1'd0;
wire          builder_basesoc_socbushandler_ar_valid;
wire          builder_basesoc_socbushandler_aw_first;
wire          builder_basesoc_socbushandler_aw_last;
wire          builder_basesoc_socbushandler_aw_param_dest;
wire          builder_basesoc_socbushandler_aw_param_id;
wire          builder_basesoc_socbushandler_aw_param_user;
wire   [31:0] builder_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_aw_payload_len;
wire          builder_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_region;
wire    [2:0] builder_basesoc_socbushandler_aw_payload_size;
reg           builder_basesoc_socbushandler_aw_ready = 1'd0;
wire          builder_basesoc_socbushandler_aw_valid;
wire          builder_basesoc_socbushandler_ax_beat_first;
wire          builder_basesoc_socbushandler_ax_beat_last;
wire          builder_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] builder_basesoc_socbushandler_ax_beat_payload_addr;
reg           builder_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          builder_basesoc_socbushandler_ax_beat_valid;
reg           builder_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] builder_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           builder_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] builder_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] builder_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          builder_basesoc_socbushandler_ax_burst_ready;
reg           builder_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           builder_basesoc_socbushandler_b_first = 1'd0;
reg           builder_basesoc_socbushandler_b_last = 1'd0;
reg           builder_basesoc_socbushandler_b_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_b_param_id = 1'd0;
reg           builder_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] builder_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          builder_basesoc_socbushandler_b_ready;
reg           builder_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] builder_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] builder_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] builder_basesoc_socbushandler_beat_size;
wire   [11:0] builder_basesoc_socbushandler_beat_wrap;
reg           builder_basesoc_socbushandler_cmd_done = 1'd0;
reg           builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 = 1'd0;
reg           builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 = 1'd0;
wire          builder_basesoc_socbushandler_pipe_valid_sink_first;
wire          builder_basesoc_socbushandler_pipe_valid_sink_last;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          builder_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          builder_basesoc_socbushandler_pipe_valid_sink_ready;
wire          builder_basesoc_socbushandler_pipe_valid_sink_valid;
reg           builder_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] builder_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] builder_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] builder_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          builder_basesoc_socbushandler_pipe_valid_source_ready;
reg           builder_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           builder_basesoc_socbushandler_r_first = 1'd0;
reg           builder_basesoc_socbushandler_r_last = 1'd0;
reg           builder_basesoc_socbushandler_r_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_r_param_id = 1'd0;
reg           builder_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          builder_basesoc_socbushandler_r_ready;
reg           builder_basesoc_socbushandler_r_valid = 1'd0;
wire          builder_basesoc_socbushandler_sink_sink_first;
wire          builder_basesoc_socbushandler_sink_sink_last;
wire          builder_basesoc_socbushandler_sink_sink_param_dest;
wire          builder_basesoc_socbushandler_sink_sink_param_id;
wire          builder_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] builder_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_sink_sink_payload_len;
wire          builder_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] builder_basesoc_socbushandler_sink_sink_payload_size;
wire          builder_basesoc_socbushandler_sink_sink_ready;
wire          builder_basesoc_socbushandler_sink_sink_valid;
wire          builder_basesoc_socbushandler_source_source_first;
wire          builder_basesoc_socbushandler_source_source_last;
wire          builder_basesoc_socbushandler_source_source_param_dest;
wire          builder_basesoc_socbushandler_source_source_param_id;
wire          builder_basesoc_socbushandler_source_source_param_user;
wire   [31:0] builder_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_source_source_payload_len;
wire          builder_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] builder_basesoc_socbushandler_source_source_payload_size;
reg           builder_basesoc_socbushandler_source_source_ready = 1'd0;
wire          builder_basesoc_socbushandler_source_source_valid;
wire          builder_basesoc_socbushandler_w_first;
wire          builder_basesoc_socbushandler_w_last;
wire          builder_basesoc_socbushandler_w_param_dest;
wire          builder_basesoc_socbushandler_w_param_id;
wire          builder_basesoc_socbushandler_w_param_user;
wire   [31:0] builder_basesoc_socbushandler_w_payload_data;
wire    [3:0] builder_basesoc_socbushandler_w_payload_strb;
reg           builder_basesoc_socbushandler_w_ready = 1'd0;
wire          builder_basesoc_socbushandler_w_valid;
wire          builder_basesoc_we;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire    [5:0] builder_csr_bankarray_csrbank1_out0_r;
reg           builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [5:0] builder_csr_bankarray_csrbank1_out0_w;
reg           builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire          builder_csr_bankarray_csrbank2_en0_r;
reg           builder_csr_bankarray_csrbank2_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_en0_w;
reg           builder_csr_bankarray_csrbank2_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_enable0_r;
reg           builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_enable0_w;
reg           builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_pending_r;
reg           builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_pending_w;
reg           builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_status_r;
reg           builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_ev_status_w;
reg           builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_load0_r;
reg           builder_csr_bankarray_csrbank2_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_load0_w;
reg           builder_csr_bankarray_csrbank2_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_reload0_r;
reg           builder_csr_bankarray_csrbank2_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_reload0_w;
reg           builder_csr_bankarray_csrbank2_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank2_update_value0_r;
reg           builder_csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_update_value0_w;
reg           builder_csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_value_r;
reg           builder_csr_bankarray_csrbank2_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_value_w;
reg           builder_csr_bankarray_csrbank2_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_enable0_r;
reg           builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_enable0_w;
reg           builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_pending_r;
reg           builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_pending_w;
reg           builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_status_r;
reg           builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_ev_status_w;
reg           builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxempty_r;
reg           builder_csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxempty_w;
reg           builder_csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxfull_r;
reg           builder_csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_rxfull_w;
reg           builder_csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire          builder_csr_bankarray_csrbank3_txempty_r;
reg           builder_csr_bankarray_csrbank3_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_txempty_w;
reg           builder_csr_bankarray_csrbank3_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_txfull_r;
reg           builder_csr_bankarray_csrbank3_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_txfull_w;
reg           builder_csr_bankarray_csrbank3_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_error;
reg           builder_fsm0_next_state = 1'd0;
reg           builder_fsm0_state = 1'd0;
reg           builder_fsm1_next_state = 1'd0;
reg           builder_fsm1_state = 1'd0;
reg           builder_multiregimpl0 = 1'd0;
reg           builder_multiregimpl1 = 1'd0;
wire          builder_r_first;
reg           builder_r_last = 1'd0;
wire          builder_r_param_dest;
wire          builder_r_param_id;
wire          builder_r_param_user;
reg    [31:0] builder_r_payload_data = 32'd0;
reg     [1:0] builder_r_payload_resp = 2'd0;
wire          builder_r_ready;
reg           builder_r_valid = 1'd0;
reg           builder_rd_error = 1'd0;
reg     [7:0] builder_rd_lock_counter = 8'd0;
wire          builder_rd_lock_empty;
wire          builder_rd_lock_full;
wire          builder_rd_lock_stall;
reg    [19:0] builder_rd_timer_count = 20'd1000000;
wire          builder_rd_timer_done;
reg           builder_rd_timer_wait = 1'd0;
wire          builder_rr_read_ce;
reg           builder_rr_read_grant = 1'd0;
wire    [1:0] builder_rr_read_request;
wire          builder_rr_write_ce;
reg           builder_rr_write_grant = 1'd0;
wire    [1:0] builder_rr_write_request;
wire          builder_rst1;
reg           builder_self0 = 1'd0;
reg           builder_self1 = 1'd0;
reg     [3:0] builder_self10 = 4'd0;
reg     [3:0] builder_self11 = 4'd0;
reg           builder_self12 = 1'd0;
reg           builder_self13 = 1'd0;
reg           builder_self14 = 1'd0;
reg           builder_self15 = 1'd0;
reg           builder_self16 = 1'd0;
reg           builder_self17 = 1'd0;
reg    [31:0] builder_self18 = 32'd0;
reg     [3:0] builder_self19 = 4'd0;
reg           builder_self2 = 1'd0;
reg           builder_self20 = 1'd0;
reg           builder_self21 = 1'd0;
reg           builder_self22 = 1'd0;
reg           builder_self23 = 1'd0;
reg           builder_self24 = 1'd0;
reg           builder_self25 = 1'd0;
reg           builder_self26 = 1'd0;
reg    [31:0] builder_self27 = 32'd0;
reg     [1:0] builder_self28 = 2'd0;
reg     [7:0] builder_self29 = 8'd0;
reg    [31:0] builder_self3 = 32'd0;
reg     [2:0] builder_self30 = 3'd0;
reg           builder_self31 = 1'd0;
reg     [2:0] builder_self32 = 3'd0;
reg     [3:0] builder_self33 = 4'd0;
reg     [3:0] builder_self34 = 4'd0;
reg     [3:0] builder_self35 = 4'd0;
reg           builder_self36 = 1'd0;
reg           builder_self37 = 1'd0;
reg           builder_self38 = 1'd0;
reg           builder_self39 = 1'd0;
reg     [1:0] builder_self4 = 2'd0;
reg     [7:0] builder_self5 = 8'd0;
reg     [2:0] builder_self6 = 3'd0;
reg           builder_self7 = 1'd0;
reg     [2:0] builder_self8 = 3'd0;
reg     [3:0] builder_self9 = 4'd0;
reg     [2:0] builder_slave_sel0 = 3'd0;
reg     [2:0] builder_slave_sel1 = 3'd0;
reg     [2:0] builder_slave_sel_dec0 = 3'd0;
reg     [2:0] builder_slave_sel_dec1 = 3'd0;
reg     [2:0] builder_slave_sel_reg0 = 3'd0;
reg     [2:0] builder_slave_sel_reg1 = 3'd0;
wire   [29:0] builder_slice_proxy0;
wire   [29:0] builder_slice_proxy1;
wire   [29:0] builder_slice_proxy2;
wire   [29:0] builder_slice_proxy3;
wire   [29:0] builder_slice_proxy4;
wire   [29:0] builder_slice_proxy5;
wire          builder_w_first;
wire          builder_w_last;
wire          builder_w_param_dest;
wire          builder_w_param_id;
wire          builder_w_param_user;
wire   [31:0] builder_w_payload_data;
wire    [3:0] builder_w_payload_strb;
reg           builder_w_ready = 1'd0;
wire          builder_w_valid;
reg     [1:0] builder_wishbone2axi0_next_state = 2'd0;
reg     [1:0] builder_wishbone2axi0_state = 2'd0;
reg     [1:0] builder_wishbone2axi1_next_state = 2'd0;
reg     [1:0] builder_wishbone2axi1_state = 2'd0;
reg           builder_wr_error = 1'd0;
reg     [7:0] builder_wr_lock_counter = 8'd0;
wire          builder_wr_lock_empty;
wire          builder_wr_lock_full;
wire          builder_wr_lock_stall;
reg    [19:0] builder_wr_timer_count = 20'd1000000;
wire          builder_wr_timer_done;
reg           builder_wr_timer_wait = 1'd0;
reg    [14:0] main_basesoc_basesoc_adr = 15'd0;
wire   [31:0] main_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_do_read = 1'd0;
reg           main_basesoc_basesoc_do_write = 1'd0;
reg           main_basesoc_basesoc_last_was_read = 1'd0;
reg           main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 = 1'd0;
reg           main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 = 1'd0;
reg    [14:0] main_basesoc_basesoc_port_adr_reg = 15'd0;
reg    [14:0] main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 = 15'd0;
reg           main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 = 1'd0;
reg    [31:0] main_basesoc_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 = 32'd0;
reg           main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_ar_payload_addr = 32'd0;
reg           main_basesoc_basesoc_ram_bus_ar_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_ar_valid = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_aw_payload_addr = 32'd0;
reg           main_basesoc_basesoc_ram_bus_aw_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_aw_valid = 1'd0;
reg     [1:0] main_basesoc_basesoc_ram_bus_b_payload_resp = 2'd0;
wire          main_basesoc_basesoc_ram_bus_b_ready;
reg           main_basesoc_basesoc_ram_bus_b_valid = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_basesoc_ram_bus_r_payload_resp = 2'd0;
reg           main_basesoc_basesoc_ram_bus_r_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_r_valid = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_basesoc_ram_bus_w_payload_strb = 4'd0;
reg           main_basesoc_basesoc_ram_bus_w_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_w_valid = 1'd0;
wire          main_basesoc_basesoc_socbushandler_ar_first;
wire          main_basesoc_basesoc_socbushandler_ar_last;
wire          main_basesoc_basesoc_socbushandler_ar_param_dest;
wire          main_basesoc_basesoc_socbushandler_ar_param_id;
wire          main_basesoc_basesoc_socbushandler_ar_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_ar_payload_len;
wire          main_basesoc_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_ar_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_ar_payload_size;
reg           main_basesoc_basesoc_socbushandler_ar_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_ar_valid;
wire          main_basesoc_basesoc_socbushandler_aw_first;
wire          main_basesoc_basesoc_socbushandler_aw_last;
wire          main_basesoc_basesoc_socbushandler_aw_param_dest;
wire          main_basesoc_basesoc_socbushandler_aw_param_id;
wire          main_basesoc_basesoc_socbushandler_aw_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_aw_payload_len;
wire          main_basesoc_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_aw_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_aw_payload_size;
reg           main_basesoc_basesoc_socbushandler_aw_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_aw_valid;
wire          main_basesoc_basesoc_socbushandler_ax_beat_first;
wire          main_basesoc_basesoc_socbushandler_ax_beat_last;
wire          main_basesoc_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] main_basesoc_basesoc_socbushandler_ax_beat_payload_addr;
reg           main_basesoc_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_ax_beat_valid;
reg           main_basesoc_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          main_basesoc_basesoc_socbushandler_ax_burst_ready;
reg           main_basesoc_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          main_basesoc_basesoc_socbushandler_b_ready;
reg           main_basesoc_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] main_basesoc_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] main_basesoc_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] main_basesoc_basesoc_socbushandler_beat_size;
wire   [11:0] main_basesoc_basesoc_socbushandler_beat_wrap;
reg           main_basesoc_basesoc_socbushandler_cmd_done = 1'd0;
reg           main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 = 1'd0;
reg           main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 = 1'd0;
reg           main_basesoc_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 = 1'd0;
reg           main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 = 1'd0;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_first;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_last;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_ready;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_valid;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_source_ready;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] main_basesoc_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          main_basesoc_basesoc_socbushandler_r_ready;
reg           main_basesoc_basesoc_socbushandler_r_valid = 1'd0;
wire          main_basesoc_basesoc_socbushandler_sink_sink_first;
wire          main_basesoc_basesoc_socbushandler_sink_sink_last;
wire          main_basesoc_basesoc_socbushandler_sink_sink_param_dest;
wire          main_basesoc_basesoc_socbushandler_sink_sink_param_id;
wire          main_basesoc_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_len;
wire          main_basesoc_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_size;
wire          main_basesoc_basesoc_socbushandler_sink_sink_ready;
wire          main_basesoc_basesoc_socbushandler_sink_sink_valid;
wire          main_basesoc_basesoc_socbushandler_source_source_first;
wire          main_basesoc_basesoc_socbushandler_source_source_last;
wire          main_basesoc_basesoc_socbushandler_source_source_param_dest;
wire          main_basesoc_basesoc_socbushandler_source_source_param_id;
wire          main_basesoc_basesoc_socbushandler_source_source_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_source_source_payload_len;
wire          main_basesoc_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_source_source_payload_size;
reg           main_basesoc_basesoc_socbushandler_source_source_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_source_source_valid;
wire          main_basesoc_basesoc_socbushandler_w_first;
wire          main_basesoc_basesoc_socbushandler_w_last;
wire          main_basesoc_basesoc_socbushandler_w_param_dest;
wire          main_basesoc_basesoc_socbushandler_w_param_id;
wire          main_basesoc_basesoc_socbushandler_w_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_w_payload_data;
wire    [3:0] main_basesoc_basesoc_socbushandler_w_payload_strb;
reg           main_basesoc_basesoc_socbushandler_w_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_w_valid;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
wire          main_basesoc_dbus_ack;
wire   [29:0] main_basesoc_dbus_adr;
wire    [1:0] main_basesoc_dbus_bte;
wire    [2:0] main_basesoc_dbus_cti;
wire          main_basesoc_dbus_cyc;
wire   [31:0] main_basesoc_dbus_dat_r;
wire   [31:0] main_basesoc_dbus_dat_w;
wire          main_basesoc_dbus_err;
wire    [3:0] main_basesoc_dbus_sel;
wire          main_basesoc_dbus_stb;
wire          main_basesoc_dbus_we;
wire          main_basesoc_ibus_ack;
wire   [29:0] main_basesoc_ibus_adr;
wire    [1:0] main_basesoc_ibus_bte;
wire    [2:0] main_basesoc_ibus_cti;
wire          main_basesoc_ibus_cyc;
wire   [31:0] main_basesoc_ibus_dat_r;
wire   [31:0] main_basesoc_ibus_dat_w;
wire          main_basesoc_ibus_err;
wire    [3:0] main_basesoc_ibus_sel;
wire          main_basesoc_ibus_stb;
wire          main_basesoc_ibus_we;
reg    [31:0] main_basesoc_interrupt = 32'd0;
reg    [10:0] main_basesoc_ram_adr = 11'd0;
reg    [31:0] main_basesoc_ram_bus_ar_payload_addr = 32'd0;
reg           main_basesoc_ram_bus_ar_ready = 1'd0;
reg           main_basesoc_ram_bus_ar_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_aw_payload_addr = 32'd0;
reg           main_basesoc_ram_bus_aw_ready = 1'd0;
reg           main_basesoc_ram_bus_aw_valid = 1'd0;
reg     [1:0] main_basesoc_ram_bus_b_payload_resp = 2'd0;
wire          main_basesoc_ram_bus_b_ready;
reg           main_basesoc_ram_bus_b_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_ram_bus_r_payload_resp = 2'd0;
reg           main_basesoc_ram_bus_r_ready = 1'd0;
reg           main_basesoc_ram_bus_r_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_ram_bus_w_payload_strb = 4'd0;
reg           main_basesoc_ram_bus_w_ready = 1'd0;
reg           main_basesoc_ram_bus_w_valid = 1'd0;
wire   [31:0] main_basesoc_ram_dat_r;
reg    [31:0] main_basesoc_ram_dat_w = 32'd0;
reg           main_basesoc_ram_do_read = 1'd0;
reg           main_basesoc_ram_do_write = 1'd0;
reg           main_basesoc_ram_last_was_read = 1'd0;
reg           main_basesoc_ram_last_was_read_axilitesram1_next_value2 = 1'd0;
reg           main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 = 1'd0;
reg    [10:0] main_basesoc_ram_port_adr_reg = 11'd0;
reg    [10:0] main_basesoc_ram_port_adr_reg_axilitesram1_next_value0 = 11'd0;
reg           main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 = 1'd0;
reg    [31:0] main_basesoc_ram_port_dat_r_latched = 32'd0;
reg    [31:0] main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 = 32'd0;
reg           main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 = 1'd0;
reg     [3:0] main_basesoc_ram_we = 4'd0;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_basesoc_soc_rst = 1'd0;
wire          main_basesoc_socbushandler_ar_first;
wire          main_basesoc_socbushandler_ar_last;
wire          main_basesoc_socbushandler_ar_param_dest;
wire          main_basesoc_socbushandler_ar_param_id;
wire          main_basesoc_socbushandler_ar_param_user;
wire   [31:0] main_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] main_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] main_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] main_basesoc_socbushandler_ar_payload_len;
wire          main_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] main_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] main_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] main_basesoc_socbushandler_ar_payload_region;
wire    [2:0] main_basesoc_socbushandler_ar_payload_size;
reg           main_basesoc_socbushandler_ar_ready = 1'd0;
wire          main_basesoc_socbushandler_ar_valid;
wire          main_basesoc_socbushandler_aw_first;
wire          main_basesoc_socbushandler_aw_last;
wire          main_basesoc_socbushandler_aw_param_dest;
wire          main_basesoc_socbushandler_aw_param_id;
wire          main_basesoc_socbushandler_aw_param_user;
wire   [31:0] main_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] main_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] main_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] main_basesoc_socbushandler_aw_payload_len;
wire          main_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] main_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] main_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] main_basesoc_socbushandler_aw_payload_region;
wire    [2:0] main_basesoc_socbushandler_aw_payload_size;
reg           main_basesoc_socbushandler_aw_ready = 1'd0;
wire          main_basesoc_socbushandler_aw_valid;
wire          main_basesoc_socbushandler_ax_beat_first;
wire          main_basesoc_socbushandler_ax_beat_last;
wire          main_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] main_basesoc_socbushandler_ax_beat_payload_addr;
reg           main_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          main_basesoc_socbushandler_ax_beat_valid;
reg           main_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           main_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] main_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          main_basesoc_socbushandler_ax_burst_ready;
reg           main_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_ar_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_ar_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_ar_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_ar_param_id;
reg           main_basesoc_socbushandler_axiinterface0_ar_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_ar_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_ar_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_ar_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface0_ar_payload_len;
wire          main_basesoc_socbushandler_axiinterface0_ar_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_ar_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_ar_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface0_ar_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_ar_payload_size;
reg           main_basesoc_socbushandler_axiinterface0_ar_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_ar_valid;
reg           main_basesoc_socbushandler_axiinterface0_aw_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_aw_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_aw_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_aw_param_id;
reg           main_basesoc_socbushandler_axiinterface0_aw_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_aw_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_aw_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_aw_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface0_aw_payload_len;
wire          main_basesoc_socbushandler_axiinterface0_aw_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_aw_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_aw_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface0_aw_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_aw_payload_size;
reg           main_basesoc_socbushandler_axiinterface0_aw_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_aw_valid;
wire          main_basesoc_socbushandler_axiinterface0_b_first;
wire          main_basesoc_socbushandler_axiinterface0_b_last;
wire          main_basesoc_socbushandler_axiinterface0_b_param_dest;
wire          main_basesoc_socbushandler_axiinterface0_b_param_id;
wire          main_basesoc_socbushandler_axiinterface0_b_param_user;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_b_payload_resp;
wire          main_basesoc_socbushandler_axiinterface0_b_ready;
reg           main_basesoc_socbushandler_axiinterface0_b_valid = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_r_first;
wire          main_basesoc_socbushandler_axiinterface0_r_last;
wire          main_basesoc_socbushandler_axiinterface0_r_param_dest;
wire          main_basesoc_socbushandler_axiinterface0_r_param_id;
wire          main_basesoc_socbushandler_axiinterface0_r_param_user;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_r_payload_resp;
wire          main_basesoc_socbushandler_axiinterface0_r_ready;
reg           main_basesoc_socbushandler_axiinterface0_r_valid = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_w_first = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_w_last;
reg           main_basesoc_socbushandler_axiinterface0_w_param_dest = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_w_param_id = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_w_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_w_payload_data;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_w_payload_strb;
reg           main_basesoc_socbushandler_axiinterface0_w_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_w_valid;
reg           main_basesoc_socbushandler_axiinterface1_ar_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_ar_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_ar_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_ar_param_id;
reg           main_basesoc_socbushandler_axiinterface1_ar_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_ar_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_ar_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_ar_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface1_ar_payload_len;
wire          main_basesoc_socbushandler_axiinterface1_ar_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_ar_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_ar_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface1_ar_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_ar_payload_size;
reg           main_basesoc_socbushandler_axiinterface1_ar_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_ar_valid;
reg           main_basesoc_socbushandler_axiinterface1_aw_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_aw_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_aw_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_aw_param_id;
reg           main_basesoc_socbushandler_axiinterface1_aw_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_aw_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_aw_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_aw_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface1_aw_payload_len;
wire          main_basesoc_socbushandler_axiinterface1_aw_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_aw_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_aw_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface1_aw_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_aw_payload_size;
reg           main_basesoc_socbushandler_axiinterface1_aw_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_aw_valid;
wire          main_basesoc_socbushandler_axiinterface1_b_first;
wire          main_basesoc_socbushandler_axiinterface1_b_last;
wire          main_basesoc_socbushandler_axiinterface1_b_param_dest;
wire          main_basesoc_socbushandler_axiinterface1_b_param_id;
wire          main_basesoc_socbushandler_axiinterface1_b_param_user;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_b_payload_resp;
wire          main_basesoc_socbushandler_axiinterface1_b_ready;
reg           main_basesoc_socbushandler_axiinterface1_b_valid = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_r_first;
wire          main_basesoc_socbushandler_axiinterface1_r_last;
wire          main_basesoc_socbushandler_axiinterface1_r_param_dest;
wire          main_basesoc_socbushandler_axiinterface1_r_param_id;
wire          main_basesoc_socbushandler_axiinterface1_r_param_user;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_r_payload_resp;
wire          main_basesoc_socbushandler_axiinterface1_r_ready;
reg           main_basesoc_socbushandler_axiinterface1_r_valid = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_w_first = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_w_last;
reg           main_basesoc_socbushandler_axiinterface1_w_param_dest = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_w_param_id = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_w_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_w_payload_data;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_w_payload_strb;
reg           main_basesoc_socbushandler_axiinterface1_w_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_w_valid;
reg           main_basesoc_socbushandler_b_first = 1'd0;
reg           main_basesoc_socbushandler_b_last = 1'd0;
reg           main_basesoc_socbushandler_b_param_dest = 1'd0;
reg           main_basesoc_socbushandler_b_param_id = 1'd0;
reg           main_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] main_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          main_basesoc_socbushandler_b_ready;
reg           main_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] main_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] main_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] main_basesoc_socbushandler_beat_size;
wire   [11:0] main_basesoc_socbushandler_beat_wrap;
reg           main_basesoc_socbushandler_cmd_done = 1'd0;
reg           main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 = 1'd0;
reg           main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 = 1'd0;
reg           main_basesoc_socbushandler_interface0_adapted_interface_ack = 1'd0;
reg    [31:0] main_basesoc_socbushandler_interface0_adapted_interface_adr = 32'd0;
wire    [1:0] main_basesoc_socbushandler_interface0_adapted_interface_bte;
wire    [2:0] main_basesoc_socbushandler_interface0_adapted_interface_cti;
wire          main_basesoc_socbushandler_interface0_adapted_interface_cyc;
reg    [31:0] main_basesoc_socbushandler_interface0_adapted_interface_dat_r = 32'd0;
wire   [31:0] main_basesoc_socbushandler_interface0_adapted_interface_dat_w;
reg           main_basesoc_socbushandler_interface0_adapted_interface_err = 1'd0;
wire    [3:0] main_basesoc_socbushandler_interface0_adapted_interface_sel;
wire          main_basesoc_socbushandler_interface0_adapted_interface_stb;
wire          main_basesoc_socbushandler_interface0_adapted_interface_we;
reg           main_basesoc_socbushandler_interface1_adapted_interface_ack = 1'd0;
reg    [31:0] main_basesoc_socbushandler_interface1_adapted_interface_adr = 32'd0;
wire    [1:0] main_basesoc_socbushandler_interface1_adapted_interface_bte;
wire    [2:0] main_basesoc_socbushandler_interface1_adapted_interface_cti;
wire          main_basesoc_socbushandler_interface1_adapted_interface_cyc;
reg    [31:0] main_basesoc_socbushandler_interface1_adapted_interface_dat_r = 32'd0;
wire   [31:0] main_basesoc_socbushandler_interface1_adapted_interface_dat_w;
reg           main_basesoc_socbushandler_interface1_adapted_interface_err = 1'd0;
wire    [3:0] main_basesoc_socbushandler_interface1_adapted_interface_sel;
wire          main_basesoc_socbushandler_interface1_adapted_interface_stb;
wire          main_basesoc_socbushandler_interface1_adapted_interface_we;
reg           main_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 = 1'd0;
reg           main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 = 1'd0;
wire          main_basesoc_socbushandler_pipe_valid_sink_first;
wire          main_basesoc_socbushandler_pipe_valid_sink_last;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] main_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] main_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] main_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          main_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] main_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] main_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          main_basesoc_socbushandler_pipe_valid_sink_ready;
wire          main_basesoc_socbushandler_pipe_valid_sink_valid;
reg           main_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          main_basesoc_socbushandler_pipe_valid_source_ready;
reg           main_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           main_basesoc_socbushandler_r_first = 1'd0;
reg           main_basesoc_socbushandler_r_last = 1'd0;
reg           main_basesoc_socbushandler_r_param_dest = 1'd0;
reg           main_basesoc_socbushandler_r_param_id = 1'd0;
reg           main_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          main_basesoc_socbushandler_r_ready;
reg           main_basesoc_socbushandler_r_valid = 1'd0;
wire          main_basesoc_socbushandler_sink_sink_first;
wire          main_basesoc_socbushandler_sink_sink_last;
wire          main_basesoc_socbushandler_sink_sink_param_dest;
wire          main_basesoc_socbushandler_sink_sink_param_id;
wire          main_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] main_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] main_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] main_basesoc_socbushandler_sink_sink_payload_len;
wire          main_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] main_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] main_basesoc_socbushandler_sink_sink_payload_size;
wire          main_basesoc_socbushandler_sink_sink_ready;
wire          main_basesoc_socbushandler_sink_sink_valid;
wire          main_basesoc_socbushandler_source_source_first;
wire          main_basesoc_socbushandler_source_source_last;
wire          main_basesoc_socbushandler_source_source_param_dest;
wire          main_basesoc_socbushandler_source_source_param_id;
wire          main_basesoc_socbushandler_source_source_param_user;
wire   [31:0] main_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] main_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] main_basesoc_socbushandler_source_source_payload_len;
wire          main_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] main_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] main_basesoc_socbushandler_source_source_payload_size;
reg           main_basesoc_socbushandler_source_source_ready = 1'd0;
wire          main_basesoc_socbushandler_source_source_valid;
wire          main_basesoc_socbushandler_w_first;
wire          main_basesoc_socbushandler_w_last;
wire          main_basesoc_socbushandler_w_param_dest;
wire          main_basesoc_socbushandler_w_param_id;
wire          main_basesoc_socbushandler_w_param_user;
wire   [31:0] main_basesoc_socbushandler_w_payload_data;
wire    [3:0] main_basesoc_socbushandler_w_payload_strb;
reg           main_basesoc_socbushandler_w_ready = 1'd0;
wire          main_basesoc_socbushandler_w_valid;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi0_addr;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_ar_ready;
reg           main_basesoc_socbushandler_wishbone2axi0_ar_valid = 1'd0;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_aw_ready;
reg           main_basesoc_socbushandler_wishbone2axi0_aw_valid = 1'd0;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi0_b_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi0_b_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_b_valid;
reg           main_basesoc_socbushandler_wishbone2axi0_cmd_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_data_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 = 1'd0;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi0_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi0_r_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi0_r_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_r_valid;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi0_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_socbushandler_wishbone2axi0_w_payload_strb = 4'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_w_ready;
reg           main_basesoc_socbushandler_wishbone2axi0_w_valid = 1'd0;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi1_addr;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_ar_ready;
reg           main_basesoc_socbushandler_wishbone2axi1_ar_valid = 1'd0;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_aw_ready;
reg           main_basesoc_socbushandler_wishbone2axi1_aw_valid = 1'd0;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi1_b_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi1_b_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_b_valid;
reg           main_basesoc_socbushandler_wishbone2axi1_cmd_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_data_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 = 1'd0;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi1_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi1_r_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi1_r_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_r_valid;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi1_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_socbushandler_wishbone2axi1_w_payload_strb = 4'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_w_ready;
reg           main_basesoc_socbushandler_wishbone2axi1_w_valid = 1'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
reg           main_basesoc_timer_pending_status = 1'd0;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
reg           main_basesoc_timer_status_status = 1'd0;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
reg    [31:0] main_basesoc_vexriscv = 32'd0;
reg     [5:0] main_chaser = 6'd0;
reg    [21:0] main_count = 22'd4166666;
wire          main_crg_clkin;
wire          main_crg_clkout;
wire          main_crg_locked;
reg    [15:0] main_crg_por_count = 16'd65535;
wire          main_crg_por_done;
wire          main_crg_reset;
reg           main_crg_rst = 1'd0;
wire          main_done;
reg     [5:0] main_leds = 6'd0;
reg           main_mode = 1'd0;
reg           main_re = 1'd0;
reg     [5:0] main_storage = 6'd0;
wire          main_wait;
wire          por_clk;
reg           por_rst = 1'd0;
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
always @(*) begin
    main_crg_rst <= 1'd0;
    if (main_basesoc_soc_rst) begin
        main_crg_rst <= 1'd1;
    end
end
assign main_basesoc_bus_error = builder_error;
always @(*) begin
    main_basesoc_interrupt <= 32'd0;
    main_basesoc_interrupt[1] <= main_basesoc_timer_irq;
    main_basesoc_interrupt[0] <= main_basesoc_uart_irq;
end
assign por_clk = clk50;
assign main_crg_por_done = (main_crg_por_count == 1'd0);
assign main_crg_reset = ((~main_crg_por_done) | rst);
assign main_crg_clkin = clk50;
assign sys_clk = main_crg_clkout;
assign main_basesoc_socbushandler_interface0_adapted_interface_dat_w = main_basesoc_ibus_dat_w;
assign main_basesoc_ibus_dat_r = main_basesoc_socbushandler_interface0_adapted_interface_dat_r;
assign main_basesoc_socbushandler_interface0_adapted_interface_sel = main_basesoc_ibus_sel;
assign main_basesoc_socbushandler_interface0_adapted_interface_cyc = main_basesoc_ibus_cyc;
assign main_basesoc_socbushandler_interface0_adapted_interface_stb = main_basesoc_ibus_stb;
assign main_basesoc_ibus_ack = main_basesoc_socbushandler_interface0_adapted_interface_ack;
assign main_basesoc_socbushandler_interface0_adapted_interface_we = main_basesoc_ibus_we;
assign main_basesoc_socbushandler_interface0_adapted_interface_cti = main_basesoc_ibus_cti;
assign main_basesoc_socbushandler_interface0_adapted_interface_bte = main_basesoc_ibus_bte;
assign main_basesoc_ibus_err = main_basesoc_socbushandler_interface0_adapted_interface_err;
always @(*) begin
    main_basesoc_socbushandler_interface0_adapted_interface_adr <= 32'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_adr[31:2] <= main_basesoc_ibus_adr;
end
assign main_basesoc_socbushandler_interface1_adapted_interface_dat_w = main_basesoc_dbus_dat_w;
assign main_basesoc_dbus_dat_r = main_basesoc_socbushandler_interface1_adapted_interface_dat_r;
assign main_basesoc_socbushandler_interface1_adapted_interface_sel = main_basesoc_dbus_sel;
assign main_basesoc_socbushandler_interface1_adapted_interface_cyc = main_basesoc_dbus_cyc;
assign main_basesoc_socbushandler_interface1_adapted_interface_stb = main_basesoc_dbus_stb;
assign main_basesoc_dbus_ack = main_basesoc_socbushandler_interface1_adapted_interface_ack;
assign main_basesoc_socbushandler_interface1_adapted_interface_we = main_basesoc_dbus_we;
assign main_basesoc_socbushandler_interface1_adapted_interface_cti = main_basesoc_dbus_cti;
assign main_basesoc_socbushandler_interface1_adapted_interface_bte = main_basesoc_dbus_bte;
assign main_basesoc_dbus_err = main_basesoc_socbushandler_interface1_adapted_interface_err;
always @(*) begin
    main_basesoc_socbushandler_interface1_adapted_interface_adr <= 32'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_adr[31:2] <= main_basesoc_dbus_adr;
end
assign main_basesoc_socbushandler_wishbone2axi0_addr = (main_basesoc_socbushandler_interface0_adapted_interface_adr - 1'd0);
always @(*) begin
    builder_wishbone2axi0_next_state <= 2'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_dat_r <= 32'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_err <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi0_ar_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi0_aw_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_b_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_r_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_w_payload_data <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi0_w_payload_strb <= 4'd0;
    main_basesoc_socbushandler_wishbone2axi0_w_valid <= 1'd0;
    builder_wishbone2axi0_next_state <= builder_wishbone2axi0_state;
    case (builder_wishbone2axi0_state)
        1'd1: begin
            main_basesoc_socbushandler_wishbone2axi0_aw_valid <= (~main_basesoc_socbushandler_wishbone2axi0_cmd_done);
            main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi0_addr;
            if ((main_basesoc_socbushandler_wishbone2axi0_aw_valid & main_basesoc_socbushandler_wishbone2axi0_aw_ready)) begin
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi0_w_valid <= (~main_basesoc_socbushandler_wishbone2axi0_data_done);
            main_basesoc_socbushandler_wishbone2axi0_w_payload_data <= main_basesoc_socbushandler_interface0_adapted_interface_dat_w;
            main_basesoc_socbushandler_wishbone2axi0_w_payload_strb <= main_basesoc_socbushandler_interface0_adapted_interface_sel;
            if ((main_basesoc_socbushandler_wishbone2axi0_w_valid & main_basesoc_socbushandler_wishbone2axi0_w_ready)) begin
                main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi0_b_ready <= (main_basesoc_socbushandler_wishbone2axi0_cmd_done & main_basesoc_socbushandler_wishbone2axi0_data_done);
            if ((main_basesoc_socbushandler_wishbone2axi0_b_valid & main_basesoc_socbushandler_wishbone2axi0_b_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi0_b_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi0_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi0_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_basesoc_socbushandler_wishbone2axi0_ar_valid <= (~main_basesoc_socbushandler_wishbone2axi0_cmd_done);
            main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi0_addr;
            if ((main_basesoc_socbushandler_wishbone2axi0_ar_valid & main_basesoc_socbushandler_wishbone2axi0_ar_ready)) begin
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi0_r_ready <= main_basesoc_socbushandler_wishbone2axi0_cmd_done;
            if ((main_basesoc_socbushandler_wishbone2axi0_r_valid & main_basesoc_socbushandler_wishbone2axi0_r_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi0_r_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface0_adapted_interface_dat_r <= main_basesoc_socbushandler_wishbone2axi0_r_payload_data;
                    main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi0_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi0_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd1;
            main_basesoc_socbushandler_interface0_adapted_interface_err <= 1'd1;
            builder_wishbone2axi0_next_state <= 1'd0;
        end
        default: begin
            main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd1;
            if ((main_basesoc_socbushandler_interface0_adapted_interface_stb & main_basesoc_socbushandler_interface0_adapted_interface_cyc)) begin
                if (main_basesoc_socbushandler_interface0_adapted_interface_we) begin
                    builder_wishbone2axi0_next_state <= 1'd1;
                end else begin
                    builder_wishbone2axi0_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_basesoc_socbushandler_axiinterface0_aw_valid = main_basesoc_socbushandler_wishbone2axi0_aw_valid;
assign main_basesoc_socbushandler_wishbone2axi0_aw_ready = main_basesoc_socbushandler_axiinterface0_aw_ready;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_addr = main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_param_id = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_w_valid = main_basesoc_socbushandler_wishbone2axi0_w_valid;
assign main_basesoc_socbushandler_wishbone2axi0_w_ready = main_basesoc_socbushandler_axiinterface0_w_ready;
assign main_basesoc_socbushandler_axiinterface0_w_payload_data = main_basesoc_socbushandler_wishbone2axi0_w_payload_data;
assign main_basesoc_socbushandler_axiinterface0_w_payload_strb = main_basesoc_socbushandler_wishbone2axi0_w_payload_strb;
assign main_basesoc_socbushandler_axiinterface0_w_last = 1'd1;
assign main_basesoc_socbushandler_wishbone2axi0_b_valid = main_basesoc_socbushandler_axiinterface0_b_valid;
assign main_basesoc_socbushandler_wishbone2axi0_b_payload_resp = main_basesoc_socbushandler_axiinterface0_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface0_b_ready = main_basesoc_socbushandler_wishbone2axi0_b_ready;
assign main_basesoc_socbushandler_axiinterface0_ar_valid = main_basesoc_socbushandler_wishbone2axi0_ar_valid;
assign main_basesoc_socbushandler_wishbone2axi0_ar_ready = main_basesoc_socbushandler_axiinterface0_ar_ready;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_addr = main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_param_id = 1'd0;
assign main_basesoc_socbushandler_wishbone2axi0_r_valid = main_basesoc_socbushandler_axiinterface0_r_valid;
assign main_basesoc_socbushandler_wishbone2axi0_r_payload_resp = main_basesoc_socbushandler_axiinterface0_r_payload_resp;
assign main_basesoc_socbushandler_wishbone2axi0_r_payload_data = main_basesoc_socbushandler_axiinterface0_r_payload_data;
assign main_basesoc_socbushandler_axiinterface0_r_ready = main_basesoc_socbushandler_wishbone2axi0_r_ready;
assign main_basesoc_socbushandler_wishbone2axi1_addr = (main_basesoc_socbushandler_interface1_adapted_interface_adr - 1'd0);
always @(*) begin
    builder_wishbone2axi1_next_state <= 2'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_dat_r <= 32'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_err <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi1_ar_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi1_aw_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_b_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_r_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_w_payload_data <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi1_w_payload_strb <= 4'd0;
    main_basesoc_socbushandler_wishbone2axi1_w_valid <= 1'd0;
    builder_wishbone2axi1_next_state <= builder_wishbone2axi1_state;
    case (builder_wishbone2axi1_state)
        1'd1: begin
            main_basesoc_socbushandler_wishbone2axi1_aw_valid <= (~main_basesoc_socbushandler_wishbone2axi1_cmd_done);
            main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi1_addr;
            if ((main_basesoc_socbushandler_wishbone2axi1_aw_valid & main_basesoc_socbushandler_wishbone2axi1_aw_ready)) begin
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi1_w_valid <= (~main_basesoc_socbushandler_wishbone2axi1_data_done);
            main_basesoc_socbushandler_wishbone2axi1_w_payload_data <= main_basesoc_socbushandler_interface1_adapted_interface_dat_w;
            main_basesoc_socbushandler_wishbone2axi1_w_payload_strb <= main_basesoc_socbushandler_interface1_adapted_interface_sel;
            if ((main_basesoc_socbushandler_wishbone2axi1_w_valid & main_basesoc_socbushandler_wishbone2axi1_w_ready)) begin
                main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi1_b_ready <= (main_basesoc_socbushandler_wishbone2axi1_cmd_done & main_basesoc_socbushandler_wishbone2axi1_data_done);
            if ((main_basesoc_socbushandler_wishbone2axi1_b_valid & main_basesoc_socbushandler_wishbone2axi1_b_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi1_b_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi1_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi1_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_basesoc_socbushandler_wishbone2axi1_ar_valid <= (~main_basesoc_socbushandler_wishbone2axi1_cmd_done);
            main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi1_addr;
            if ((main_basesoc_socbushandler_wishbone2axi1_ar_valid & main_basesoc_socbushandler_wishbone2axi1_ar_ready)) begin
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi1_r_ready <= main_basesoc_socbushandler_wishbone2axi1_cmd_done;
            if ((main_basesoc_socbushandler_wishbone2axi1_r_valid & main_basesoc_socbushandler_wishbone2axi1_r_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi1_r_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface1_adapted_interface_dat_r <= main_basesoc_socbushandler_wishbone2axi1_r_payload_data;
                    main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi1_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi1_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd1;
            main_basesoc_socbushandler_interface1_adapted_interface_err <= 1'd1;
            builder_wishbone2axi1_next_state <= 1'd0;
        end
        default: begin
            main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd1;
            if ((main_basesoc_socbushandler_interface1_adapted_interface_stb & main_basesoc_socbushandler_interface1_adapted_interface_cyc)) begin
                if (main_basesoc_socbushandler_interface1_adapted_interface_we) begin
                    builder_wishbone2axi1_next_state <= 1'd1;
                end else begin
                    builder_wishbone2axi1_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_basesoc_socbushandler_axiinterface1_aw_valid = main_basesoc_socbushandler_wishbone2axi1_aw_valid;
assign main_basesoc_socbushandler_wishbone2axi1_aw_ready = main_basesoc_socbushandler_axiinterface1_aw_ready;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_addr = main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_param_id = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_w_valid = main_basesoc_socbushandler_wishbone2axi1_w_valid;
assign main_basesoc_socbushandler_wishbone2axi1_w_ready = main_basesoc_socbushandler_axiinterface1_w_ready;
assign main_basesoc_socbushandler_axiinterface1_w_payload_data = main_basesoc_socbushandler_wishbone2axi1_w_payload_data;
assign main_basesoc_socbushandler_axiinterface1_w_payload_strb = main_basesoc_socbushandler_wishbone2axi1_w_payload_strb;
assign main_basesoc_socbushandler_axiinterface1_w_last = 1'd1;
assign main_basesoc_socbushandler_wishbone2axi1_b_valid = main_basesoc_socbushandler_axiinterface1_b_valid;
assign main_basesoc_socbushandler_wishbone2axi1_b_payload_resp = main_basesoc_socbushandler_axiinterface1_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface1_b_ready = main_basesoc_socbushandler_wishbone2axi1_b_ready;
assign main_basesoc_socbushandler_axiinterface1_ar_valid = main_basesoc_socbushandler_wishbone2axi1_ar_valid;
assign main_basesoc_socbushandler_wishbone2axi1_ar_ready = main_basesoc_socbushandler_axiinterface1_ar_ready;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_addr = main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_param_id = 1'd0;
assign main_basesoc_socbushandler_wishbone2axi1_r_valid = main_basesoc_socbushandler_axiinterface1_r_valid;
assign main_basesoc_socbushandler_wishbone2axi1_r_payload_resp = main_basesoc_socbushandler_axiinterface1_r_payload_resp;
assign main_basesoc_socbushandler_wishbone2axi1_r_payload_data = main_basesoc_socbushandler_axiinterface1_r_payload_data;
assign main_basesoc_socbushandler_axiinterface1_r_ready = main_basesoc_socbushandler_wishbone2axi1_r_ready;
assign main_basesoc_basesoc_socbushandler_sink_sink_valid = main_basesoc_basesoc_socbushandler_ax_burst_valid;
assign main_basesoc_basesoc_socbushandler_ax_burst_ready = main_basesoc_basesoc_socbushandler_sink_sink_ready;
assign main_basesoc_basesoc_socbushandler_sink_sink_first = main_basesoc_basesoc_socbushandler_ax_burst_first;
assign main_basesoc_basesoc_socbushandler_sink_sink_last = main_basesoc_basesoc_socbushandler_ax_burst_last;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_addr = main_basesoc_basesoc_socbushandler_ax_burst_payload_addr;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_burst = main_basesoc_basesoc_socbushandler_ax_burst_payload_burst;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_len = main_basesoc_basesoc_socbushandler_ax_burst_payload_len;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_size = main_basesoc_basesoc_socbushandler_ax_burst_payload_size;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_lock = main_basesoc_basesoc_socbushandler_ax_burst_payload_lock;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_prot = main_basesoc_basesoc_socbushandler_ax_burst_payload_prot;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_cache = main_basesoc_basesoc_socbushandler_ax_burst_payload_cache;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_qos = main_basesoc_basesoc_socbushandler_ax_burst_payload_qos;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_region = main_basesoc_basesoc_socbushandler_ax_burst_payload_region;
assign main_basesoc_basesoc_socbushandler_sink_sink_param_id = main_basesoc_basesoc_socbushandler_ax_burst_param_id;
assign main_basesoc_basesoc_socbushandler_sink_sink_param_dest = main_basesoc_basesoc_socbushandler_ax_burst_param_dest;
assign main_basesoc_basesoc_socbushandler_sink_sink_param_user = main_basesoc_basesoc_socbushandler_ax_burst_param_user;
assign main_basesoc_basesoc_ram_bus_b_ready = 1'd1;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_ready = ((~main_basesoc_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_basesoc_socbushandler_pipe_valid_source_ready);
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_valid = main_basesoc_basesoc_socbushandler_sink_sink_valid;
assign main_basesoc_basesoc_socbushandler_sink_sink_ready = main_basesoc_basesoc_socbushandler_pipe_valid_sink_ready;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_first = main_basesoc_basesoc_socbushandler_sink_sink_first;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_last = main_basesoc_basesoc_socbushandler_sink_sink_last;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr = main_basesoc_basesoc_socbushandler_sink_sink_payload_addr;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst = main_basesoc_basesoc_socbushandler_sink_sink_payload_burst;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len = main_basesoc_basesoc_socbushandler_sink_sink_payload_len;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size = main_basesoc_basesoc_socbushandler_sink_sink_payload_size;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock = main_basesoc_basesoc_socbushandler_sink_sink_payload_lock;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot = main_basesoc_basesoc_socbushandler_sink_sink_payload_prot;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache = main_basesoc_basesoc_socbushandler_sink_sink_payload_cache;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos = main_basesoc_basesoc_socbushandler_sink_sink_payload_qos;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region = main_basesoc_basesoc_socbushandler_sink_sink_payload_region;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_id = main_basesoc_basesoc_socbushandler_sink_sink_param_id;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest = main_basesoc_basesoc_socbushandler_sink_sink_param_dest;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_user = main_basesoc_basesoc_socbushandler_sink_sink_param_user;
assign main_basesoc_basesoc_socbushandler_source_source_valid = main_basesoc_basesoc_socbushandler_pipe_valid_source_valid;
assign main_basesoc_basesoc_socbushandler_pipe_valid_source_ready = main_basesoc_basesoc_socbushandler_source_source_ready;
assign main_basesoc_basesoc_socbushandler_source_source_first = main_basesoc_basesoc_socbushandler_pipe_valid_source_first;
assign main_basesoc_basesoc_socbushandler_source_source_last = main_basesoc_basesoc_socbushandler_pipe_valid_source_last;
assign main_basesoc_basesoc_socbushandler_source_source_payload_addr = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign main_basesoc_basesoc_socbushandler_source_source_payload_burst = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign main_basesoc_basesoc_socbushandler_source_source_payload_len = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len;
assign main_basesoc_basesoc_socbushandler_source_source_payload_size = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size;
assign main_basesoc_basesoc_socbushandler_source_source_payload_lock = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign main_basesoc_basesoc_socbushandler_source_source_payload_prot = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign main_basesoc_basesoc_socbushandler_source_source_payload_cache = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign main_basesoc_basesoc_socbushandler_source_source_payload_qos = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign main_basesoc_basesoc_socbushandler_source_source_payload_region = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region;
assign main_basesoc_basesoc_socbushandler_source_source_param_id = main_basesoc_basesoc_socbushandler_pipe_valid_source_param_id;
assign main_basesoc_basesoc_socbushandler_source_source_param_dest = main_basesoc_basesoc_socbushandler_pipe_valid_source_param_dest;
assign main_basesoc_basesoc_socbushandler_source_source_param_user = main_basesoc_basesoc_socbushandler_pipe_valid_source_param_user;
assign main_basesoc_basesoc_socbushandler_beat_size = (1'd1 <<< main_basesoc_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_basesoc_socbushandler_beat_wrap = (main_basesoc_basesoc_socbushandler_source_source_payload_len <<< main_basesoc_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_basesoc_socbushandler_ax_beat_valid = (main_basesoc_basesoc_socbushandler_source_source_valid | (~main_basesoc_basesoc_socbushandler_ax_beat_first));
assign main_basesoc_basesoc_socbushandler_ax_beat_first = (main_basesoc_basesoc_socbushandler_beat_count == 1'd0);
assign main_basesoc_basesoc_socbushandler_ax_beat_last = (main_basesoc_basesoc_socbushandler_beat_count == main_basesoc_basesoc_socbushandler_source_source_payload_len);
assign main_basesoc_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, main_basesoc_basesoc_socbushandler_source_source_payload_addr}) + main_basesoc_basesoc_socbushandler_beat_offset);
assign main_basesoc_basesoc_socbushandler_ax_beat_param_id = main_basesoc_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    main_basesoc_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (main_basesoc_basesoc_socbushandler_ax_beat_ready) begin
        if (main_basesoc_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite0_next_state <= 2'd0;
    main_basesoc_basesoc_ram_bus_ar_payload_addr <= 32'd0;
    main_basesoc_basesoc_ram_bus_ar_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_aw_payload_addr <= 32'd0;
    main_basesoc_basesoc_ram_bus_aw_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_r_ready <= 1'd0;
    main_basesoc_basesoc_ram_bus_w_payload_data <= 32'd0;
    main_basesoc_basesoc_ram_bus_w_payload_strb <= 4'd0;
    main_basesoc_basesoc_ram_bus_w_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_ar_ready <= 1'd0;
    main_basesoc_basesoc_socbushandler_aw_ready <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_first <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_last <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_b_param_id <= 1'd0;
    main_basesoc_basesoc_socbushandler_b_payload_resp <= 2'd0;
    main_basesoc_basesoc_socbushandler_b_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd0;
    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd0;
    main_basesoc_basesoc_socbushandler_r_last <= 1'd0;
    main_basesoc_basesoc_socbushandler_r_param_id <= 1'd0;
    main_basesoc_basesoc_socbushandler_r_payload_data <= 32'd0;
    main_basesoc_basesoc_socbushandler_r_payload_resp <= 2'd0;
    main_basesoc_basesoc_socbushandler_r_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite0_next_state <= builder_axi2axilite0_state;
    case (builder_axi2axilite0_state)
        1'd1: begin
            main_basesoc_basesoc_ram_bus_ar_valid <= (main_basesoc_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_basesoc_socbushandler_cmd_done));
            main_basesoc_basesoc_ram_bus_ar_payload_addr <= main_basesoc_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_basesoc_ram_bus_ar_ready & (~main_basesoc_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_basesoc_socbushandler_ax_beat_valid & main_basesoc_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_basesoc_ram_bus_ar_ready) begin
                    main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_basesoc_socbushandler_r_valid <= main_basesoc_basesoc_ram_bus_r_valid;
            main_basesoc_basesoc_socbushandler_r_last <= main_basesoc_basesoc_socbushandler_cmd_done;
            main_basesoc_basesoc_socbushandler_r_payload_resp <= 1'd0;
            main_basesoc_basesoc_socbushandler_r_param_id <= main_basesoc_basesoc_socbushandler_ax_beat_param_id;
            main_basesoc_basesoc_socbushandler_r_payload_data <= main_basesoc_basesoc_ram_bus_r_payload_data;
            main_basesoc_basesoc_ram_bus_r_ready <= main_basesoc_basesoc_socbushandler_r_ready;
            if (((main_basesoc_basesoc_socbushandler_r_valid & main_basesoc_basesoc_socbushandler_r_last) & main_basesoc_basesoc_socbushandler_r_ready)) begin
                main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite0_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_basesoc_basesoc_ram_bus_aw_valid <= (main_basesoc_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_basesoc_socbushandler_cmd_done));
            main_basesoc_basesoc_ram_bus_aw_payload_addr <= main_basesoc_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_basesoc_ram_bus_aw_ready & (~main_basesoc_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_basesoc_socbushandler_ax_beat_valid & main_basesoc_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_basesoc_ram_bus_aw_ready) begin
                    main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_basesoc_ram_bus_w_valid <= main_basesoc_basesoc_socbushandler_w_valid;
            main_basesoc_basesoc_ram_bus_w_payload_data <= main_basesoc_basesoc_socbushandler_w_payload_data;
            main_basesoc_basesoc_ram_bus_w_payload_strb <= main_basesoc_basesoc_socbushandler_w_payload_strb;
            main_basesoc_basesoc_socbushandler_w_ready <= main_basesoc_basesoc_ram_bus_w_ready;
            if (((main_basesoc_basesoc_socbushandler_w_valid & main_basesoc_basesoc_socbushandler_w_last) & main_basesoc_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite0_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_basesoc_socbushandler_b_valid <= 1'd1;
            main_basesoc_basesoc_socbushandler_b_payload_resp <= 1'd0;
            main_basesoc_basesoc_socbushandler_b_param_id <= main_basesoc_basesoc_socbushandler_ax_beat_param_id;
            if (main_basesoc_basesoc_socbushandler_b_ready) begin
                main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite0_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
            main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
            if ((main_basesoc_basesoc_socbushandler_ar_valid & main_basesoc_basesoc_socbushandler_aw_valid)) begin
                if (main_basesoc_basesoc_socbushandler_last_ar_aw_n) begin
                    main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_aw_valid;
                    main_basesoc_basesoc_socbushandler_aw_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_aw_first;
                    main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_aw_last;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_aw_payload_addr;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_aw_payload_burst;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_aw_payload_len;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_aw_payload_size;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_aw_payload_lock;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_aw_payload_prot;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_aw_payload_cache;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_aw_payload_qos;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_aw_payload_region;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_aw_param_id;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_aw_param_dest;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_aw_param_user;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 2'd2;
                end else begin
                    main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_ar_valid;
                    main_basesoc_basesoc_socbushandler_ar_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_ar_first;
                    main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_ar_last;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_ar_param_id;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_ar_param_user;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_basesoc_socbushandler_ar_valid) begin
                    main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_ar_valid;
                    main_basesoc_basesoc_socbushandler_ar_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_ar_first;
                    main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_ar_last;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_ar_param_id;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_ar_param_user;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 1'd1;
                end else begin
                    if (main_basesoc_basesoc_socbushandler_aw_valid) begin
                        main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_aw_valid;
                        main_basesoc_basesoc_socbushandler_aw_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                        main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_aw_first;
                        main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_aw_last;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_aw_payload_addr;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_aw_payload_burst;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_aw_payload_len;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_aw_payload_size;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_aw_payload_lock;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_aw_payload_prot;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_aw_payload_cache;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_aw_payload_qos;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_aw_payload_region;
                        main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_aw_param_id;
                        main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_aw_param_dest;
                        main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_aw_param_user;
                        main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                        main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                        builder_axi2axilite0_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_socbushandler_sink_sink_valid = main_basesoc_socbushandler_ax_burst_valid;
assign main_basesoc_socbushandler_ax_burst_ready = main_basesoc_socbushandler_sink_sink_ready;
assign main_basesoc_socbushandler_sink_sink_first = main_basesoc_socbushandler_ax_burst_first;
assign main_basesoc_socbushandler_sink_sink_last = main_basesoc_socbushandler_ax_burst_last;
assign main_basesoc_socbushandler_sink_sink_payload_addr = main_basesoc_socbushandler_ax_burst_payload_addr;
assign main_basesoc_socbushandler_sink_sink_payload_burst = main_basesoc_socbushandler_ax_burst_payload_burst;
assign main_basesoc_socbushandler_sink_sink_payload_len = main_basesoc_socbushandler_ax_burst_payload_len;
assign main_basesoc_socbushandler_sink_sink_payload_size = main_basesoc_socbushandler_ax_burst_payload_size;
assign main_basesoc_socbushandler_sink_sink_payload_lock = main_basesoc_socbushandler_ax_burst_payload_lock;
assign main_basesoc_socbushandler_sink_sink_payload_prot = main_basesoc_socbushandler_ax_burst_payload_prot;
assign main_basesoc_socbushandler_sink_sink_payload_cache = main_basesoc_socbushandler_ax_burst_payload_cache;
assign main_basesoc_socbushandler_sink_sink_payload_qos = main_basesoc_socbushandler_ax_burst_payload_qos;
assign main_basesoc_socbushandler_sink_sink_payload_region = main_basesoc_socbushandler_ax_burst_payload_region;
assign main_basesoc_socbushandler_sink_sink_param_id = main_basesoc_socbushandler_ax_burst_param_id;
assign main_basesoc_socbushandler_sink_sink_param_dest = main_basesoc_socbushandler_ax_burst_param_dest;
assign main_basesoc_socbushandler_sink_sink_param_user = main_basesoc_socbushandler_ax_burst_param_user;
assign main_basesoc_ram_bus_b_ready = 1'd1;
assign main_basesoc_socbushandler_pipe_valid_sink_ready = ((~main_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_socbushandler_pipe_valid_source_ready);
assign main_basesoc_socbushandler_pipe_valid_sink_valid = main_basesoc_socbushandler_sink_sink_valid;
assign main_basesoc_socbushandler_sink_sink_ready = main_basesoc_socbushandler_pipe_valid_sink_ready;
assign main_basesoc_socbushandler_pipe_valid_sink_first = main_basesoc_socbushandler_sink_sink_first;
assign main_basesoc_socbushandler_pipe_valid_sink_last = main_basesoc_socbushandler_sink_sink_last;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_addr = main_basesoc_socbushandler_sink_sink_payload_addr;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_burst = main_basesoc_socbushandler_sink_sink_payload_burst;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_len = main_basesoc_socbushandler_sink_sink_payload_len;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_size = main_basesoc_socbushandler_sink_sink_payload_size;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_lock = main_basesoc_socbushandler_sink_sink_payload_lock;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_prot = main_basesoc_socbushandler_sink_sink_payload_prot;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_cache = main_basesoc_socbushandler_sink_sink_payload_cache;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_qos = main_basesoc_socbushandler_sink_sink_payload_qos;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_region = main_basesoc_socbushandler_sink_sink_payload_region;
assign main_basesoc_socbushandler_pipe_valid_sink_param_id = main_basesoc_socbushandler_sink_sink_param_id;
assign main_basesoc_socbushandler_pipe_valid_sink_param_dest = main_basesoc_socbushandler_sink_sink_param_dest;
assign main_basesoc_socbushandler_pipe_valid_sink_param_user = main_basesoc_socbushandler_sink_sink_param_user;
assign main_basesoc_socbushandler_source_source_valid = main_basesoc_socbushandler_pipe_valid_source_valid;
assign main_basesoc_socbushandler_pipe_valid_source_ready = main_basesoc_socbushandler_source_source_ready;
assign main_basesoc_socbushandler_source_source_first = main_basesoc_socbushandler_pipe_valid_source_first;
assign main_basesoc_socbushandler_source_source_last = main_basesoc_socbushandler_pipe_valid_source_last;
assign main_basesoc_socbushandler_source_source_payload_addr = main_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign main_basesoc_socbushandler_source_source_payload_burst = main_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign main_basesoc_socbushandler_source_source_payload_len = main_basesoc_socbushandler_pipe_valid_source_payload_len;
assign main_basesoc_socbushandler_source_source_payload_size = main_basesoc_socbushandler_pipe_valid_source_payload_size;
assign main_basesoc_socbushandler_source_source_payload_lock = main_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign main_basesoc_socbushandler_source_source_payload_prot = main_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign main_basesoc_socbushandler_source_source_payload_cache = main_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign main_basesoc_socbushandler_source_source_payload_qos = main_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign main_basesoc_socbushandler_source_source_payload_region = main_basesoc_socbushandler_pipe_valid_source_payload_region;
assign main_basesoc_socbushandler_source_source_param_id = main_basesoc_socbushandler_pipe_valid_source_param_id;
assign main_basesoc_socbushandler_source_source_param_dest = main_basesoc_socbushandler_pipe_valid_source_param_dest;
assign main_basesoc_socbushandler_source_source_param_user = main_basesoc_socbushandler_pipe_valid_source_param_user;
assign main_basesoc_socbushandler_beat_size = (1'd1 <<< main_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_socbushandler_beat_wrap = (main_basesoc_socbushandler_source_source_payload_len <<< main_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_socbushandler_ax_beat_valid = (main_basesoc_socbushandler_source_source_valid | (~main_basesoc_socbushandler_ax_beat_first));
assign main_basesoc_socbushandler_ax_beat_first = (main_basesoc_socbushandler_beat_count == 1'd0);
assign main_basesoc_socbushandler_ax_beat_last = (main_basesoc_socbushandler_beat_count == main_basesoc_socbushandler_source_source_payload_len);
assign main_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, main_basesoc_socbushandler_source_source_payload_addr}) + main_basesoc_socbushandler_beat_offset);
assign main_basesoc_socbushandler_ax_beat_param_id = main_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    main_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (main_basesoc_socbushandler_ax_beat_ready) begin
        if (main_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite1_next_state <= 2'd0;
    main_basesoc_ram_bus_ar_payload_addr <= 32'd0;
    main_basesoc_ram_bus_ar_valid <= 1'd0;
    main_basesoc_ram_bus_aw_payload_addr <= 32'd0;
    main_basesoc_ram_bus_aw_valid <= 1'd0;
    main_basesoc_ram_bus_r_ready <= 1'd0;
    main_basesoc_ram_bus_w_payload_data <= 32'd0;
    main_basesoc_ram_bus_w_payload_strb <= 4'd0;
    main_basesoc_ram_bus_w_valid <= 1'd0;
    main_basesoc_socbushandler_ar_ready <= 1'd0;
    main_basesoc_socbushandler_aw_ready <= 1'd0;
    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    main_basesoc_socbushandler_ax_burst_first <= 1'd0;
    main_basesoc_socbushandler_ax_burst_last <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    main_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    main_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    main_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    main_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    main_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    main_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    main_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    main_basesoc_socbushandler_b_param_id <= 1'd0;
    main_basesoc_socbushandler_b_payload_resp <= 2'd0;
    main_basesoc_socbushandler_b_valid <= 1'd0;
    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd0;
    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd0;
    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd0;
    main_basesoc_socbushandler_r_last <= 1'd0;
    main_basesoc_socbushandler_r_param_id <= 1'd0;
    main_basesoc_socbushandler_r_payload_data <= 32'd0;
    main_basesoc_socbushandler_r_payload_resp <= 2'd0;
    main_basesoc_socbushandler_r_valid <= 1'd0;
    main_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite1_next_state <= builder_axi2axilite1_state;
    case (builder_axi2axilite1_state)
        1'd1: begin
            main_basesoc_ram_bus_ar_valid <= (main_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_socbushandler_cmd_done));
            main_basesoc_ram_bus_ar_payload_addr <= main_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_ram_bus_ar_ready & (~main_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_ram_bus_ar_ready) begin
                    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_socbushandler_r_valid <= main_basesoc_ram_bus_r_valid;
            main_basesoc_socbushandler_r_last <= main_basesoc_socbushandler_cmd_done;
            main_basesoc_socbushandler_r_payload_resp <= 1'd0;
            main_basesoc_socbushandler_r_param_id <= main_basesoc_socbushandler_ax_beat_param_id;
            main_basesoc_socbushandler_r_payload_data <= main_basesoc_ram_bus_r_payload_data;
            main_basesoc_ram_bus_r_ready <= main_basesoc_socbushandler_r_ready;
            if (((main_basesoc_socbushandler_r_valid & main_basesoc_socbushandler_r_last) & main_basesoc_socbushandler_r_ready)) begin
                main_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite1_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_basesoc_ram_bus_aw_valid <= (main_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_socbushandler_cmd_done));
            main_basesoc_ram_bus_aw_payload_addr <= main_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_ram_bus_aw_ready & (~main_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_ram_bus_aw_ready) begin
                    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_ram_bus_w_valid <= main_basesoc_socbushandler_w_valid;
            main_basesoc_ram_bus_w_payload_data <= main_basesoc_socbushandler_w_payload_data;
            main_basesoc_ram_bus_w_payload_strb <= main_basesoc_socbushandler_w_payload_strb;
            main_basesoc_socbushandler_w_ready <= main_basesoc_ram_bus_w_ready;
            if (((main_basesoc_socbushandler_w_valid & main_basesoc_socbushandler_w_last) & main_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite1_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_socbushandler_b_valid <= 1'd1;
            main_basesoc_socbushandler_b_payload_resp <= 1'd0;
            main_basesoc_socbushandler_b_param_id <= main_basesoc_socbushandler_ax_beat_param_id;
            if (main_basesoc_socbushandler_b_ready) begin
                main_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite1_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd0;
            main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
            if ((main_basesoc_socbushandler_ar_valid & main_basesoc_socbushandler_aw_valid)) begin
                if (main_basesoc_socbushandler_last_ar_aw_n) begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_aw_valid;
                    main_basesoc_socbushandler_aw_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_aw_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_aw_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_aw_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_aw_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_aw_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_aw_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_aw_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_aw_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_aw_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_aw_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_aw_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_aw_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_aw_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_aw_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 2'd2;
                end else begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_ar_valid;
                    main_basesoc_socbushandler_ar_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_ar_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_ar_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_ar_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_ar_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_socbushandler_ar_valid) begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_ar_valid;
                    main_basesoc_socbushandler_ar_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_ar_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_ar_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_ar_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_ar_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 1'd1;
                end else begin
                    if (main_basesoc_socbushandler_aw_valid) begin
                        main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_aw_valid;
                        main_basesoc_socbushandler_aw_ready <= main_basesoc_socbushandler_ax_burst_ready;
                        main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_aw_first;
                        main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_aw_last;
                        main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_aw_payload_addr;
                        main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_aw_payload_burst;
                        main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_aw_payload_len;
                        main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_aw_payload_size;
                        main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_aw_payload_lock;
                        main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_aw_payload_prot;
                        main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_aw_payload_cache;
                        main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_aw_payload_qos;
                        main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_aw_payload_region;
                        main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_aw_param_id;
                        main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_aw_param_dest;
                        main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_aw_param_user;
                        main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                        main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                        builder_axi2axilite1_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign builder_basesoc_socbushandler_sink_sink_valid = builder_basesoc_socbushandler_ax_burst_valid;
assign builder_basesoc_socbushandler_ax_burst_ready = builder_basesoc_socbushandler_sink_sink_ready;
assign builder_basesoc_socbushandler_sink_sink_first = builder_basesoc_socbushandler_ax_burst_first;
assign builder_basesoc_socbushandler_sink_sink_last = builder_basesoc_socbushandler_ax_burst_last;
assign builder_basesoc_socbushandler_sink_sink_payload_addr = builder_basesoc_socbushandler_ax_burst_payload_addr;
assign builder_basesoc_socbushandler_sink_sink_payload_burst = builder_basesoc_socbushandler_ax_burst_payload_burst;
assign builder_basesoc_socbushandler_sink_sink_payload_len = builder_basesoc_socbushandler_ax_burst_payload_len;
assign builder_basesoc_socbushandler_sink_sink_payload_size = builder_basesoc_socbushandler_ax_burst_payload_size;
assign builder_basesoc_socbushandler_sink_sink_payload_lock = builder_basesoc_socbushandler_ax_burst_payload_lock;
assign builder_basesoc_socbushandler_sink_sink_payload_prot = builder_basesoc_socbushandler_ax_burst_payload_prot;
assign builder_basesoc_socbushandler_sink_sink_payload_cache = builder_basesoc_socbushandler_ax_burst_payload_cache;
assign builder_basesoc_socbushandler_sink_sink_payload_qos = builder_basesoc_socbushandler_ax_burst_payload_qos;
assign builder_basesoc_socbushandler_sink_sink_payload_region = builder_basesoc_socbushandler_ax_burst_payload_region;
assign builder_basesoc_socbushandler_sink_sink_param_id = builder_basesoc_socbushandler_ax_burst_param_id;
assign builder_basesoc_socbushandler_sink_sink_param_dest = builder_basesoc_socbushandler_ax_burst_param_dest;
assign builder_basesoc_socbushandler_sink_sink_param_user = builder_basesoc_socbushandler_ax_burst_param_user;
assign builder_basesoc_axiliteinterface_b_ready = 1'd1;
assign builder_basesoc_socbushandler_pipe_valid_sink_ready = ((~builder_basesoc_socbushandler_pipe_valid_source_valid) | builder_basesoc_socbushandler_pipe_valid_source_ready);
assign builder_basesoc_socbushandler_pipe_valid_sink_valid = builder_basesoc_socbushandler_sink_sink_valid;
assign builder_basesoc_socbushandler_sink_sink_ready = builder_basesoc_socbushandler_pipe_valid_sink_ready;
assign builder_basesoc_socbushandler_pipe_valid_sink_first = builder_basesoc_socbushandler_sink_sink_first;
assign builder_basesoc_socbushandler_pipe_valid_sink_last = builder_basesoc_socbushandler_sink_sink_last;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_addr = builder_basesoc_socbushandler_sink_sink_payload_addr;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_burst = builder_basesoc_socbushandler_sink_sink_payload_burst;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_len = builder_basesoc_socbushandler_sink_sink_payload_len;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_size = builder_basesoc_socbushandler_sink_sink_payload_size;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_lock = builder_basesoc_socbushandler_sink_sink_payload_lock;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_prot = builder_basesoc_socbushandler_sink_sink_payload_prot;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_cache = builder_basesoc_socbushandler_sink_sink_payload_cache;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_qos = builder_basesoc_socbushandler_sink_sink_payload_qos;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_region = builder_basesoc_socbushandler_sink_sink_payload_region;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_id = builder_basesoc_socbushandler_sink_sink_param_id;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_dest = builder_basesoc_socbushandler_sink_sink_param_dest;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_user = builder_basesoc_socbushandler_sink_sink_param_user;
assign builder_basesoc_socbushandler_source_source_valid = builder_basesoc_socbushandler_pipe_valid_source_valid;
assign builder_basesoc_socbushandler_pipe_valid_source_ready = builder_basesoc_socbushandler_source_source_ready;
assign builder_basesoc_socbushandler_source_source_first = builder_basesoc_socbushandler_pipe_valid_source_first;
assign builder_basesoc_socbushandler_source_source_last = builder_basesoc_socbushandler_pipe_valid_source_last;
assign builder_basesoc_socbushandler_source_source_payload_addr = builder_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign builder_basesoc_socbushandler_source_source_payload_burst = builder_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign builder_basesoc_socbushandler_source_source_payload_len = builder_basesoc_socbushandler_pipe_valid_source_payload_len;
assign builder_basesoc_socbushandler_source_source_payload_size = builder_basesoc_socbushandler_pipe_valid_source_payload_size;
assign builder_basesoc_socbushandler_source_source_payload_lock = builder_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign builder_basesoc_socbushandler_source_source_payload_prot = builder_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign builder_basesoc_socbushandler_source_source_payload_cache = builder_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign builder_basesoc_socbushandler_source_source_payload_qos = builder_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign builder_basesoc_socbushandler_source_source_payload_region = builder_basesoc_socbushandler_pipe_valid_source_payload_region;
assign builder_basesoc_socbushandler_source_source_param_id = builder_basesoc_socbushandler_pipe_valid_source_param_id;
assign builder_basesoc_socbushandler_source_source_param_dest = builder_basesoc_socbushandler_pipe_valid_source_param_dest;
assign builder_basesoc_socbushandler_source_source_param_user = builder_basesoc_socbushandler_pipe_valid_source_param_user;
assign builder_basesoc_socbushandler_beat_size = (1'd1 <<< builder_basesoc_socbushandler_source_source_payload_size);
assign builder_basesoc_socbushandler_beat_wrap = (builder_basesoc_socbushandler_source_source_payload_len <<< builder_basesoc_socbushandler_source_source_payload_size);
assign builder_basesoc_socbushandler_ax_beat_valid = (builder_basesoc_socbushandler_source_source_valid | (~builder_basesoc_socbushandler_ax_beat_first));
assign builder_basesoc_socbushandler_ax_beat_first = (builder_basesoc_socbushandler_beat_count == 1'd0);
assign builder_basesoc_socbushandler_ax_beat_last = (builder_basesoc_socbushandler_beat_count == builder_basesoc_socbushandler_source_source_payload_len);
assign builder_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, builder_basesoc_socbushandler_source_source_payload_addr}) + builder_basesoc_socbushandler_beat_offset);
assign builder_basesoc_socbushandler_ax_beat_param_id = builder_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    builder_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (builder_basesoc_socbushandler_ax_beat_ready) begin
        if (builder_basesoc_socbushandler_ax_beat_last) begin
            builder_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite2_next_state <= 2'd0;
    builder_basesoc_axiliteinterface_ar_payload_addr <= 32'd0;
    builder_basesoc_axiliteinterface_ar_valid <= 1'd0;
    builder_basesoc_axiliteinterface_aw_payload_addr <= 32'd0;
    builder_basesoc_axiliteinterface_aw_valid <= 1'd0;
    builder_basesoc_axiliteinterface_r_ready <= 1'd0;
    builder_basesoc_axiliteinterface_w_payload_data <= 32'd0;
    builder_basesoc_axiliteinterface_w_payload_strb <= 4'd0;
    builder_basesoc_axiliteinterface_w_valid <= 1'd0;
    builder_basesoc_socbushandler_ar_ready <= 1'd0;
    builder_basesoc_socbushandler_aw_ready <= 1'd0;
    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_first <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_last <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    builder_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    builder_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    builder_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    builder_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    builder_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    builder_basesoc_socbushandler_b_param_id <= 1'd0;
    builder_basesoc_socbushandler_b_payload_resp <= 2'd0;
    builder_basesoc_socbushandler_b_valid <= 1'd0;
    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd0;
    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd0;
    builder_basesoc_socbushandler_r_last <= 1'd0;
    builder_basesoc_socbushandler_r_param_id <= 1'd0;
    builder_basesoc_socbushandler_r_payload_data <= 32'd0;
    builder_basesoc_socbushandler_r_payload_resp <= 2'd0;
    builder_basesoc_socbushandler_r_valid <= 1'd0;
    builder_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite2_next_state <= builder_axi2axilite2_state;
    case (builder_axi2axilite2_state)
        1'd1: begin
            builder_basesoc_axiliteinterface_ar_valid <= (builder_basesoc_socbushandler_ax_beat_valid & (~builder_basesoc_socbushandler_cmd_done));
            builder_basesoc_axiliteinterface_ar_payload_addr <= builder_basesoc_socbushandler_ax_beat_payload_addr;
            builder_basesoc_socbushandler_ax_beat_ready <= (builder_basesoc_axiliteinterface_ar_ready & (~builder_basesoc_socbushandler_cmd_done));
            if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_last)) begin
                if (builder_basesoc_axiliteinterface_ar_ready) begin
                    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            builder_basesoc_socbushandler_r_valid <= builder_basesoc_axiliteinterface_r_valid;
            builder_basesoc_socbushandler_r_last <= builder_basesoc_socbushandler_cmd_done;
            builder_basesoc_socbushandler_r_payload_resp <= 1'd0;
            builder_basesoc_socbushandler_r_param_id <= builder_basesoc_socbushandler_ax_beat_param_id;
            builder_basesoc_socbushandler_r_payload_data <= builder_basesoc_axiliteinterface_r_payload_data;
            builder_basesoc_axiliteinterface_r_ready <= builder_basesoc_socbushandler_r_ready;
            if (((builder_basesoc_socbushandler_r_valid & builder_basesoc_socbushandler_r_last) & builder_basesoc_socbushandler_r_ready)) begin
                builder_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite2_next_state <= 1'd0;
            end
        end
        2'd2: begin
            builder_basesoc_axiliteinterface_aw_valid <= (builder_basesoc_socbushandler_ax_beat_valid & (~builder_basesoc_socbushandler_cmd_done));
            builder_basesoc_axiliteinterface_aw_payload_addr <= builder_basesoc_socbushandler_ax_beat_payload_addr;
            builder_basesoc_socbushandler_ax_beat_ready <= (builder_basesoc_axiliteinterface_aw_ready & (~builder_basesoc_socbushandler_cmd_done));
            if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_last)) begin
                if (builder_basesoc_axiliteinterface_aw_ready) begin
                    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            builder_basesoc_axiliteinterface_w_valid <= builder_basesoc_socbushandler_w_valid;
            builder_basesoc_axiliteinterface_w_payload_data <= builder_basesoc_socbushandler_w_payload_data;
            builder_basesoc_axiliteinterface_w_payload_strb <= builder_basesoc_socbushandler_w_payload_strb;
            builder_basesoc_socbushandler_w_ready <= builder_basesoc_axiliteinterface_w_ready;
            if (((builder_basesoc_socbushandler_w_valid & builder_basesoc_socbushandler_w_last) & builder_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite2_next_state <= 2'd3;
            end
        end
        2'd3: begin
            builder_basesoc_socbushandler_b_valid <= 1'd1;
            builder_basesoc_socbushandler_b_payload_resp <= 1'd0;
            builder_basesoc_socbushandler_b_param_id <= builder_basesoc_socbushandler_ax_beat_param_id;
            if (builder_basesoc_socbushandler_b_ready) begin
                builder_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite2_next_state <= 1'd0;
            end
        end
        default: begin
            builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
            builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
            if ((builder_basesoc_socbushandler_ar_valid & builder_basesoc_socbushandler_aw_valid)) begin
                if (builder_basesoc_socbushandler_last_ar_aw_n) begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_aw_valid;
                    builder_basesoc_socbushandler_aw_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_aw_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_aw_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_aw_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_aw_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_aw_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_aw_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_aw_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_aw_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_aw_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_aw_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_aw_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_aw_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_aw_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_aw_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 2'd2;
                end else begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_ar_valid;
                    builder_basesoc_socbushandler_ar_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_ar_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_ar_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_ar_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_ar_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_ar_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_ar_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_ar_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_ar_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_ar_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_ar_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_ar_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_ar_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_ar_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_ar_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 1'd1;
                end
            end else begin
                if (builder_basesoc_socbushandler_ar_valid) begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_ar_valid;
                    builder_basesoc_socbushandler_ar_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_ar_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_ar_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_ar_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_ar_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_ar_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_ar_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_ar_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_ar_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_ar_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_ar_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_ar_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_ar_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_ar_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_ar_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 1'd1;
                end else begin
                    if (builder_basesoc_socbushandler_aw_valid) begin
                        builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_aw_valid;
                        builder_basesoc_socbushandler_aw_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                        builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_aw_first;
                        builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_aw_last;
                        builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_aw_payload_addr;
                        builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_aw_payload_burst;
                        builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_aw_payload_len;
                        builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_aw_payload_size;
                        builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_aw_payload_lock;
                        builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_aw_payload_prot;
                        builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_aw_payload_cache;
                        builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_aw_payload_qos;
                        builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_aw_payload_region;
                        builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_aw_param_id;
                        builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_aw_param_dest;
                        builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_aw_param_user;
                        builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                        builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                        builder_axi2axilite2_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign builder_aw_valid = builder_self0;
assign builder_aw_first = builder_self1;
assign builder_aw_last = builder_self2;
assign builder_aw_payload_addr = builder_self3;
assign builder_aw_payload_burst = builder_self4;
assign builder_aw_payload_len = builder_self5;
assign builder_aw_payload_size = builder_self6;
assign builder_aw_payload_lock = builder_self7;
assign builder_aw_payload_prot = builder_self8;
assign builder_aw_payload_cache = builder_self9;
assign builder_aw_payload_qos = builder_self10;
assign builder_aw_payload_region = builder_self11;
assign builder_aw_param_id = builder_self12;
assign builder_aw_param_dest = builder_self13;
assign builder_aw_param_user = builder_self14;
assign builder_w_valid = builder_self15;
assign builder_w_first = builder_self16;
assign builder_w_last = builder_self17;
assign builder_w_payload_data = builder_self18;
assign builder_w_payload_strb = builder_self19;
assign builder_w_param_id = builder_self20;
assign builder_w_param_dest = builder_self21;
assign builder_w_param_user = builder_self22;
assign builder_b_ready = builder_self23;
assign builder_ar_valid = builder_self24;
assign builder_ar_first = builder_self25;
assign builder_ar_last = builder_self26;
assign builder_ar_payload_addr = builder_self27;
assign builder_ar_payload_burst = builder_self28;
assign builder_ar_payload_len = builder_self29;
assign builder_ar_payload_size = builder_self30;
assign builder_ar_payload_lock = builder_self31;
assign builder_ar_payload_prot = builder_self32;
assign builder_ar_payload_cache = builder_self33;
assign builder_ar_payload_qos = builder_self34;
assign builder_ar_payload_region = builder_self35;
assign builder_ar_param_id = builder_self36;
assign builder_ar_param_dest = builder_self37;
assign builder_ar_param_user = builder_self38;
assign builder_r_ready = builder_self39;
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_aw_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_aw_ready <= builder_aw_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_aw_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_aw_ready <= builder_aw_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_w_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_w_ready <= builder_w_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_w_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_w_ready <= builder_w_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_b_valid <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_b_valid <= builder_b_valid;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_b_valid <= 1'd0;
    if ((builder_rr_write_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_b_valid <= builder_b_valid;
    end
end
assign main_basesoc_socbushandler_axiinterface0_b_first = builder_b_first;
assign main_basesoc_socbushandler_axiinterface1_b_first = builder_b_first;
assign main_basesoc_socbushandler_axiinterface0_b_last = builder_b_last;
assign main_basesoc_socbushandler_axiinterface1_b_last = builder_b_last;
assign main_basesoc_socbushandler_axiinterface0_b_payload_resp = builder_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface1_b_payload_resp = builder_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface0_b_param_id = builder_b_param_id;
assign main_basesoc_socbushandler_axiinterface1_b_param_id = builder_b_param_id;
assign main_basesoc_socbushandler_axiinterface0_b_param_dest = builder_b_param_dest;
assign main_basesoc_socbushandler_axiinterface1_b_param_dest = builder_b_param_dest;
assign main_basesoc_socbushandler_axiinterface0_b_param_user = builder_b_param_user;
assign main_basesoc_socbushandler_axiinterface1_b_param_user = builder_b_param_user;
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_ar_ready <= 1'd0;
    if ((builder_rr_read_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_ar_ready <= builder_ar_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_ar_ready <= 1'd0;
    if ((builder_rr_read_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_ar_ready <= builder_ar_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_r_valid <= 1'd0;
    if ((builder_rr_read_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_r_valid <= builder_r_valid;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_r_valid <= 1'd0;
    if ((builder_rr_read_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_r_valid <= builder_r_valid;
    end
end
assign main_basesoc_socbushandler_axiinterface0_r_first = builder_r_first;
assign main_basesoc_socbushandler_axiinterface1_r_first = builder_r_first;
assign main_basesoc_socbushandler_axiinterface0_r_last = builder_r_last;
assign main_basesoc_socbushandler_axiinterface1_r_last = builder_r_last;
assign main_basesoc_socbushandler_axiinterface0_r_payload_resp = builder_r_payload_resp;
assign main_basesoc_socbushandler_axiinterface1_r_payload_resp = builder_r_payload_resp;
assign main_basesoc_socbushandler_axiinterface0_r_payload_data = builder_r_payload_data;
assign main_basesoc_socbushandler_axiinterface1_r_payload_data = builder_r_payload_data;
assign main_basesoc_socbushandler_axiinterface0_r_param_id = builder_r_param_id;
assign main_basesoc_socbushandler_axiinterface1_r_param_id = builder_r_param_id;
assign main_basesoc_socbushandler_axiinterface0_r_param_dest = builder_r_param_dest;
assign main_basesoc_socbushandler_axiinterface1_r_param_dest = builder_r_param_dest;
assign main_basesoc_socbushandler_axiinterface0_r_param_user = builder_r_param_user;
assign main_basesoc_socbushandler_axiinterface1_r_param_user = builder_r_param_user;
assign builder_rr_write_ce = ((~((builder_aw_valid | builder_w_valid) | builder_b_valid)) & builder_wr_lock_empty);
assign builder_rr_read_ce = ((~(builder_ar_valid | builder_r_valid)) & builder_rd_lock_empty);
assign builder_rr_write_request = {((main_basesoc_socbushandler_axiinterface1_aw_valid | main_basesoc_socbushandler_axiinterface1_w_valid) | main_basesoc_socbushandler_axiinterface1_b_valid), ((main_basesoc_socbushandler_axiinterface0_aw_valid | main_basesoc_socbushandler_axiinterface0_w_valid) | main_basesoc_socbushandler_axiinterface0_b_valid)};
assign builder_rr_read_request = {(main_basesoc_socbushandler_axiinterface1_ar_valid | main_basesoc_socbushandler_axiinterface1_r_valid), (main_basesoc_socbushandler_axiinterface0_ar_valid | main_basesoc_socbushandler_axiinterface0_r_valid)};
assign builder_wr_lock_full = (builder_wr_lock_counter == 8'd255);
assign builder_wr_lock_empty = (builder_wr_lock_counter == 1'd0);
assign builder_wr_lock_stall = ((builder_aw_valid & builder_aw_ready) & builder_wr_lock_full);
assign builder_rd_lock_full = (builder_rd_lock_counter == 8'd255);
assign builder_rd_lock_empty = (builder_rd_lock_counter == 1'd0);
assign builder_rd_lock_stall = ((builder_ar_valid & builder_ar_ready) & builder_rd_lock_full);
always @(*) begin
    builder_slave_sel_dec0 <= 3'd0;
    builder_slave_sel_dec0[0] <= (builder_slice_proxy0[29:15] == 1'd0);
    builder_slave_sel_dec0[1] <= (builder_slice_proxy2[29:11] == 16'd32768);
    builder_slave_sel_dec0[2] <= (builder_slice_proxy4[29:14] == 16'd61440);
end
always @(*) begin
    builder_slave_sel_dec1 <= 3'd0;
    builder_slave_sel_dec1[0] <= (builder_slice_proxy1[29:15] == 1'd0);
    builder_slave_sel_dec1[1] <= (builder_slice_proxy3[29:11] == 16'd32768);
    builder_slave_sel_dec1[2] <= (builder_slice_proxy5[29:14] == 16'd61440);
end
always @(*) begin
    builder_slave_sel0 <= 3'd0;
    if (builder_axirequestcounter0_empty) begin
        builder_slave_sel0 <= builder_slave_sel_dec0;
    end else begin
        builder_slave_sel0 <= builder_slave_sel_reg0;
    end
end
always @(*) begin
    builder_slave_sel1 <= 3'd0;
    if (builder_axirequestcounter1_empty) begin
        builder_slave_sel1 <= builder_slave_sel_dec1;
    end else begin
        builder_slave_sel1 <= builder_slave_sel_reg1;
    end
end
assign main_basesoc_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[0]);
assign main_basesoc_basesoc_socbushandler_aw_first = builder_aw_first;
assign main_basesoc_basesoc_socbushandler_aw_last = builder_aw_last;
assign main_basesoc_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign main_basesoc_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign main_basesoc_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign main_basesoc_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign main_basesoc_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign main_basesoc_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign main_basesoc_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign main_basesoc_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign main_basesoc_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign main_basesoc_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign main_basesoc_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign main_basesoc_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign main_basesoc_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[0]);
assign main_basesoc_basesoc_socbushandler_w_first = builder_w_first;
assign main_basesoc_basesoc_socbushandler_w_last = builder_w_last;
assign main_basesoc_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign main_basesoc_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign main_basesoc_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign main_basesoc_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign main_basesoc_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign main_basesoc_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[0]);
assign main_basesoc_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[0]);
assign main_basesoc_basesoc_socbushandler_ar_first = builder_ar_first;
assign main_basesoc_basesoc_socbushandler_ar_last = builder_ar_last;
assign main_basesoc_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign main_basesoc_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign main_basesoc_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign main_basesoc_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign main_basesoc_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign main_basesoc_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign main_basesoc_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign main_basesoc_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign main_basesoc_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign main_basesoc_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign main_basesoc_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign main_basesoc_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign main_basesoc_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[0]);
assign main_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[1]);
assign main_basesoc_socbushandler_aw_first = builder_aw_first;
assign main_basesoc_socbushandler_aw_last = builder_aw_last;
assign main_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign main_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign main_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign main_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign main_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign main_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign main_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign main_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign main_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign main_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign main_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign main_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign main_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[1]);
assign main_basesoc_socbushandler_w_first = builder_w_first;
assign main_basesoc_socbushandler_w_last = builder_w_last;
assign main_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign main_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign main_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign main_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign main_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign main_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[1]);
assign main_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[1]);
assign main_basesoc_socbushandler_ar_first = builder_ar_first;
assign main_basesoc_socbushandler_ar_last = builder_ar_last;
assign main_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign main_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign main_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign main_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign main_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign main_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign main_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign main_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign main_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign main_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign main_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign main_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign main_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[1]);
assign builder_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[2]);
assign builder_basesoc_socbushandler_aw_first = builder_aw_first;
assign builder_basesoc_socbushandler_aw_last = builder_aw_last;
assign builder_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign builder_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign builder_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign builder_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign builder_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign builder_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign builder_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign builder_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign builder_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign builder_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign builder_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign builder_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign builder_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[2]);
assign builder_basesoc_socbushandler_w_first = builder_w_first;
assign builder_basesoc_socbushandler_w_last = builder_w_last;
assign builder_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign builder_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign builder_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign builder_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign builder_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign builder_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[2]);
assign builder_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[2]);
assign builder_basesoc_socbushandler_ar_first = builder_ar_first;
assign builder_basesoc_socbushandler_ar_last = builder_ar_last;
assign builder_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign builder_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign builder_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign builder_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign builder_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign builder_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign builder_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign builder_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign builder_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign builder_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign builder_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign builder_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign builder_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[2]);
assign builder_b_first = (((main_basesoc_basesoc_socbushandler_b_first & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_first & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_b_first & {1{builder_slave_sel0[2]}}));
assign builder_b_last = (((main_basesoc_basesoc_socbushandler_b_last & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_last & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_b_last & {1{builder_slave_sel0[2]}}));
assign builder_b_param_id = (((main_basesoc_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[2]}}));
assign builder_b_param_dest = (((main_basesoc_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[2]}}));
assign builder_b_param_user = (((main_basesoc_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[2]}}));
assign builder_r_first = (((main_basesoc_basesoc_socbushandler_r_first & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_first & {1{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_first & {1{builder_slave_sel1[2]}}));
assign builder_r_param_id = (((main_basesoc_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[2]}}));
assign builder_r_param_dest = (((main_basesoc_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[2]}}));
assign builder_r_param_user = (((main_basesoc_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[2]}}));
assign builder_axirequestcounter0_full = (builder_axirequestcounter0_counter == 8'd255);
assign builder_axirequestcounter0_empty = (builder_axirequestcounter0_counter == 1'd0);
assign builder_axirequestcounter0_stall = ((builder_aw_valid & builder_aw_ready) & builder_axirequestcounter0_full);
assign builder_axirequestcounter1_full = (builder_axirequestcounter1_counter == 8'd255);
assign builder_axirequestcounter1_empty = (builder_axirequestcounter1_counter == 1'd0);
assign builder_axirequestcounter1_stall = ((builder_ar_valid & builder_ar_ready) & builder_axirequestcounter1_full);
assign builder_error = (builder_wr_error | builder_rd_error);
assign builder_wr_timer_done = (builder_wr_timer_count == 1'd0);
assign builder_rd_timer_done = (builder_rd_timer_count == 1'd0);
always @(*) begin
    builder_aw_ready <= 1'd0;
    builder_b_payload_resp <= 2'd0;
    builder_b_valid <= 1'd0;
    builder_fsm0_next_state <= 1'd0;
    builder_w_ready <= 1'd0;
    builder_wr_error <= 1'd0;
    builder_wr_timer_wait <= 1'd0;
    builder_aw_ready <= (((main_basesoc_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[2]}}));
    builder_w_ready <= (((main_basesoc_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[2]}}));
    builder_b_valid <= (((main_basesoc_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[2]}}));
    builder_b_payload_resp <= (((main_basesoc_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[1]}})) | (builder_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[2]}}));
    builder_fsm0_next_state <= builder_fsm0_state;
    case (builder_fsm0_state)
        1'd1: begin
            builder_aw_ready <= builder_aw_valid;
            builder_w_ready <= builder_w_valid;
            builder_b_valid <= ((~builder_aw_valid) & (~builder_w_valid));
            builder_b_payload_resp <= 2'd2;
            if ((builder_b_valid & builder_b_ready)) begin
                builder_fsm0_next_state <= 1'd0;
            end
        end
        default: begin
            builder_wr_timer_wait <= ((builder_aw_valid & (~builder_aw_ready)) | (builder_w_valid & (~builder_w_ready)));
            if ((builder_wr_timer_done & builder_wr_timer_wait)) begin
                builder_wr_error <= 1'd1;
                builder_fsm0_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_ar_ready <= 1'd0;
    builder_fsm1_next_state <= 1'd0;
    builder_r_last <= 1'd0;
    builder_r_payload_data <= 32'd0;
    builder_r_payload_resp <= 2'd0;
    builder_r_valid <= 1'd0;
    builder_rd_error <= 1'd0;
    builder_rd_timer_wait <= 1'd0;
    builder_ar_ready <= (((main_basesoc_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[2]}}));
    builder_r_valid <= (((main_basesoc_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[2]}}));
    builder_r_last <= (((main_basesoc_basesoc_socbushandler_r_last & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_last & {1{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_last & {1{builder_slave_sel1[2]}}));
    builder_r_payload_resp <= (((main_basesoc_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[2]}}));
    builder_r_payload_data <= (((main_basesoc_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[1]}})) | (builder_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[2]}}));
    builder_fsm1_next_state <= builder_fsm1_state;
    case (builder_fsm1_state)
        1'd1: begin
            builder_ar_ready <= builder_ar_valid;
            builder_r_valid <= (~builder_ar_valid);
            builder_r_last <= 1'd1;
            builder_r_payload_resp <= 2'd2;
            builder_r_payload_data <= 32'd4294967295;
            if ((builder_r_valid & builder_r_ready)) begin
                builder_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            builder_rd_timer_wait <= (builder_ar_valid & (~builder_ar_ready));
            if ((builder_rd_timer_done & builder_rd_timer_wait)) begin
                builder_rd_error <= 1'd1;
                builder_fsm1_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
always @(*) begin
    builder_basesoc_axilitesram0_next_state <= 3'd0;
    main_basesoc_basesoc_adr <= 15'd0;
    main_basesoc_basesoc_do_read <= 1'd0;
    main_basesoc_basesoc_do_write <= 1'd0;
    main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd0;
    main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd0;
    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 <= 15'd0;
    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 <= 1'd0;
    main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 <= 32'd0;
    main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 <= 1'd0;
    main_basesoc_basesoc_ram_bus_ar_ready <= 1'd0;
    main_basesoc_basesoc_ram_bus_aw_ready <= 1'd0;
    main_basesoc_basesoc_ram_bus_b_payload_resp <= 2'd0;
    main_basesoc_basesoc_ram_bus_b_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_r_payload_data <= 32'd0;
    main_basesoc_basesoc_ram_bus_r_payload_resp <= 2'd0;
    main_basesoc_basesoc_ram_bus_r_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_w_ready <= 1'd0;
    builder_basesoc_axilitesram0_next_state <= builder_basesoc_axilitesram0_state;
    case (builder_basesoc_axilitesram0_state)
        1'd1: begin
            main_basesoc_basesoc_adr <= main_basesoc_basesoc_port_adr_reg;
            if (main_basesoc_basesoc_ram_bus_w_valid) begin
                main_basesoc_basesoc_ram_bus_w_ready <= 1'd1;
                builder_basesoc_axilitesram0_next_state <= 3'd4;
            end
        end
        2'd2: begin
            main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 <= main_basesoc_basesoc_dat_r;
            main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 <= 1'd1;
            builder_basesoc_axilitesram0_next_state <= 2'd3;
        end
        2'd3: begin
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd1;
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd1;
            main_basesoc_basesoc_ram_bus_r_payload_data <= main_basesoc_basesoc_port_dat_r_latched;
            main_basesoc_basesoc_ram_bus_r_payload_resp <= 1'd0;
            main_basesoc_basesoc_ram_bus_r_valid <= 1'd1;
            if (main_basesoc_basesoc_ram_bus_r_ready) begin
                builder_basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        3'd4: begin
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd0;
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd1;
            main_basesoc_basesoc_ram_bus_b_valid <= 1'd1;
            main_basesoc_basesoc_ram_bus_b_payload_resp <= 1'd0;
            if (main_basesoc_basesoc_ram_bus_b_ready) begin
                builder_basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_basesoc_ram_bus_aw_valid & main_basesoc_basesoc_ram_bus_ar_valid)) begin
                main_basesoc_basesoc_do_write <= main_basesoc_basesoc_last_was_read;
                main_basesoc_basesoc_do_read <= (~main_basesoc_basesoc_last_was_read);
            end else begin
                main_basesoc_basesoc_do_write <= main_basesoc_basesoc_ram_bus_aw_valid;
                main_basesoc_basesoc_do_read <= main_basesoc_basesoc_ram_bus_ar_valid;
            end
            main_basesoc_basesoc_ram_bus_aw_ready <= (main_basesoc_basesoc_last_was_read | (~main_basesoc_basesoc_ram_bus_ar_valid));
            main_basesoc_basesoc_ram_bus_ar_ready <= ((~main_basesoc_basesoc_last_was_read) | (~main_basesoc_basesoc_ram_bus_aw_valid));
            if (main_basesoc_basesoc_do_write) begin
                main_basesoc_basesoc_adr <= main_basesoc_basesoc_ram_bus_aw_payload_addr[31:2];
                if (main_basesoc_basesoc_ram_bus_w_valid) begin
                    main_basesoc_basesoc_ram_bus_w_ready <= 1'd1;
                    builder_basesoc_axilitesram0_next_state <= 3'd4;
                end else begin
                    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 <= main_basesoc_basesoc_adr;
                    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 <= 1'd1;
                    builder_basesoc_axilitesram0_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_basesoc_do_read) begin
                    main_basesoc_basesoc_adr <= main_basesoc_basesoc_ram_bus_ar_payload_addr[31:2];
                    builder_basesoc_axilitesram0_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    main_basesoc_ram_dat_w <= 32'd0;
    main_basesoc_ram_dat_w <= main_basesoc_ram_bus_w_payload_data;
    main_basesoc_ram_dat_w <= main_basesoc_ram_bus_w_payload_data;
end
always @(*) begin
    main_basesoc_ram_we <= 4'd0;
    main_basesoc_ram_we[0] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[0]);
    main_basesoc_ram_we[1] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[1]);
    main_basesoc_ram_we[2] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[2]);
    main_basesoc_ram_we[3] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[3]);
    main_basesoc_ram_we[0] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[0]);
    main_basesoc_ram_we[1] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[1]);
    main_basesoc_ram_we[2] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[2]);
    main_basesoc_ram_we[3] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[3]);
end
always @(*) begin
    builder_basesoc_axilitesram1_next_state <= 3'd0;
    main_basesoc_ram_adr <= 11'd0;
    main_basesoc_ram_bus_ar_ready <= 1'd0;
    main_basesoc_ram_bus_aw_ready <= 1'd0;
    main_basesoc_ram_bus_b_payload_resp <= 2'd0;
    main_basesoc_ram_bus_b_valid <= 1'd0;
    main_basesoc_ram_bus_r_payload_data <= 32'd0;
    main_basesoc_ram_bus_r_payload_resp <= 2'd0;
    main_basesoc_ram_bus_r_valid <= 1'd0;
    main_basesoc_ram_bus_w_ready <= 1'd0;
    main_basesoc_ram_do_read <= 1'd0;
    main_basesoc_ram_do_write <= 1'd0;
    main_basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd0;
    main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd0;
    main_basesoc_ram_port_adr_reg_axilitesram1_next_value0 <= 11'd0;
    main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 <= 1'd0;
    main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 <= 32'd0;
    main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 <= 1'd0;
    builder_basesoc_axilitesram1_next_state <= builder_basesoc_axilitesram1_state;
    case (builder_basesoc_axilitesram1_state)
        1'd1: begin
            main_basesoc_ram_adr <= main_basesoc_ram_port_adr_reg;
            if (main_basesoc_ram_bus_w_valid) begin
                main_basesoc_ram_bus_w_ready <= 1'd1;
                builder_basesoc_axilitesram1_next_state <= 3'd4;
            end
        end
        2'd2: begin
            main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 <= main_basesoc_ram_dat_r;
            main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 <= 1'd1;
            builder_basesoc_axilitesram1_next_state <= 2'd3;
        end
        2'd3: begin
            main_basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd1;
            main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd1;
            main_basesoc_ram_bus_r_payload_data <= main_basesoc_ram_port_dat_r_latched;
            main_basesoc_ram_bus_r_payload_resp <= 1'd0;
            main_basesoc_ram_bus_r_valid <= 1'd1;
            if (main_basesoc_ram_bus_r_ready) begin
                builder_basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        3'd4: begin
            main_basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd0;
            main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd1;
            main_basesoc_ram_bus_b_valid <= 1'd1;
            main_basesoc_ram_bus_b_payload_resp <= 1'd0;
            if (main_basesoc_ram_bus_b_ready) begin
                builder_basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_ram_bus_aw_valid & main_basesoc_ram_bus_ar_valid)) begin
                main_basesoc_ram_do_write <= main_basesoc_ram_last_was_read;
                main_basesoc_ram_do_read <= (~main_basesoc_ram_last_was_read);
            end else begin
                main_basesoc_ram_do_write <= main_basesoc_ram_bus_aw_valid;
                main_basesoc_ram_do_read <= main_basesoc_ram_bus_ar_valid;
            end
            main_basesoc_ram_bus_aw_ready <= (main_basesoc_ram_last_was_read | (~main_basesoc_ram_bus_ar_valid));
            main_basesoc_ram_bus_ar_ready <= ((~main_basesoc_ram_last_was_read) | (~main_basesoc_ram_bus_aw_valid));
            if (main_basesoc_ram_do_write) begin
                main_basesoc_ram_adr <= main_basesoc_ram_bus_aw_payload_addr[31:2];
                if (main_basesoc_ram_bus_w_valid) begin
                    main_basesoc_ram_bus_w_ready <= 1'd1;
                    builder_basesoc_axilitesram1_next_state <= 3'd4;
                end else begin
                    main_basesoc_ram_port_adr_reg_axilitesram1_next_value0 <= main_basesoc_ram_adr;
                    main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 <= 1'd1;
                    builder_basesoc_axilitesram1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ram_do_read) begin
                    main_basesoc_ram_adr <= main_basesoc_ram_bus_ar_payload_addr[31:2];
                    builder_basesoc_axilitesram1_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_rs232phytx_next_state <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    builder_basesoc_rs232phytx_next_state <= builder_basesoc_rs232phytx_state;
    case (builder_basesoc_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_basesoc_rs232phyrx_next_state <= builder_basesoc_rs232phyrx_state;
    case (builder_basesoc_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 6'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {led_n5, led_n4, led_n3, led_n2, led_n1, led_n0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
assign builder_basesoc_dat_w = builder_basesoc_axiliteinterface_w_payload_data;
assign builder_basesoc_we = ((builder_basesoc_axiliteinterface_w_valid & builder_basesoc_axiliteinterface_w_ready) & (builder_basesoc_axiliteinterface_w_payload_strb != 1'd0));
assign builder_basesoc_re = (builder_basesoc_axiliteinterface_ar_valid & builder_basesoc_axiliteinterface_ar_ready);
always @(*) begin
    builder_basesoc_adr <= 14'd0;
    builder_basesoc_axilite2csr_next_state <= 3'd0;
    builder_basesoc_axiliteinterface_ar_ready <= 1'd0;
    builder_basesoc_axiliteinterface_aw_ready <= 1'd0;
    builder_basesoc_axiliteinterface_b_payload_resp <= 2'd0;
    builder_basesoc_axiliteinterface_b_valid <= 1'd0;
    builder_basesoc_axiliteinterface_r_payload_data <= 32'd0;
    builder_basesoc_axiliteinterface_r_payload_resp <= 2'd0;
    builder_basesoc_axiliteinterface_r_valid <= 1'd0;
    builder_basesoc_axiliteinterface_w_ready <= 1'd0;
    builder_basesoc_do_read <= 1'd0;
    builder_basesoc_do_write <= 1'd0;
    builder_basesoc_last_was_read_axilite2csr_next_value2 <= 1'd0;
    builder_basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd0;
    builder_basesoc_port_adr_reg_axilite2csr_next_value0 <= 14'd0;
    builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0 <= 1'd0;
    builder_basesoc_port_dat_r_latched_axilite2csr_next_value1 <= 32'd0;
    builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 <= 1'd0;
    builder_basesoc_axilite2csr_next_state <= builder_basesoc_axilite2csr_state;
    case (builder_basesoc_axilite2csr_state)
        1'd1: begin
            builder_basesoc_adr <= builder_basesoc_port_adr_reg;
            if (builder_basesoc_axiliteinterface_w_valid) begin
                builder_basesoc_axiliteinterface_w_ready <= 1'd1;
                builder_basesoc_axilite2csr_next_state <= 3'd4;
            end
        end
        2'd2: begin
            builder_basesoc_port_dat_r_latched_axilite2csr_next_value1 <= builder_basesoc_dat_r;
            builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 <= 1'd1;
            builder_basesoc_axilite2csr_next_state <= 2'd3;
        end
        2'd3: begin
            builder_basesoc_last_was_read_axilite2csr_next_value2 <= 1'd1;
            builder_basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd1;
            builder_basesoc_axiliteinterface_r_payload_data <= builder_basesoc_port_dat_r_latched;
            builder_basesoc_axiliteinterface_r_payload_resp <= 1'd0;
            builder_basesoc_axiliteinterface_r_valid <= 1'd1;
            if (builder_basesoc_axiliteinterface_r_ready) begin
                builder_basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        3'd4: begin
            builder_basesoc_last_was_read_axilite2csr_next_value2 <= 1'd0;
            builder_basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd1;
            builder_basesoc_axiliteinterface_b_valid <= 1'd1;
            builder_basesoc_axiliteinterface_b_payload_resp <= 1'd0;
            if (builder_basesoc_axiliteinterface_b_ready) begin
                builder_basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        default: begin
            if ((builder_basesoc_axiliteinterface_aw_valid & builder_basesoc_axiliteinterface_ar_valid)) begin
                builder_basesoc_do_write <= builder_basesoc_last_was_read;
                builder_basesoc_do_read <= (~builder_basesoc_last_was_read);
            end else begin
                builder_basesoc_do_write <= builder_basesoc_axiliteinterface_aw_valid;
                builder_basesoc_do_read <= builder_basesoc_axiliteinterface_ar_valid;
            end
            builder_basesoc_axiliteinterface_aw_ready <= (builder_basesoc_last_was_read | (~builder_basesoc_axiliteinterface_ar_valid));
            builder_basesoc_axiliteinterface_ar_ready <= ((~builder_basesoc_last_was_read) | (~builder_basesoc_axiliteinterface_aw_valid));
            if (builder_basesoc_do_write) begin
                builder_basesoc_adr <= builder_basesoc_axiliteinterface_aw_payload_addr[31:2];
                if (builder_basesoc_axiliteinterface_w_valid) begin
                    builder_basesoc_axiliteinterface_w_ready <= 1'd1;
                    builder_basesoc_axilite2csr_next_state <= 3'd4;
                end else begin
                    builder_basesoc_port_adr_reg_axilite2csr_next_value0 <= builder_basesoc_adr;
                    builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0 <= 1'd1;
                    builder_basesoc_axilite2csr_next_state <= 1'd1;
                end
            end else begin
                if (builder_basesoc_do_read) begin
                    builder_basesoc_adr <= builder_basesoc_axiliteinterface_ar_payload_addr[31:2];
                    builder_basesoc_axilite2csr_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status[31:0];
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[5:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_out0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_out0_w = main_storage[5:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_load0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_load0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_load0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_reload0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_reload0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_reload0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_en0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank2_en0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_en0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_update_value0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank2_update_value0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_update_value0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_value_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_value_re <= 1'd0;
    builder_csr_bankarray_csrbank2_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank2_value_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_value_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_ev_status_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_ev_pending_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_ev_enable0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_load0_w = main_basesoc_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank2_reload0_w = main_basesoc_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank2_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank2_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank2_value_w = main_basesoc_timer_value_status[31:0];
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank2_value_we;
always @(*) begin
    main_basesoc_timer_status_status <= 1'd0;
    main_basesoc_timer_status_status <= main_basesoc_timer_zero0;
end
assign builder_csr_bankarray_csrbank2_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
    main_basesoc_timer_pending_status <= 1'd0;
    main_basesoc_timer_pending_status <= main_basesoc_timer_zero1;
end
assign builder_csr_bankarray_csrbank2_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank2_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface3_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_txfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank3_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_txfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_txfull_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_rxempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank3_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_rxempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_rxempty_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_status_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_pending_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_enable0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_txempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank3_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank3_txempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_txempty_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_rxfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank3_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank3_rxfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_rxfull_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank3_txfull_we;
assign builder_csr_bankarray_csrbank3_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank3_ev_status_w = main_basesoc_uart_status_status[1:0];
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank3_ev_pending_w = main_basesoc_uart_pending_status[1:0];
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank3_ev_enable0_w = main_basesoc_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank3_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank3_txempty_we;
assign builder_csr_bankarray_csrbank3_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank3_rxfull_we;
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_re = builder_basesoc_re;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
assign builder_slice_proxy0 = builder_aw_payload_addr[31:2];
assign builder_slice_proxy1 = builder_ar_payload_addr[31:2];
assign builder_slice_proxy2 = builder_aw_payload_addr[31:2];
assign builder_slice_proxy3 = builder_ar_payload_addr[31:2];
assign builder_slice_proxy4 = builder_aw_payload_addr[31:2];
assign builder_slice_proxy5 = builder_ar_payload_addr[31:2];
always @(*) begin
    builder_self0 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self0 <= main_basesoc_socbushandler_axiinterface0_aw_valid;
        end
        default: begin
            builder_self0 <= main_basesoc_socbushandler_axiinterface1_aw_valid;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self1 <= main_basesoc_socbushandler_axiinterface0_aw_first;
        end
        default: begin
            builder_self1 <= main_basesoc_socbushandler_axiinterface1_aw_first;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self2 <= main_basesoc_socbushandler_axiinterface0_aw_last;
        end
        default: begin
            builder_self2 <= main_basesoc_socbushandler_axiinterface1_aw_last;
        end
    endcase
end
always @(*) begin
    builder_self3 <= 32'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self3 <= main_basesoc_socbushandler_axiinterface0_aw_payload_addr;
        end
        default: begin
            builder_self3 <= main_basesoc_socbushandler_axiinterface1_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    builder_self4 <= 2'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self4 <= main_basesoc_socbushandler_axiinterface0_aw_payload_burst;
        end
        default: begin
            builder_self4 <= main_basesoc_socbushandler_axiinterface1_aw_payload_burst;
        end
    endcase
end
always @(*) begin
    builder_self5 <= 8'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self5 <= main_basesoc_socbushandler_axiinterface0_aw_payload_len;
        end
        default: begin
            builder_self5 <= main_basesoc_socbushandler_axiinterface1_aw_payload_len;
        end
    endcase
end
always @(*) begin
    builder_self6 <= 3'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self6 <= main_basesoc_socbushandler_axiinterface0_aw_payload_size;
        end
        default: begin
            builder_self6 <= main_basesoc_socbushandler_axiinterface1_aw_payload_size;
        end
    endcase
end
always @(*) begin
    builder_self7 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self7 <= main_basesoc_socbushandler_axiinterface0_aw_payload_lock;
        end
        default: begin
            builder_self7 <= main_basesoc_socbushandler_axiinterface1_aw_payload_lock;
        end
    endcase
end
always @(*) begin
    builder_self8 <= 3'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self8 <= main_basesoc_socbushandler_axiinterface0_aw_payload_prot;
        end
        default: begin
            builder_self8 <= main_basesoc_socbushandler_axiinterface1_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    builder_self9 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self9 <= main_basesoc_socbushandler_axiinterface0_aw_payload_cache;
        end
        default: begin
            builder_self9 <= main_basesoc_socbushandler_axiinterface1_aw_payload_cache;
        end
    endcase
end
always @(*) begin
    builder_self10 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self10 <= main_basesoc_socbushandler_axiinterface0_aw_payload_qos;
        end
        default: begin
            builder_self10 <= main_basesoc_socbushandler_axiinterface1_aw_payload_qos;
        end
    endcase
end
always @(*) begin
    builder_self11 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self11 <= main_basesoc_socbushandler_axiinterface0_aw_payload_region;
        end
        default: begin
            builder_self11 <= main_basesoc_socbushandler_axiinterface1_aw_payload_region;
        end
    endcase
end
always @(*) begin
    builder_self12 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self12 <= main_basesoc_socbushandler_axiinterface0_aw_param_id;
        end
        default: begin
            builder_self12 <= main_basesoc_socbushandler_axiinterface1_aw_param_id;
        end
    endcase
end
always @(*) begin
    builder_self13 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self13 <= main_basesoc_socbushandler_axiinterface0_aw_param_dest;
        end
        default: begin
            builder_self13 <= main_basesoc_socbushandler_axiinterface1_aw_param_dest;
        end
    endcase
end
always @(*) begin
    builder_self14 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self14 <= main_basesoc_socbushandler_axiinterface0_aw_param_user;
        end
        default: begin
            builder_self14 <= main_basesoc_socbushandler_axiinterface1_aw_param_user;
        end
    endcase
end
always @(*) begin
    builder_self15 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self15 <= main_basesoc_socbushandler_axiinterface0_w_valid;
        end
        default: begin
            builder_self15 <= main_basesoc_socbushandler_axiinterface1_w_valid;
        end
    endcase
end
always @(*) begin
    builder_self16 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self16 <= main_basesoc_socbushandler_axiinterface0_w_first;
        end
        default: begin
            builder_self16 <= main_basesoc_socbushandler_axiinterface1_w_first;
        end
    endcase
end
always @(*) begin
    builder_self17 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self17 <= main_basesoc_socbushandler_axiinterface0_w_last;
        end
        default: begin
            builder_self17 <= main_basesoc_socbushandler_axiinterface1_w_last;
        end
    endcase
end
always @(*) begin
    builder_self18 <= 32'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self18 <= main_basesoc_socbushandler_axiinterface0_w_payload_data;
        end
        default: begin
            builder_self18 <= main_basesoc_socbushandler_axiinterface1_w_payload_data;
        end
    endcase
end
always @(*) begin
    builder_self19 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self19 <= main_basesoc_socbushandler_axiinterface0_w_payload_strb;
        end
        default: begin
            builder_self19 <= main_basesoc_socbushandler_axiinterface1_w_payload_strb;
        end
    endcase
end
always @(*) begin
    builder_self20 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self20 <= main_basesoc_socbushandler_axiinterface0_w_param_id;
        end
        default: begin
            builder_self20 <= main_basesoc_socbushandler_axiinterface1_w_param_id;
        end
    endcase
end
always @(*) begin
    builder_self21 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self21 <= main_basesoc_socbushandler_axiinterface0_w_param_dest;
        end
        default: begin
            builder_self21 <= main_basesoc_socbushandler_axiinterface1_w_param_dest;
        end
    endcase
end
always @(*) begin
    builder_self22 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self22 <= main_basesoc_socbushandler_axiinterface0_w_param_user;
        end
        default: begin
            builder_self22 <= main_basesoc_socbushandler_axiinterface1_w_param_user;
        end
    endcase
end
always @(*) begin
    builder_self23 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_self23 <= main_basesoc_socbushandler_axiinterface0_b_ready;
        end
        default: begin
            builder_self23 <= main_basesoc_socbushandler_axiinterface1_b_ready;
        end
    endcase
end
always @(*) begin
    builder_self24 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self24 <= main_basesoc_socbushandler_axiinterface0_ar_valid;
        end
        default: begin
            builder_self24 <= main_basesoc_socbushandler_axiinterface1_ar_valid;
        end
    endcase
end
always @(*) begin
    builder_self25 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self25 <= main_basesoc_socbushandler_axiinterface0_ar_first;
        end
        default: begin
            builder_self25 <= main_basesoc_socbushandler_axiinterface1_ar_first;
        end
    endcase
end
always @(*) begin
    builder_self26 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self26 <= main_basesoc_socbushandler_axiinterface0_ar_last;
        end
        default: begin
            builder_self26 <= main_basesoc_socbushandler_axiinterface1_ar_last;
        end
    endcase
end
always @(*) begin
    builder_self27 <= 32'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self27 <= main_basesoc_socbushandler_axiinterface0_ar_payload_addr;
        end
        default: begin
            builder_self27 <= main_basesoc_socbushandler_axiinterface1_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    builder_self28 <= 2'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self28 <= main_basesoc_socbushandler_axiinterface0_ar_payload_burst;
        end
        default: begin
            builder_self28 <= main_basesoc_socbushandler_axiinterface1_ar_payload_burst;
        end
    endcase
end
always @(*) begin
    builder_self29 <= 8'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self29 <= main_basesoc_socbushandler_axiinterface0_ar_payload_len;
        end
        default: begin
            builder_self29 <= main_basesoc_socbushandler_axiinterface1_ar_payload_len;
        end
    endcase
end
always @(*) begin
    builder_self30 <= 3'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self30 <= main_basesoc_socbushandler_axiinterface0_ar_payload_size;
        end
        default: begin
            builder_self30 <= main_basesoc_socbushandler_axiinterface1_ar_payload_size;
        end
    endcase
end
always @(*) begin
    builder_self31 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self31 <= main_basesoc_socbushandler_axiinterface0_ar_payload_lock;
        end
        default: begin
            builder_self31 <= main_basesoc_socbushandler_axiinterface1_ar_payload_lock;
        end
    endcase
end
always @(*) begin
    builder_self32 <= 3'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self32 <= main_basesoc_socbushandler_axiinterface0_ar_payload_prot;
        end
        default: begin
            builder_self32 <= main_basesoc_socbushandler_axiinterface1_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    builder_self33 <= 4'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self33 <= main_basesoc_socbushandler_axiinterface0_ar_payload_cache;
        end
        default: begin
            builder_self33 <= main_basesoc_socbushandler_axiinterface1_ar_payload_cache;
        end
    endcase
end
always @(*) begin
    builder_self34 <= 4'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self34 <= main_basesoc_socbushandler_axiinterface0_ar_payload_qos;
        end
        default: begin
            builder_self34 <= main_basesoc_socbushandler_axiinterface1_ar_payload_qos;
        end
    endcase
end
always @(*) begin
    builder_self35 <= 4'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self35 <= main_basesoc_socbushandler_axiinterface0_ar_payload_region;
        end
        default: begin
            builder_self35 <= main_basesoc_socbushandler_axiinterface1_ar_payload_region;
        end
    endcase
end
always @(*) begin
    builder_self36 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self36 <= main_basesoc_socbushandler_axiinterface0_ar_param_id;
        end
        default: begin
            builder_self36 <= main_basesoc_socbushandler_axiinterface1_ar_param_id;
        end
    endcase
end
always @(*) begin
    builder_self37 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self37 <= main_basesoc_socbushandler_axiinterface0_ar_param_dest;
        end
        default: begin
            builder_self37 <= main_basesoc_socbushandler_axiinterface1_ar_param_dest;
        end
    endcase
end
always @(*) begin
    builder_self38 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self38 <= main_basesoc_socbushandler_axiinterface0_ar_param_user;
        end
        default: begin
            builder_self38 <= main_basesoc_socbushandler_axiinterface1_ar_param_user;
        end
    endcase
end
always @(*) begin
    builder_self39 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_self39 <= main_basesoc_socbushandler_axiinterface0_r_ready;
        end
        default: begin
            builder_self39 <= main_basesoc_socbushandler_axiinterface1_r_ready;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    if ((~main_crg_por_done)) begin
        main_crg_por_count <= (main_crg_por_count - 1'd1);
    end
    if (por_rst) begin
        main_crg_por_count <= 16'd65535;
    end
end

always @(posedge sys_clk) begin
    builder_wishbone2axi0_state <= builder_wishbone2axi0_next_state;
    if (main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0) begin
        main_basesoc_socbushandler_wishbone2axi0_cmd_done <= main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0;
    end
    if (main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1) begin
        main_basesoc_socbushandler_wishbone2axi0_data_done <= main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1;
    end
    builder_wishbone2axi1_state <= builder_wishbone2axi1_next_state;
    if (main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0) begin
        main_basesoc_socbushandler_wishbone2axi1_cmd_done <= main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0;
    end
    if (main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1) begin
        main_basesoc_socbushandler_wishbone2axi1_data_done <= main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1;
    end
    if (((~main_basesoc_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_basesoc_socbushandler_pipe_valid_source_ready)) begin
        main_basesoc_basesoc_socbushandler_pipe_valid_source_valid <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_valid;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_first <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_first;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_last <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_last;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_param_id <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_id;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_param_dest <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_param_user <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((main_basesoc_basesoc_socbushandler_ax_beat_valid & main_basesoc_basesoc_socbushandler_ax_beat_ready)) begin
        if (main_basesoc_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_basesoc_socbushandler_beat_count <= 1'd0;
            main_basesoc_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            main_basesoc_basesoc_socbushandler_beat_count <= (main_basesoc_basesoc_socbushandler_beat_count + 1'd1);
            if ((((main_basesoc_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((main_basesoc_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_basesoc_basesoc_socbushandler_beat_offset <= (main_basesoc_basesoc_socbushandler_beat_offset + $signed({1'd0, main_basesoc_basesoc_socbushandler_beat_size}));
            end
        end
        if (((main_basesoc_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_basesoc_basesoc_socbushandler_ax_beat_payload_addr & main_basesoc_basesoc_socbushandler_beat_wrap) == main_basesoc_basesoc_socbushandler_beat_wrap)) begin
                main_basesoc_basesoc_socbushandler_beat_offset <= (main_basesoc_basesoc_socbushandler_beat_offset - $signed({1'd0, main_basesoc_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite0_state <= builder_axi2axilite0_next_state;
    if (main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0) begin
        main_basesoc_basesoc_socbushandler_cmd_done <= main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0;
    end
    if (main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1) begin
        main_basesoc_basesoc_socbushandler_last_ar_aw_n <= main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1;
    end
    if (((~main_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_socbushandler_pipe_valid_source_ready)) begin
        main_basesoc_socbushandler_pipe_valid_source_valid <= main_basesoc_socbushandler_pipe_valid_sink_valid;
        main_basesoc_socbushandler_pipe_valid_source_first <= main_basesoc_socbushandler_pipe_valid_sink_first;
        main_basesoc_socbushandler_pipe_valid_source_last <= main_basesoc_socbushandler_pipe_valid_sink_last;
        main_basesoc_socbushandler_pipe_valid_source_payload_addr <= main_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        main_basesoc_socbushandler_pipe_valid_source_payload_burst <= main_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        main_basesoc_socbushandler_pipe_valid_source_payload_len <= main_basesoc_socbushandler_pipe_valid_sink_payload_len;
        main_basesoc_socbushandler_pipe_valid_source_payload_size <= main_basesoc_socbushandler_pipe_valid_sink_payload_size;
        main_basesoc_socbushandler_pipe_valid_source_payload_lock <= main_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        main_basesoc_socbushandler_pipe_valid_source_payload_prot <= main_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        main_basesoc_socbushandler_pipe_valid_source_payload_cache <= main_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        main_basesoc_socbushandler_pipe_valid_source_payload_qos <= main_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        main_basesoc_socbushandler_pipe_valid_source_payload_region <= main_basesoc_socbushandler_pipe_valid_sink_payload_region;
        main_basesoc_socbushandler_pipe_valid_source_param_id <= main_basesoc_socbushandler_pipe_valid_sink_param_id;
        main_basesoc_socbushandler_pipe_valid_source_param_dest <= main_basesoc_socbushandler_pipe_valid_sink_param_dest;
        main_basesoc_socbushandler_pipe_valid_source_param_user <= main_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_ready)) begin
        if (main_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_socbushandler_beat_count <= 1'd0;
            main_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            main_basesoc_socbushandler_beat_count <= (main_basesoc_socbushandler_beat_count + 1'd1);
            if ((((main_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((main_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_basesoc_socbushandler_beat_offset <= (main_basesoc_socbushandler_beat_offset + $signed({1'd0, main_basesoc_socbushandler_beat_size}));
            end
        end
        if (((main_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_basesoc_socbushandler_ax_beat_payload_addr & main_basesoc_socbushandler_beat_wrap) == main_basesoc_socbushandler_beat_wrap)) begin
                main_basesoc_socbushandler_beat_offset <= (main_basesoc_socbushandler_beat_offset - $signed({1'd0, main_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite1_state <= builder_axi2axilite1_next_state;
    if (main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0) begin
        main_basesoc_socbushandler_cmd_done <= main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0;
    end
    if (main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1) begin
        main_basesoc_socbushandler_last_ar_aw_n <= main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1;
    end
    if (((~builder_basesoc_socbushandler_pipe_valid_source_valid) | builder_basesoc_socbushandler_pipe_valid_source_ready)) begin
        builder_basesoc_socbushandler_pipe_valid_source_valid <= builder_basesoc_socbushandler_pipe_valid_sink_valid;
        builder_basesoc_socbushandler_pipe_valid_source_first <= builder_basesoc_socbushandler_pipe_valid_sink_first;
        builder_basesoc_socbushandler_pipe_valid_source_last <= builder_basesoc_socbushandler_pipe_valid_sink_last;
        builder_basesoc_socbushandler_pipe_valid_source_payload_addr <= builder_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        builder_basesoc_socbushandler_pipe_valid_source_payload_burst <= builder_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        builder_basesoc_socbushandler_pipe_valid_source_payload_len <= builder_basesoc_socbushandler_pipe_valid_sink_payload_len;
        builder_basesoc_socbushandler_pipe_valid_source_payload_size <= builder_basesoc_socbushandler_pipe_valid_sink_payload_size;
        builder_basesoc_socbushandler_pipe_valid_source_payload_lock <= builder_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        builder_basesoc_socbushandler_pipe_valid_source_payload_prot <= builder_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        builder_basesoc_socbushandler_pipe_valid_source_payload_cache <= builder_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        builder_basesoc_socbushandler_pipe_valid_source_payload_qos <= builder_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        builder_basesoc_socbushandler_pipe_valid_source_payload_region <= builder_basesoc_socbushandler_pipe_valid_sink_payload_region;
        builder_basesoc_socbushandler_pipe_valid_source_param_id <= builder_basesoc_socbushandler_pipe_valid_sink_param_id;
        builder_basesoc_socbushandler_pipe_valid_source_param_dest <= builder_basesoc_socbushandler_pipe_valid_sink_param_dest;
        builder_basesoc_socbushandler_pipe_valid_source_param_user <= builder_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_ready)) begin
        if (builder_basesoc_socbushandler_ax_beat_last) begin
            builder_basesoc_socbushandler_beat_count <= 1'd0;
            builder_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            builder_basesoc_socbushandler_beat_count <= (builder_basesoc_socbushandler_beat_count + 1'd1);
            if ((((builder_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((builder_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                builder_basesoc_socbushandler_beat_offset <= (builder_basesoc_socbushandler_beat_offset + $signed({1'd0, builder_basesoc_socbushandler_beat_size}));
            end
        end
        if (((builder_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((builder_basesoc_socbushandler_ax_beat_payload_addr & builder_basesoc_socbushandler_beat_wrap) == builder_basesoc_socbushandler_beat_wrap)) begin
                builder_basesoc_socbushandler_beat_offset <= (builder_basesoc_socbushandler_beat_offset - $signed({1'd0, builder_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite2_state <= builder_axi2axilite2_next_state;
    if (builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0) begin
        builder_basesoc_socbushandler_cmd_done <= builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0;
    end
    if (builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1) begin
        builder_basesoc_socbushandler_last_ar_aw_n <= builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1;
    end
    if (builder_rr_write_ce) begin
        case (builder_rr_write_grant)
            1'd0: begin
                if (builder_rr_write_request[1]) begin
                    builder_rr_write_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_rr_write_request[0]) begin
                    builder_rr_write_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_rr_read_ce) begin
        case (builder_rr_read_grant)
            1'd0: begin
                if (builder_rr_read_request[1]) begin
                    builder_rr_read_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_rr_read_request[0]) begin
                    builder_rr_read_grant <= 1'd0;
                end
            end
        endcase
    end
    if (((builder_aw_valid & builder_aw_ready) & (builder_b_valid & builder_b_ready))) begin
        builder_wr_lock_counter <= builder_wr_lock_counter;
    end else begin
        if (((builder_aw_valid & builder_aw_ready) & (~builder_wr_lock_full))) begin
            builder_wr_lock_counter <= (builder_wr_lock_counter + 1'd1);
        end else begin
            if (((builder_b_valid & builder_b_ready) & (~builder_wr_lock_empty))) begin
                builder_wr_lock_counter <= (builder_wr_lock_counter - 1'd1);
            end
        end
    end
    if (((builder_ar_valid & builder_ar_ready) & ((builder_r_valid & builder_r_ready) & builder_r_last))) begin
        builder_rd_lock_counter <= builder_rd_lock_counter;
    end else begin
        if (((builder_ar_valid & builder_ar_ready) & (~builder_rd_lock_full))) begin
            builder_rd_lock_counter <= (builder_rd_lock_counter + 1'd1);
        end else begin
            if ((((builder_r_valid & builder_r_ready) & builder_r_last) & (~builder_rd_lock_empty))) begin
                builder_rd_lock_counter <= (builder_rd_lock_counter - 1'd1);
            end
        end
    end
    if (builder_axirequestcounter0_empty) begin
        builder_slave_sel_reg0 <= builder_slave_sel_dec0;
    end
    if (builder_axirequestcounter1_empty) begin
        builder_slave_sel_reg1 <= builder_slave_sel_dec1;
    end
    if (((builder_aw_valid & builder_aw_ready) & (builder_b_valid & builder_b_ready))) begin
        builder_axirequestcounter0_counter <= builder_axirequestcounter0_counter;
    end else begin
        if (((builder_aw_valid & builder_aw_ready) & (~builder_axirequestcounter0_full))) begin
            builder_axirequestcounter0_counter <= (builder_axirequestcounter0_counter + 1'd1);
        end else begin
            if (((builder_b_valid & builder_b_ready) & (~builder_axirequestcounter0_empty))) begin
                builder_axirequestcounter0_counter <= (builder_axirequestcounter0_counter - 1'd1);
            end
        end
    end
    if (((builder_ar_valid & builder_ar_ready) & ((builder_r_valid & builder_r_ready) & builder_r_last))) begin
        builder_axirequestcounter1_counter <= builder_axirequestcounter1_counter;
    end else begin
        if (((builder_ar_valid & builder_ar_ready) & (~builder_axirequestcounter1_full))) begin
            builder_axirequestcounter1_counter <= (builder_axirequestcounter1_counter + 1'd1);
        end else begin
            if ((((builder_r_valid & builder_r_ready) & builder_r_last) & (~builder_axirequestcounter1_empty))) begin
                builder_axirequestcounter1_counter <= (builder_axirequestcounter1_counter - 1'd1);
            end
        end
    end
    if (builder_wr_timer_wait) begin
        if ((~builder_wr_timer_done)) begin
            builder_wr_timer_count <= (builder_wr_timer_count - 1'd1);
        end
    end else begin
        builder_wr_timer_count <= 20'd1000000;
    end
    if (builder_rd_timer_wait) begin
        if ((~builder_rd_timer_done)) begin
            builder_rd_timer_count <= (builder_rd_timer_count - 1'd1);
        end
    end else begin
        builder_rd_timer_count <= 20'd1000000;
    end
    builder_fsm0_state <= builder_fsm0_next_state;
    builder_fsm1_state <= builder_fsm1_next_state;
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    builder_basesoc_axilitesram0_state <= builder_basesoc_axilitesram0_next_state;
    if (main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0) begin
        main_basesoc_basesoc_port_adr_reg <= main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0;
    end
    if (main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1) begin
        main_basesoc_basesoc_port_dat_r_latched <= main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1;
    end
    if (main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2) begin
        main_basesoc_basesoc_last_was_read <= main_basesoc_basesoc_last_was_read_axilitesram0_next_value2;
    end
    builder_basesoc_axilitesram1_state <= builder_basesoc_axilitesram1_next_state;
    if (main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0) begin
        main_basesoc_ram_port_adr_reg <= main_basesoc_ram_port_adr_reg_axilitesram1_next_value0;
    end
    if (main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1) begin
        main_basesoc_ram_port_dat_r_latched <= main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1;
    end
    if (main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2) begin
        main_basesoc_ram_last_was_read <= main_basesoc_ram_last_was_read_axilitesram1_next_value2;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 24'd9895604;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 24'd9895604);
    end
    builder_basesoc_rs232phytx_state <= builder_basesoc_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 24'd9895604);
    end
    builder_basesoc_rs232phyrx_state <= builder_basesoc_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser[5])};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 22'd4166666;
    end
    builder_basesoc_axilite2csr_state <= builder_basesoc_axilite2csr_next_state;
    if (builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0) begin
        builder_basesoc_port_adr_reg <= builder_basesoc_port_adr_reg_axilite2csr_next_value0;
    end
    if (builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1) begin
        builder_basesoc_port_dat_r_latched <= builder_basesoc_port_dat_r_latched_axilite2csr_next_value1;
    end
    if (builder_basesoc_last_was_read_axilite2csr_next_value_ce2) begin
        builder_basesoc_last_was_read <= builder_basesoc_last_was_read_axilite2csr_next_value2;
    end
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_out0_re) begin
        main_storage[5:0] <= builder_csr_bankarray_csrbank1_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank1_out0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_load0_re) begin
        main_basesoc_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank2_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank2_load0_re;
    if (builder_csr_bankarray_csrbank2_reload0_re) begin
        main_basesoc_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank2_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank2_reload0_re;
    if (builder_csr_bankarray_csrbank2_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank2_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank2_en0_re;
    if (builder_csr_bankarray_csrbank2_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank2_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank2_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank2_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
    if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank2_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
    if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank2_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank3_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank3_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
    if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
        main_basesoc_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank3_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
    if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
        main_basesoc_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank3_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank3_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank3_rxfull_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_socbushandler_wishbone2axi0_cmd_done <= 1'd0;
        main_basesoc_socbushandler_wishbone2axi0_data_done <= 1'd0;
        main_basesoc_socbushandler_wishbone2axi1_cmd_done <= 1'd0;
        main_basesoc_socbushandler_wishbone2axi1_data_done <= 1'd0;
        main_basesoc_basesoc_last_was_read <= 1'd0;
        main_basesoc_basesoc_port_dat_r_latched <= 32'd0;
        main_basesoc_basesoc_port_adr_reg <= 15'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        main_basesoc_basesoc_socbushandler_beat_count <= 8'd0;
        main_basesoc_basesoc_socbushandler_beat_offset <= 13'd0;
        main_basesoc_basesoc_socbushandler_cmd_done <= 1'd0;
        main_basesoc_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        main_basesoc_ram_last_was_read <= 1'd0;
        main_basesoc_ram_port_dat_r_latched <= 32'd0;
        main_basesoc_ram_port_adr_reg <= 11'd0;
        main_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        main_basesoc_socbushandler_beat_count <= 8'd0;
        main_basesoc_socbushandler_beat_offset <= 13'd0;
        main_basesoc_socbushandler_cmd_done <= 1'd0;
        main_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_storage <= 6'd0;
        main_re <= 1'd0;
        main_chaser <= 6'd0;
        main_mode <= 1'd0;
        main_count <= 22'd4166666;
        builder_basesoc_last_was_read <= 1'd0;
        builder_basesoc_port_dat_r_latched <= 32'd0;
        builder_basesoc_port_adr_reg <= 14'd0;
        builder_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        builder_basesoc_socbushandler_beat_count <= 8'd0;
        builder_basesoc_socbushandler_beat_offset <= 13'd0;
        builder_basesoc_socbushandler_cmd_done <= 1'd0;
        builder_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        builder_wishbone2axi0_state <= 2'd0;
        builder_wishbone2axi1_state <= 2'd0;
        builder_axi2axilite0_state <= 2'd0;
        builder_axi2axilite1_state <= 2'd0;
        builder_axi2axilite2_state <= 2'd0;
        builder_rr_write_grant <= 1'd0;
        builder_rr_read_grant <= 1'd0;
        builder_wr_lock_counter <= 8'd0;
        builder_rd_lock_counter <= 8'd0;
        builder_slave_sel_reg0 <= 3'd0;
        builder_slave_sel_reg1 <= 3'd0;
        builder_axirequestcounter0_counter <= 8'd0;
        builder_axirequestcounter1_counter <= 8'd0;
        builder_wr_timer_count <= 20'd1000000;
        builder_rd_timer_count <= 20'd1000000;
        builder_fsm0_state <= 1'd0;
        builder_fsm1_state <= 1'd0;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_basesoc_axilitesram0_state <= 3'd0;
        builder_basesoc_axilitesram1_state <= 3'd0;
        builder_basesoc_rs232phytx_state <= 1'd0;
        builder_basesoc_rs232phyrx_state <= 1'd0;
        builder_basesoc_axilite2csr_state <= 3'd0;
    end
    builder_multiregimpl0 <= serial_rx;
    builder_multiregimpl1 <= builder_multiregimpl0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 32768-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:32767];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_ram_we[0])
		sram[main_basesoc_ram_adr][7:0] <= main_basesoc_ram_dat_w[7:0];
	if (main_basesoc_ram_we[1])
		sram[main_basesoc_ram_adr][15:8] <= main_basesoc_ram_dat_w[15:8];
	if (main_basesoc_ram_we[2])
		sram[main_basesoc_ram_adr][23:16] <= main_basesoc_ram_dat_w[23:16];
	if (main_basesoc_ram_we[3])
		sram[main_basesoc_ram_adr][31:24] <= main_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_ram_adr;
end
assign main_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 52-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:51];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance PLL of PLL Module.
//------------------------------------------------------------------------------
PLL #(
	// Parameters.
	.CLK0_IN_SEL       (1'd0),
	.CLK0_OUT_SEL      (1'd0),
	.CLK1_IN_SEL       (1'd0),
	.CLK1_OUT_SEL      (1'd0),
	.CLK2_IN_SEL       (1'd0),
	.CLK2_OUT_SEL      (1'd0),
	.CLK3_IN_SEL       (1'd0),
	.CLK3_OUT_SEL      (1'd0),
	.CLK4_IN_SEL       (1'd0),
	.CLK4_OUT_SEL      (1'd0),
	.CLK5_IN_SEL       (1'd0),
	.CLK5_OUT_SEL      (1'd0),
	.CLKFB_SEL         ("INTERNAL"),
	.CLKOUT0_DT_DIR    (1'd1),
	.CLKOUT0_DT_STEP   (1'd0),
	.CLKOUT0_EN        ("TRUE"),
	.CLKOUT0_PE_COARSE (1'd0),
	.CLKOUT0_PE_FINE   (1'd0),
	.CLKOUT1_DT_DIR    (1'd1),
	.CLKOUT1_DT_STEP   (1'd0),
	.CLKOUT1_EN        ("FALSE"),
	.CLKOUT1_PE_COARSE (1'd0),
	.CLKOUT1_PE_FINE   (1'd0),
	.CLKOUT2_DT_DIR    (1'd1),
	.CLKOUT2_DT_STEP   (1'd0),
	.CLKOUT2_EN        ("FALSE"),
	.CLKOUT2_PE_COARSE (1'd0),
	.CLKOUT2_PE_FINE   (1'd0),
	.CLKOUT3_DT_DIR    (1'd1),
	.CLKOUT3_DT_STEP   (1'd0),
	.CLKOUT3_EN        ("FALSE"),
	.CLKOUT3_PE_COARSE (1'd0),
	.CLKOUT3_PE_FINE   (1'd0),
	.CLKOUT4_EN        ("FALSE"),
	.CLKOUT4_PE_COARSE (1'd0),
	.CLKOUT4_PE_FINE   (1'd0),
	.CLKOUT5_EN        ("FALSE"),
	.CLKOUT5_PE_COARSE (1'd0),
	.CLKOUT5_PE_FINE   (1'd0),
	.CLKOUT6_EN        ("FALSE"),
	.CLKOUT6_PE_COARSE (1'd0),
	.CLKOUT6_PE_FINE   (1'd0),
	.DE0_EN            ("FALSE"),
	.DE1_EN            ("FALSE"),
	.DE2_EN            ("FALSE"),
	.DE3_EN            ("FALSE"),
	.DE4_EN            ("FALSE"),
	.DE5_EN            ("FALSE"),
	.DE6_EN            ("FALSE"),
	.DYN_DPA_EN        ("FALSE"),
	.DYN_DT0_SEL       ("FALSE"),
	.DYN_DT1_SEL       ("FALSE"),
	.DYN_DT2_SEL       ("FALSE"),
	.DYN_DT3_SEL       ("FALSE"),
	.DYN_FBDIV_SEL     ("FALSE"),
	.DYN_ICP_SEL       ("FALSE"),
	.DYN_IDIV_SEL      ("FALSE"),
	.DYN_LPF_SEL       ("FALSE"),
	.DYN_ODIV0_SEL     ("FALSE"),
	.DYN_ODIV1_SEL     ("FALSE"),
	.DYN_ODIV2_SEL     ("FALSE"),
	.DYN_ODIV3_SEL     ("FALSE"),
	.DYN_ODIV4_SEL     ("FALSE"),
	.DYN_ODIV5_SEL     ("FALSE"),
	.DYN_ODIV6_SEL     ("FALSE"),
	.DYN_PE0_SEL       ("FALSE"),
	.DYN_PE1_SEL       ("FALSE"),
	.DYN_PE2_SEL       ("FALSE"),
	.DYN_PE3_SEL       ("FALSE"),
	.DYN_PE4_SEL       ("FALSE"),
	.DYN_PE5_SEL       ("FALSE"),
	.DYN_PE6_SEL       ("FALSE"),
	.FBDIV_SEL         (1'd1),
	.FCLKIN            ("50.0"),
	.IDIV_SEL          (1'd1),
	.MDIV_FRAC_SEL     (1'd0),
	.MDIV_SEL          (5'd16),
	.ODIV0_FRAC_SEL    (1'd0),
	.ODIV0_SEL         (5'd16),
	.ODIV1_SEL         (4'd8),
	.ODIV2_SEL         (4'd8),
	.ODIV3_SEL         (4'd8),
	.ODIV4_SEL         (4'd8),
	.ODIV5_SEL         (4'd8),
	.ODIV6_SEL         (4'd8),
	.RESET_I_EN        ("FALSE"),
	.RESET_O_EN        ("FALSE"),
	.SSC_EN            ("FALSE")
) PLL (
	// Inputs.
	.CLKFB         (1'd0),
	.CLKIN         (main_crg_clkin),
	.DT0           (4'd0),
	.DT1           (4'd0),
	.DT2           (4'd0),
	.DT3           (4'd0),
	.ENCLK0        (1'd1),
	.ENCLK1        (1'd1),
	.ENCLK2        (1'd1),
	.ENCLK3        (1'd1),
	.ENCLK4        (1'd1),
	.ENCLK5        (1'd1),
	.ENCLK6        (1'd1),
	.FBDSEL        (6'd0),
	.ICPSEL        (6'd0),
	.IDSEL         (6'd0),
	.LPFCAP        (2'd0),
	.LPFRES        (3'd0),
	.MDSEL         (7'd0),
	.MDSEL_FRAC    (3'd0),
	.ODSEL0        (7'd0),
	.ODSEL0_FRAC   (3'd0),
	.ODSEL1        (7'd0),
	.ODSEL2        (7'd0),
	.ODSEL3        (7'd0),
	.ODSEL4        (7'd0),
	.ODSEL5        (7'd0),
	.ODSEL6        (7'd0),
	.PLLPWD        (1'd0),
	.PSDIR         (1'd0),
	.PSPULSE       (1'd0),
	.PSSEL         (3'd0),
	.RESET         (main_crg_reset),
	.RESET_I       (1'd0),
	.RESET_O       (1'd0),
	.SSCMDSEL      (7'd0),
	.SSCMDSEL_FRAC (3'd0),
	.SSCON         (1'd0),
	.SSCPOL        (1'd0),

	// Outputs.
	.CLKFBOUT      (builder_basesoc_gw5apll6),
	.CLKOUT0       (main_crg_clkout),
	.CLKOUT1       (builder_basesoc_gw5apll0),
	.CLKOUT2       (builder_basesoc_gw5apll1),
	.CLKOUT3       (builder_basesoc_gw5apll2),
	.CLKOUT4       (builder_basesoc_gw5apll3),
	.CLKOUT5       (builder_basesoc_gw5apll4),
	.CLKOUT6       (builder_basesoc_gw5apll5),
	.LOCK          (main_crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (main_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (main_basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (main_basesoc_dbus_err),
	.externalInterruptArray (main_basesoc_interrupt),
	.externalResetVector    (main_basesoc_vexriscv),
	.iBusWishbone_ACK       (main_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (main_basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (main_basesoc_ibus_err),
	.reset                  ((sys_rst | main_basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (main_basesoc_dbus_adr),
	.dBusWishbone_BTE       (main_basesoc_dbus_bte),
	.dBusWishbone_CTI       (main_basesoc_dbus_cti),
	.dBusWishbone_CYC       (main_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (main_basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (main_basesoc_dbus_sel),
	.dBusWishbone_STB       (main_basesoc_dbus_stb),
	.dBusWishbone_WE        (main_basesoc_dbus_we),
	.iBusWishbone_ADR       (main_basesoc_ibus_adr),
	.iBusWishbone_BTE       (main_basesoc_ibus_bte),
	.iBusWishbone_CTI       (main_basesoc_ibus_cti),
	.iBusWishbone_CYC       (main_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (main_basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (main_basesoc_ibus_sel),
	.iBusWishbone_STB       (main_basesoc_ibus_stb),
	.iBusWishbone_WE        (main_basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Instance DFFP of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP(
	// Inputs.
	.CLK    (sys_clk),
	.D      (1'd0),
	.PRESET ((~main_crg_locked)),

	// Outputs.
	.Q      (builder_rst1)
);

//------------------------------------------------------------------------------
// Instance DFFP_1 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_1(
	// Inputs.
	.CLK    (sys_clk),
	.D      (builder_rst1),
	.PRESET ((~main_crg_locked)),

	// Outputs.
	.Q      (sys_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-09-28 19:34:35.
//------------------------------------------------------------------------------

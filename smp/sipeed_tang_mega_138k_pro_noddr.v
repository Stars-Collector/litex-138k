// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_mega_138k_pro.v
// Device     : GW5AST-LV138FPG676AES
// LiteX sha1 : c1225736a
// Date       : 2024-10-25 17:06:59
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sipeed_tang_mega_138k_pro (
    input  wire          clk50,
    input  wire          rst,
    input  wire          serial_rx,
    output reg           serial_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GW5APLL)
│    │    └─── [PLL]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscvSMP)
│    └─── [VexRiscvLitexSmpCluster_Cc1_Iw32Is4096Iy1_Dw32Ds4096Dy1_ITs4DTs4_Ood_Wm_Hb1]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [DFFP]
└─── [DFFP]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [14:0] basesoc_basesoc_adr;
reg           basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] basesoc_basesoc_dat_r;
reg           basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_basesoc_ram_bus_adr;
wire    [1:0] basesoc_basesoc_ram_bus_bte;
wire    [2:0] basesoc_basesoc_ram_bus_cti;
wire          basesoc_basesoc_ram_bus_cyc;
wire   [31:0] basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] basesoc_basesoc_ram_bus_dat_w;
reg           basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] basesoc_basesoc_ram_bus_sel;
wire          basesoc_basesoc_ram_bus_stb;
wire          basesoc_basesoc_ram_bus_we;
wire          basesoc_bus_error;
reg    [31:0] basesoc_bus_errors = 32'd0;
reg           basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_bus_errors_status;
wire          basesoc_bus_errors_we;
wire          basesoc_clintbus_ack;
wire   [29:0] basesoc_clintbus_adr;
wire    [1:0] basesoc_clintbus_bte;
wire    [2:0] basesoc_clintbus_cti;
wire          basesoc_clintbus_cyc;
wire   [31:0] basesoc_clintbus_dat_r;
wire   [31:0] basesoc_clintbus_dat_w;
reg           basesoc_clintbus_err = 1'd0;
wire    [3:0] basesoc_clintbus_sel;
wire          basesoc_clintbus_stb;
wire          basesoc_clintbus_we;
wire          basesoc_cpu_rst;
reg    [31:0] basesoc_interrupt = 32'd0;
reg           basesoc_jtag_capture = 1'd0;
reg           basesoc_jtag_clk = 1'd0;
reg           basesoc_jtag_enable = 1'd0;
reg           basesoc_jtag_reset = 1'd0;
reg           basesoc_jtag_shift = 1'd0;
reg           basesoc_jtag_tdi = 1'd0;
wire          basesoc_jtag_tdo;
reg           basesoc_jtag_update = 1'd0;
wire          basesoc_pbus_ack;
wire   [29:0] basesoc_pbus_adr;
wire    [1:0] basesoc_pbus_bte;
wire    [2:0] basesoc_pbus_cti;
wire          basesoc_pbus_cyc;
wire   [31:0] basesoc_pbus_dat_r;
wire   [31:0] basesoc_pbus_dat_w;
wire          basesoc_pbus_err;
wire    [3:0] basesoc_pbus_sel;
wire          basesoc_pbus_stb;
wire          basesoc_pbus_we;
wire          basesoc_plicbus_ack;
wire   [29:0] basesoc_plicbus_adr;
wire    [1:0] basesoc_plicbus_bte;
wire    [2:0] basesoc_plicbus_cti;
wire          basesoc_plicbus_cyc;
wire   [31:0] basesoc_plicbus_dat_r;
wire   [31:0] basesoc_plicbus_dat_w;
reg           basesoc_plicbus_err = 1'd0;
wire    [3:0] basesoc_plicbus_sel;
wire          basesoc_plicbus_stb;
wire          basesoc_plicbus_we;
wire   [10:0] basesoc_ram_adr;
reg           basesoc_ram_adr_burst = 1'd0;
reg           basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_ram_bus_ram_bus_adr;
wire    [1:0] basesoc_ram_bus_ram_bus_bte;
wire    [2:0] basesoc_ram_bus_ram_bus_cti;
wire          basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_w;
reg           basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] basesoc_ram_bus_ram_bus_sel;
wire          basesoc_ram_bus_ram_bus_stb;
wire          basesoc_ram_bus_ram_bus_we;
wire   [31:0] basesoc_ram_dat_r;
wire   [31:0] basesoc_ram_dat_w;
reg     [3:0] basesoc_ram_we = 4'd0;
wire          basesoc_reset;
reg           basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_reset_storage = 2'd0;
reg     [3:0] basesoc_rx_count = 4'd0;
reg     [3:0] basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_rx_data = 8'd0;
reg     [7:0] basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_rx_enable = 1'd0;
reg    [31:0] basesoc_rx_phase = 32'd0;
wire          basesoc_rx_rx;
reg           basesoc_rx_rx_d = 1'd0;
reg           basesoc_rx_source_first = 1'd0;
reg           basesoc_rx_source_last = 1'd0;
reg     [7:0] basesoc_rx_source_payload_data = 8'd0;
wire          basesoc_rx_source_ready;
reg           basesoc_rx_source_valid = 1'd0;
reg           basesoc_rx_tick = 1'd0;
reg           basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_scratch_storage = 32'd305419896;
reg           basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           basesoc_soc_rst = 1'd0;
reg           basesoc_timer_en_re = 1'd0;
reg           basesoc_timer_en_storage = 1'd0;
reg           basesoc_timer_enable_re = 1'd0;
reg           basesoc_timer_enable_storage = 1'd0;
wire          basesoc_timer_irq;
reg           basesoc_timer_load_re = 1'd0;
reg    [31:0] basesoc_timer_load_storage = 32'd0;
reg           basesoc_timer_pending_r = 1'd0;
reg           basesoc_timer_pending_re = 1'd0;
reg           basesoc_timer_pending_status = 1'd0;
wire          basesoc_timer_pending_we;
reg           basesoc_timer_reload_re = 1'd0;
reg    [31:0] basesoc_timer_reload_storage = 32'd0;
reg           basesoc_timer_status_re = 1'd0;
reg           basesoc_timer_status_status = 1'd0;
wire          basesoc_timer_status_we;
reg           basesoc_timer_update_value_re = 1'd0;
reg           basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] basesoc_timer_value = 32'd0;
reg           basesoc_timer_value_re = 1'd0;
reg    [31:0] basesoc_timer_value_status = 32'd0;
wire          basesoc_timer_value_we;
wire          basesoc_timer_zero0;
wire          basesoc_timer_zero1;
wire          basesoc_timer_zero2;
reg           basesoc_timer_zero_clear = 1'd0;
reg           basesoc_timer_zero_pending = 1'd0;
wire          basesoc_timer_zero_status;
wire          basesoc_timer_zero_trigger;
reg           basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] basesoc_tx_count = 4'd0;
reg     [3:0] basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_tx_data = 8'd0;
reg     [7:0] basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_tx_enable = 1'd0;
reg    [31:0] basesoc_tx_phase = 32'd0;
wire          basesoc_tx_sink_first;
wire          basesoc_tx_sink_last;
wire    [7:0] basesoc_tx_sink_payload_data;
reg           basesoc_tx_sink_ready = 1'd0;
wire          basesoc_tx_sink_valid;
reg           basesoc_tx_tick = 1'd0;
reg           basesoc_uart_enable_re = 1'd0;
reg     [1:0] basesoc_uart_enable_storage = 2'd0;
wire          basesoc_uart_irq;
reg     [1:0] basesoc_uart_pending_r = 2'd0;
reg           basesoc_uart_pending_re = 1'd0;
reg     [1:0] basesoc_uart_pending_status = 2'd0;
wire          basesoc_uart_pending_we;
wire          basesoc_uart_rx0;
wire          basesoc_uart_rx1;
wire          basesoc_uart_rx2;
reg           basesoc_uart_rx_clear = 1'd0;
reg     [3:0] basesoc_uart_rx_fifo_consume = 4'd0;
wire          basesoc_uart_rx_fifo_do_read;
wire          basesoc_uart_rx_fifo_fifo_in_first;
wire          basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          basesoc_uart_rx_fifo_fifo_out_first;
wire          basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_rx_fifo_level1;
reg     [3:0] basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_rx_fifo_rdport_dat_r;
wire          basesoc_uart_rx_fifo_rdport_re;
wire          basesoc_uart_rx_fifo_re;
reg           basesoc_uart_rx_fifo_readable = 1'd0;
reg           basesoc_uart_rx_fifo_replace = 1'd0;
wire          basesoc_uart_rx_fifo_sink_first;
wire          basesoc_uart_rx_fifo_sink_last;
wire    [7:0] basesoc_uart_rx_fifo_sink_payload_data;
wire          basesoc_uart_rx_fifo_sink_ready;
wire          basesoc_uart_rx_fifo_sink_valid;
wire          basesoc_uart_rx_fifo_source_first;
wire          basesoc_uart_rx_fifo_source_last;
wire    [7:0] basesoc_uart_rx_fifo_source_payload_data;
wire          basesoc_uart_rx_fifo_source_ready;
wire          basesoc_uart_rx_fifo_source_valid;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_dout;
wire          basesoc_uart_rx_fifo_syncfifo_re;
wire          basesoc_uart_rx_fifo_syncfifo_readable;
wire          basesoc_uart_rx_fifo_syncfifo_we;
wire          basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_w;
wire          basesoc_uart_rx_fifo_wrport_we;
reg           basesoc_uart_rx_pending = 1'd0;
wire          basesoc_uart_rx_status;
wire          basesoc_uart_rx_trigger;
reg           basesoc_uart_rx_trigger_d = 1'd0;
reg           basesoc_uart_rxempty_re = 1'd0;
wire          basesoc_uart_rxempty_status;
wire          basesoc_uart_rxempty_we;
reg           basesoc_uart_rxfull_re = 1'd0;
wire          basesoc_uart_rxfull_status;
wire          basesoc_uart_rxfull_we;
wire    [7:0] basesoc_uart_rxtx_r;
reg           basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] basesoc_uart_rxtx_w;
reg           basesoc_uart_rxtx_we = 1'd0;
reg           basesoc_uart_status_re = 1'd0;
reg     [1:0] basesoc_uart_status_status = 2'd0;
wire          basesoc_uart_status_we;
wire          basesoc_uart_tx0;
wire          basesoc_uart_tx1;
wire          basesoc_uart_tx2;
reg           basesoc_uart_tx_clear = 1'd0;
reg     [3:0] basesoc_uart_tx_fifo_consume = 4'd0;
wire          basesoc_uart_tx_fifo_do_read;
wire          basesoc_uart_tx_fifo_fifo_in_first;
wire          basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          basesoc_uart_tx_fifo_fifo_out_first;
wire          basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_tx_fifo_level1;
reg     [3:0] basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_tx_fifo_rdport_dat_r;
wire          basesoc_uart_tx_fifo_rdport_re;
wire          basesoc_uart_tx_fifo_re;
reg           basesoc_uart_tx_fifo_readable = 1'd0;
reg           basesoc_uart_tx_fifo_replace = 1'd0;
reg           basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] basesoc_uart_tx_fifo_sink_payload_data;
wire          basesoc_uart_tx_fifo_sink_ready;
wire          basesoc_uart_tx_fifo_sink_valid;
wire          basesoc_uart_tx_fifo_source_first;
wire          basesoc_uart_tx_fifo_source_last;
wire    [7:0] basesoc_uart_tx_fifo_source_payload_data;
wire          basesoc_uart_tx_fifo_source_ready;
wire          basesoc_uart_tx_fifo_source_valid;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_dout;
wire          basesoc_uart_tx_fifo_syncfifo_re;
wire          basesoc_uart_tx_fifo_syncfifo_readable;
wire          basesoc_uart_tx_fifo_syncfifo_we;
wire          basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_w;
wire          basesoc_uart_tx_fifo_wrport_we;
reg           basesoc_uart_tx_pending = 1'd0;
wire          basesoc_uart_tx_status;
wire          basesoc_uart_tx_trigger;
reg           basesoc_uart_tx_trigger_d = 1'd0;
reg           basesoc_uart_txempty_re = 1'd0;
wire          basesoc_uart_txempty_status;
wire          basesoc_uart_txempty_we;
reg           basesoc_uart_txfull_re = 1'd0;
wire          basesoc_uart_txfull_status;
wire          basesoc_uart_txfull_we;
wire          basesoc_uart_uart_sink_first;
wire          basesoc_uart_uart_sink_last;
wire    [7:0] basesoc_uart_uart_sink_payload_data;
wire          basesoc_uart_uart_sink_ready;
wire          basesoc_uart_uart_sink_valid;
wire          basesoc_uart_uart_source_first;
wire          basesoc_uart_uart_source_last;
wire    [7:0] basesoc_uart_uart_source_payload_data;
wire          basesoc_uart_uart_source_ready;
wire          basesoc_uart_uart_source_valid;
reg    [19:0] count = 20'd1000000;
wire          crg_clkin;
wire          crg_clkout;
wire          crg_locked;
reg    [15:0] crg_por_count = 16'd65535;
wire          crg_por_done;
wire          crg_reset;
reg           crg_rst = 1'd0;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire          csr_bankarray_csrbank1_en0_r;
reg           csr_bankarray_csrbank1_en0_re = 1'd0;
wire          csr_bankarray_csrbank1_en0_w;
reg           csr_bankarray_csrbank1_en0_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_enable0_r;
reg           csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_enable0_w;
reg           csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_pending_r;
reg           csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_pending_w;
reg           csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_status_r;
reg           csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_status_w;
reg           csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_load0_r;
reg           csr_bankarray_csrbank1_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_load0_w;
reg           csr_bankarray_csrbank1_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_reload0_r;
reg           csr_bankarray_csrbank1_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_reload0_w;
reg           csr_bankarray_csrbank1_reload0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire          csr_bankarray_csrbank1_update_value0_r;
reg           csr_bankarray_csrbank1_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank1_update_value0_w;
reg           csr_bankarray_csrbank1_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_value_r;
reg           csr_bankarray_csrbank1_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_value_w;
reg           csr_bankarray_csrbank1_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_enable0_r;
reg           csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_enable0_w;
reg           csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_pending_r;
reg           csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_pending_w;
reg           csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_status_r;
reg           csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_status_w;
reg           csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank2_rxempty_r;
reg           csr_bankarray_csrbank2_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank2_rxempty_w;
reg           csr_bankarray_csrbank2_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank2_rxfull_r;
reg           csr_bankarray_csrbank2_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank2_rxfull_w;
reg           csr_bankarray_csrbank2_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire          csr_bankarray_csrbank2_txempty_r;
reg           csr_bankarray_csrbank2_txempty_re = 1'd0;
wire          csr_bankarray_csrbank2_txempty_w;
reg           csr_bankarray_csrbank2_txempty_we = 1'd0;
wire          csr_bankarray_csrbank2_txfull_r;
reg           csr_bankarray_csrbank2_txfull_re = 1'd0;
wire          csr_bankarray_csrbank2_txfull_w;
reg           csr_bankarray_csrbank2_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_re;
wire          csr_bankarray_interface2_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
wire          done;
reg           error = 1'd0;
wire          grant;
wire          gw5apll0;
wire          gw5apll1;
wire          gw5apll2;
wire          gw5apll3;
wire          gw5apll4;
wire          gw5apll5;
wire          gw5apll6;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg           interface1_re = 1'd0;
reg           interface1_we = 1'd0;
reg           multiregimpl0 = 1'd0;
reg           multiregimpl1 = 1'd0;
reg           next_state = 1'd0;
wire          por_clk;
reg           por_rst = 1'd0;
wire          request;
reg           rs232phyrx_next_state = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg           rs232phytx_state = 1'd0;
wire          rst1;
reg    [29:0] self0 = 30'd0;
reg    [31:0] self1 = 32'd0;
reg     [3:0] self2 = 4'd0;
reg           self3 = 1'd0;
reg           self4 = 1'd0;
reg           self5 = 1'd0;
reg     [2:0] self6 = 3'd0;
reg     [1:0] self7 = 2'd0;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [4:0] slave_sel = 5'd0;
reg     [4:0] slave_sel_r = 5'd0;
reg           state = 1'd0;
wire          sys_clk;
wire          sys_rst;
wire          wait_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_reset = (basesoc_soc_rst | basesoc_cpu_rst);
always @(*) begin
    crg_rst <= 1'd0;
    if (basesoc_soc_rst) begin
        crg_rst <= 1'd1;
    end
end
assign basesoc_bus_error = error;
always @(*) begin
    basesoc_interrupt <= 32'd0;
    basesoc_interrupt[2] <= basesoc_timer_irq;
    basesoc_interrupt[1] <= basesoc_uart_irq;
end
assign por_clk = clk50;
assign crg_por_done = (crg_por_count == 1'd0);
assign crg_reset = ((~crg_por_done) | rst);
assign crg_clkin = clk50;
assign sys_clk = crg_clkout;
assign shared_adr = self0;
assign shared_dat_w = self1;
assign shared_sel = self2;
assign shared_cyc = self3;
assign shared_stb = self4;
assign shared_we = self5;
assign shared_cti = self6;
assign shared_bte = self7;
assign basesoc_pbus_dat_r = shared_dat_r;
assign basesoc_pbus_ack = (shared_ack & (grant == 1'd0));
assign basesoc_pbus_err = (shared_err & (grant == 1'd0));
assign request = {basesoc_pbus_cyc};
assign grant = 1'd0;
always @(*) begin
    slave_sel <= 5'd0;
    slave_sel[0] <= (shared_adr[29:20] == 10'd963);
    slave_sel[1] <= (shared_adr[29:14] == 16'd61441);
    slave_sel[2] <= (shared_adr[29:15] == 1'd0);
    slave_sel[3] <= (shared_adr[29:11] == 16'd32768);
    slave_sel[4] <= (shared_adr[29:14] == 16'd61440);
end
assign basesoc_plicbus_adr = shared_adr;
assign basesoc_plicbus_dat_w = shared_dat_w;
assign basesoc_plicbus_sel = shared_sel;
assign basesoc_plicbus_stb = shared_stb;
assign basesoc_plicbus_we = shared_we;
assign basesoc_plicbus_cti = shared_cti;
assign basesoc_plicbus_bte = shared_bte;
assign basesoc_clintbus_adr = shared_adr;
assign basesoc_clintbus_dat_w = shared_dat_w;
assign basesoc_clintbus_sel = shared_sel;
assign basesoc_clintbus_stb = shared_stb;
assign basesoc_clintbus_we = shared_we;
assign basesoc_clintbus_cti = shared_cti;
assign basesoc_clintbus_bte = shared_bte;
assign basesoc_basesoc_ram_bus_adr = shared_adr;
assign basesoc_basesoc_ram_bus_dat_w = shared_dat_w;
assign basesoc_basesoc_ram_bus_sel = shared_sel;
assign basesoc_basesoc_ram_bus_stb = shared_stb;
assign basesoc_basesoc_ram_bus_we = shared_we;
assign basesoc_basesoc_ram_bus_cti = shared_cti;
assign basesoc_basesoc_ram_bus_bte = shared_bte;
assign basesoc_ram_bus_ram_bus_adr = shared_adr;
assign basesoc_ram_bus_ram_bus_dat_w = shared_dat_w;
assign basesoc_ram_bus_ram_bus_sel = shared_sel;
assign basesoc_ram_bus_ram_bus_stb = shared_stb;
assign basesoc_ram_bus_ram_bus_we = shared_we;
assign basesoc_ram_bus_ram_bus_cti = shared_cti;
assign basesoc_ram_bus_ram_bus_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign basesoc_plicbus_cyc = (shared_cyc & slave_sel[0]);
assign basesoc_clintbus_cyc = (shared_cyc & slave_sel[1]);
assign basesoc_basesoc_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_ram_bus_ram_bus_cyc = (shared_cyc & slave_sel[3]);
assign interface0_cyc = (shared_cyc & slave_sel[4]);
assign shared_err = ((((basesoc_plicbus_err | basesoc_clintbus_err) | basesoc_basesoc_ram_bus_err) | basesoc_ram_bus_ram_bus_err) | interface0_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    shared_ack <= 1'd0;
    shared_dat_r <= 32'd0;
    shared_ack <= ((((basesoc_plicbus_ack | basesoc_clintbus_ack) | basesoc_basesoc_ram_bus_ack) | basesoc_ram_bus_ram_bus_ack) | interface0_ack);
    shared_dat_r <= ((((({32{slave_sel_r[0]}} & basesoc_plicbus_dat_r) | ({32{slave_sel_r[1]}} & basesoc_clintbus_dat_r)) | ({32{slave_sel_r[2]}} & basesoc_basesoc_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_ram_bus_ram_bus_dat_r)) | ({32{slave_sel_r[4]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
        shared_ack <= 1'd1;
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign basesoc_bus_errors_status = basesoc_bus_errors;
assign basesoc_basesoc_adr = basesoc_basesoc_ram_bus_adr[14:0];
assign basesoc_basesoc_ram_bus_dat_r = basesoc_basesoc_dat_r;
always @(*) begin
    basesoc_ram_we <= 4'd0;
    basesoc_ram_we[0] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[0]);
    basesoc_ram_we[1] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[1]);
    basesoc_ram_we[2] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[2]);
    basesoc_ram_we[3] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[3]);
end
assign basesoc_ram_adr = basesoc_ram_bus_ram_bus_adr[10:0];
assign basesoc_ram_bus_ram_bus_dat_r = basesoc_ram_dat_r;
assign basesoc_ram_dat_w = basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    basesoc_tx_enable <= 1'd0;
    basesoc_tx_sink_ready <= 1'd0;
    rs232phytx_next_state <= 1'd0;
    rs232phytx_next_state <= rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            basesoc_tx_enable <= 1'd1;
            if (basesoc_tx_tick) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= basesoc_tx_data;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_count_rs232phytx_next_value0 <= (basesoc_tx_count + 1'd1);
                basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, basesoc_tx_data[7:1]};
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((basesoc_tx_count == 4'd9)) begin
                    basesoc_tx_sink_ready <= 1'd1;
                    rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (basesoc_tx_sink_valid) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= basesoc_tx_sink_payload_data;
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    basesoc_rx_enable <= 1'd0;
    basesoc_rx_source_payload_data <= 8'd0;
    basesoc_rx_source_valid <= 1'd0;
    rs232phyrx_next_state <= 1'd0;
    rs232phyrx_next_state <= rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            basesoc_rx_enable <= 1'd1;
            if (basesoc_rx_tick) begin
                basesoc_rx_count_rs232phyrx_next_value0 <= (basesoc_rx_count + 1'd1);
                basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                basesoc_rx_data_rs232phyrx_next_value1 <= {basesoc_rx_rx, basesoc_rx_data[7:1]};
                basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((basesoc_rx_count == 4'd9)) begin
                    basesoc_rx_source_valid <= (basesoc_rx_rx == 1'd1);
                    basesoc_rx_source_payload_data <= basesoc_rx_data;
                    rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((basesoc_rx_rx == 1'd0) & (basesoc_rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_uart_uart_sink_valid = basesoc_rx_source_valid;
assign basesoc_rx_source_ready = basesoc_uart_uart_sink_ready;
assign basesoc_uart_uart_sink_first = basesoc_rx_source_first;
assign basesoc_uart_uart_sink_last = basesoc_rx_source_last;
assign basesoc_uart_uart_sink_payload_data = basesoc_rx_source_payload_data;
assign basesoc_tx_sink_valid = basesoc_uart_uart_source_valid;
assign basesoc_uart_uart_source_ready = basesoc_tx_sink_ready;
assign basesoc_tx_sink_first = basesoc_uart_uart_source_first;
assign basesoc_tx_sink_last = basesoc_uart_uart_source_last;
assign basesoc_tx_sink_payload_data = basesoc_uart_uart_source_payload_data;
assign basesoc_uart_tx_fifo_sink_valid = basesoc_uart_rxtx_re;
assign basesoc_uart_tx_fifo_sink_payload_data = basesoc_uart_rxtx_r;
assign basesoc_uart_uart_source_valid = basesoc_uart_tx_fifo_source_valid;
assign basesoc_uart_tx_fifo_source_ready = basesoc_uart_uart_source_ready;
assign basesoc_uart_uart_source_first = basesoc_uart_tx_fifo_source_first;
assign basesoc_uart_uart_source_last = basesoc_uart_tx_fifo_source_last;
assign basesoc_uart_uart_source_payload_data = basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_uart_txfull_status = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_txempty_status = (~basesoc_uart_tx_fifo_source_valid);
assign basesoc_uart_tx_trigger = basesoc_uart_tx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_valid = basesoc_uart_uart_sink_valid;
assign basesoc_uart_uart_sink_ready = basesoc_uart_rx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_first = basesoc_uart_uart_sink_first;
assign basesoc_uart_rx_fifo_sink_last = basesoc_uart_uart_sink_last;
assign basesoc_uart_rx_fifo_sink_payload_data = basesoc_uart_uart_sink_payload_data;
assign basesoc_uart_rxtx_w = basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_uart_rx_fifo_source_ready = (basesoc_uart_rx_clear | (1'd0 & basesoc_uart_rxtx_we));
assign basesoc_uart_rxempty_status = (~basesoc_uart_rx_fifo_source_valid);
assign basesoc_uart_rxfull_status = (~basesoc_uart_rx_fifo_sink_ready);
assign basesoc_uart_rx_trigger = basesoc_uart_rx_fifo_source_valid;
assign basesoc_uart_tx0 = basesoc_uart_tx_status;
assign basesoc_uart_tx1 = basesoc_uart_tx_pending;
always @(*) begin
    basesoc_uart_tx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[0])) begin
        basesoc_uart_tx_clear <= 1'd1;
    end
end
assign basesoc_uart_rx0 = basesoc_uart_rx_status;
assign basesoc_uart_rx1 = basesoc_uart_rx_pending;
always @(*) begin
    basesoc_uart_rx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[1])) begin
        basesoc_uart_rx_clear <= 1'd1;
    end
end
assign basesoc_uart_irq = ((basesoc_uart_pending_status[0] & basesoc_uart_enable_storage[0]) | (basesoc_uart_pending_status[1] & basesoc_uart_enable_storage[1]));
assign basesoc_uart_tx_status = basesoc_uart_tx_trigger;
assign basesoc_uart_rx_status = basesoc_uart_rx_trigger;
assign basesoc_uart_tx_fifo_syncfifo_din = {basesoc_uart_tx_fifo_fifo_in_last, basesoc_uart_tx_fifo_fifo_in_first, basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_uart_tx_fifo_fifo_out_last, basesoc_uart_tx_fifo_fifo_out_first, basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_uart_tx_fifo_sink_ready = basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_uart_tx_fifo_syncfifo_we = basesoc_uart_tx_fifo_sink_valid;
assign basesoc_uart_tx_fifo_fifo_in_first = basesoc_uart_tx_fifo_sink_first;
assign basesoc_uart_tx_fifo_fifo_in_last = basesoc_uart_tx_fifo_sink_last;
assign basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_uart_tx_fifo_source_valid = basesoc_uart_tx_fifo_readable;
assign basesoc_uart_tx_fifo_source_first = basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_uart_tx_fifo_source_last = basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_uart_tx_fifo_source_payload_data = basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_uart_tx_fifo_re = basesoc_uart_tx_fifo_source_ready;
assign basesoc_uart_tx_fifo_syncfifo_re = (basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_uart_tx_fifo_readable) | basesoc_uart_tx_fifo_re));
assign basesoc_uart_tx_fifo_level1 = (basesoc_uart_tx_fifo_level0 + basesoc_uart_tx_fifo_readable);
always @(*) begin
    basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_tx_fifo_replace) begin
        basesoc_uart_tx_fifo_wrport_adr <= (basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_tx_fifo_wrport_adr <= basesoc_uart_tx_fifo_produce;
    end
end
assign basesoc_uart_tx_fifo_wrport_dat_w = basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_uart_tx_fifo_wrport_we = (basesoc_uart_tx_fifo_syncfifo_we & (basesoc_uart_tx_fifo_syncfifo_writable | basesoc_uart_tx_fifo_replace));
assign basesoc_uart_tx_fifo_do_read = (basesoc_uart_tx_fifo_syncfifo_readable & basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_uart_tx_fifo_rdport_adr = basesoc_uart_tx_fifo_consume;
assign basesoc_uart_tx_fifo_syncfifo_dout = basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_uart_tx_fifo_rdport_re = basesoc_uart_tx_fifo_do_read;
assign basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_uart_rx_fifo_syncfifo_din = {basesoc_uart_rx_fifo_fifo_in_last, basesoc_uart_rx_fifo_fifo_in_first, basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_uart_rx_fifo_fifo_out_last, basesoc_uart_rx_fifo_fifo_out_first, basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_uart_rx_fifo_sink_ready = basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_uart_rx_fifo_syncfifo_we = basesoc_uart_rx_fifo_sink_valid;
assign basesoc_uart_rx_fifo_fifo_in_first = basesoc_uart_rx_fifo_sink_first;
assign basesoc_uart_rx_fifo_fifo_in_last = basesoc_uart_rx_fifo_sink_last;
assign basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_uart_rx_fifo_source_valid = basesoc_uart_rx_fifo_readable;
assign basesoc_uart_rx_fifo_source_first = basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_uart_rx_fifo_source_last = basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_uart_rx_fifo_source_payload_data = basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_uart_rx_fifo_re = basesoc_uart_rx_fifo_source_ready;
assign basesoc_uart_rx_fifo_syncfifo_re = (basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_uart_rx_fifo_readable) | basesoc_uart_rx_fifo_re));
assign basesoc_uart_rx_fifo_level1 = (basesoc_uart_rx_fifo_level0 + basesoc_uart_rx_fifo_readable);
always @(*) begin
    basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_rx_fifo_replace) begin
        basesoc_uart_rx_fifo_wrport_adr <= (basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_rx_fifo_wrport_adr <= basesoc_uart_rx_fifo_produce;
    end
end
assign basesoc_uart_rx_fifo_wrport_dat_w = basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_uart_rx_fifo_wrport_we = (basesoc_uart_rx_fifo_syncfifo_we & (basesoc_uart_rx_fifo_syncfifo_writable | basesoc_uart_rx_fifo_replace));
assign basesoc_uart_rx_fifo_do_read = (basesoc_uart_rx_fifo_syncfifo_readable & basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_uart_rx_fifo_rdport_adr = basesoc_uart_rx_fifo_consume;
assign basesoc_uart_rx_fifo_syncfifo_dout = basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_uart_rx_fifo_rdport_re = basesoc_uart_rx_fifo_do_read;
assign basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_uart_rx_fifo_level0 != 1'd0);
assign basesoc_timer_zero_trigger = (basesoc_timer_value == 1'd0);
assign basesoc_timer_zero0 = basesoc_timer_zero_status;
assign basesoc_timer_zero1 = basesoc_timer_zero_pending;
always @(*) begin
    basesoc_timer_zero_clear <= 1'd0;
    if ((basesoc_timer_pending_re & basesoc_timer_pending_r)) begin
        basesoc_timer_zero_clear <= 1'd1;
    end
end
assign basesoc_timer_irq = (basesoc_timer_pending_status & basesoc_timer_enable_storage);
assign basesoc_timer_zero_status = basesoc_timer_zero_trigger;
always @(*) begin
    interface0_ack <= 1'd0;
    interface0_dat_r <= 32'd0;
    interface1_adr <= 14'd0;
    interface1_dat_w <= 32'd0;
    interface1_re <= 1'd0;
    interface1_we <= 1'd0;
    next_state <= 1'd0;
    next_state <= state;
    case (state)
        1'd1: begin
            interface0_ack <= 1'd1;
            interface0_dat_r <= interface1_dat_r;
            next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr[29:0];
                interface1_re <= ((~interface0_we) & (interface0_sel != 1'd0));
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
                next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    basesoc_soc_rst <= 1'd0;
    if (basesoc_reset_re) begin
        basesoc_soc_rst <= basesoc_reset_storage[0];
    end
end
assign basesoc_cpu_rst = basesoc_reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = basesoc_reset_storage[1:0];
assign csr_bankarray_csrbank0_scratch0_w = basesoc_scratch_storage[31:0];
assign csr_bankarray_csrbank0_bus_errors_w = basesoc_bus_errors_status[31:0];
assign basesoc_bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_load0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_load0_re <= 1'd0;
    csr_bankarray_csrbank1_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_load0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_load0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_reload0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_reload0_re <= 1'd0;
    csr_bankarray_csrbank1_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_reload0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_reload0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_en0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_en0_re <= 1'd0;
    csr_bankarray_csrbank1_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_en0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_en0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_update_value0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_update_value0_re <= 1'd0;
    csr_bankarray_csrbank1_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank1_update_value0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_update_value0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_value_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_value_re <= 1'd0;
    csr_bankarray_csrbank1_value_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_value_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_value_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_ev_status_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_status_re <= 1'd0;
    csr_bankarray_csrbank1_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank1_ev_status_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_status_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_ev_pending_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank1_ev_pending_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_pending_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_ev_enable0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank1_ev_enable0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_enable0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_load0_w = basesoc_timer_load_storage[31:0];
assign csr_bankarray_csrbank1_reload0_w = basesoc_timer_reload_storage[31:0];
assign csr_bankarray_csrbank1_en0_w = basesoc_timer_en_storage;
assign csr_bankarray_csrbank1_update_value0_w = basesoc_timer_update_value_storage;
assign csr_bankarray_csrbank1_value_w = basesoc_timer_value_status[31:0];
assign basesoc_timer_value_we = csr_bankarray_csrbank1_value_we;
always @(*) begin
    basesoc_timer_status_status <= 1'd0;
    basesoc_timer_status_status <= basesoc_timer_zero0;
end
assign csr_bankarray_csrbank1_ev_status_w = basesoc_timer_status_status;
assign basesoc_timer_status_we = csr_bankarray_csrbank1_ev_status_we;
always @(*) begin
    basesoc_timer_pending_status <= 1'd0;
    basesoc_timer_pending_status <= basesoc_timer_zero1;
end
assign csr_bankarray_csrbank1_ev_pending_w = basesoc_timer_pending_status;
assign basesoc_timer_pending_we = csr_bankarray_csrbank1_ev_pending_we;
assign basesoc_timer_zero2 = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank1_ev_enable0_w = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign basesoc_uart_rxtx_r = csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    basesoc_uart_rxtx_re <= 1'd0;
    basesoc_uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        basesoc_uart_rxtx_re <= csr_bankarray_interface2_bank_bus_we;
        basesoc_uart_rxtx_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_txfull_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_txfull_re <= 1'd0;
    csr_bankarray_csrbank2_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank2_txfull_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_txfull_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_rxempty_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_rxempty_re <= 1'd0;
    csr_bankarray_csrbank2_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank2_rxempty_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_rxempty_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_status_r = csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank2_ev_status_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_status_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_pending_r = csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank2_ev_pending_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_pending_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_enable0_r = csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank2_ev_enable0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_enable0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_txempty_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_txempty_re <= 1'd0;
    csr_bankarray_csrbank2_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank2_txempty_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_txempty_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_rxfull_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_rxfull_re <= 1'd0;
    csr_bankarray_csrbank2_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank2_rxfull_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_rxfull_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_txfull_w = basesoc_uart_txfull_status;
assign basesoc_uart_txfull_we = csr_bankarray_csrbank2_txfull_we;
assign csr_bankarray_csrbank2_rxempty_w = basesoc_uart_rxempty_status;
assign basesoc_uart_rxempty_we = csr_bankarray_csrbank2_rxempty_we;
always @(*) begin
    basesoc_uart_status_status <= 2'd0;
    basesoc_uart_status_status[0] <= basesoc_uart_tx0;
    basesoc_uart_status_status[1] <= basesoc_uart_rx0;
end
assign csr_bankarray_csrbank2_ev_status_w = basesoc_uart_status_status[1:0];
assign basesoc_uart_status_we = csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
    basesoc_uart_pending_status <= 2'd0;
    basesoc_uart_pending_status[0] <= basesoc_uart_tx1;
    basesoc_uart_pending_status[1] <= basesoc_uart_rx1;
end
assign csr_bankarray_csrbank2_ev_pending_w = basesoc_uart_pending_status[1:0];
assign basesoc_uart_pending_we = csr_bankarray_csrbank2_ev_pending_we;
assign basesoc_uart_tx2 = basesoc_uart_enable_storage[0];
assign basesoc_uart_rx2 = basesoc_uart_enable_storage[1];
assign csr_bankarray_csrbank2_ev_enable0_w = basesoc_uart_enable_storage[1:0];
assign csr_bankarray_csrbank2_txempty_w = basesoc_uart_txempty_status;
assign basesoc_uart_txempty_we = csr_bankarray_csrbank2_txempty_we;
assign csr_bankarray_csrbank2_rxfull_w = basesoc_uart_rxfull_status;
assign basesoc_uart_rxfull_we = csr_bankarray_csrbank2_rxfull_we;
assign csr_interconnect_adr = interface1_adr;
assign csr_interconnect_re = interface1_re;
assign csr_interconnect_we = interface1_we;
assign csr_interconnect_dat_w = interface1_dat_w;
assign interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface2_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    self0 <= 30'd0;
    case (grant)
        default: begin
            self0 <= basesoc_pbus_adr;
        end
    endcase
end
always @(*) begin
    self1 <= 32'd0;
    case (grant)
        default: begin
            self1 <= basesoc_pbus_dat_w;
        end
    endcase
end
always @(*) begin
    self2 <= 4'd0;
    case (grant)
        default: begin
            self2 <= basesoc_pbus_sel;
        end
    endcase
end
always @(*) begin
    self3 <= 1'd0;
    case (grant)
        default: begin
            self3 <= basesoc_pbus_cyc;
        end
    endcase
end
always @(*) begin
    self4 <= 1'd0;
    case (grant)
        default: begin
            self4 <= basesoc_pbus_stb;
        end
    endcase
end
always @(*) begin
    self5 <= 1'd0;
    case (grant)
        default: begin
            self5 <= basesoc_pbus_we;
        end
    endcase
end
always @(*) begin
    self6 <= 3'd0;
    case (grant)
        default: begin
            self6 <= basesoc_pbus_cti;
        end
    endcase
end
always @(*) begin
    self7 <= 2'd0;
    case (grant)
        default: begin
            self7 <= basesoc_pbus_bte;
        end
    endcase
end
assign basesoc_rx_rx = multiregimpl1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    if ((~crg_por_done)) begin
        crg_por_count <= (crg_por_count - 1'd1);
    end
    if (por_rst) begin
        crg_por_count <= 16'd65535;
    end
end

always @(posedge sys_clk) begin
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_bus_error) begin
            basesoc_bus_errors <= (basesoc_bus_errors + 1'd1);
        end
    end
    basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((basesoc_basesoc_ram_bus_cyc & basesoc_basesoc_ram_bus_stb) & ((~basesoc_basesoc_ram_bus_ack) | basesoc_basesoc_adr_burst))) begin
        basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & ((~basesoc_ram_bus_ram_bus_ack) | basesoc_ram_adr_burst))) begin
        basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {basesoc_tx_tick, basesoc_tx_phase} <= 24'd9895604;
    if (basesoc_tx_enable) begin
        {basesoc_tx_tick, basesoc_tx_phase} <= (basesoc_tx_phase + 24'd9895604);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (basesoc_tx_count_rs232phytx_next_value_ce0) begin
        basesoc_tx_count <= basesoc_tx_count_rs232phytx_next_value0;
    end
    if (basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (basesoc_tx_data_rs232phytx_next_value_ce2) begin
        basesoc_tx_data <= basesoc_tx_data_rs232phytx_next_value2;
    end
    basesoc_rx_rx_d <= basesoc_rx_rx;
    {basesoc_rx_tick, basesoc_rx_phase} <= 32'd2147483648;
    if (basesoc_rx_enable) begin
        {basesoc_rx_tick, basesoc_rx_phase} <= (basesoc_rx_phase + 24'd9895604);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        basesoc_rx_count <= basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        basesoc_rx_data <= basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (basesoc_uart_tx_clear) begin
        basesoc_uart_tx_pending <= 1'd0;
    end
    basesoc_uart_tx_trigger_d <= basesoc_uart_tx_trigger;
    if ((basesoc_uart_tx_trigger & (~basesoc_uart_tx_trigger_d))) begin
        basesoc_uart_tx_pending <= 1'd1;
    end
    if (basesoc_uart_rx_clear) begin
        basesoc_uart_rx_pending <= 1'd0;
    end
    basesoc_uart_rx_trigger_d <= basesoc_uart_rx_trigger;
    if ((basesoc_uart_rx_trigger & (~basesoc_uart_rx_trigger_d))) begin
        basesoc_uart_rx_pending <= 1'd1;
    end
    if (basesoc_uart_tx_fifo_syncfifo_re) begin
        basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_tx_fifo_re) begin
            basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        basesoc_uart_tx_fifo_produce <= (basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_tx_fifo_do_read) begin
        basesoc_uart_tx_fifo_consume <= (basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        if ((~basesoc_uart_tx_fifo_do_read)) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_tx_fifo_do_read) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_uart_rx_fifo_syncfifo_re) begin
        basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_rx_fifo_re) begin
            basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        basesoc_uart_rx_fifo_produce <= (basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_rx_fifo_do_read) begin
        basesoc_uart_rx_fifo_consume <= (basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        if ((~basesoc_uart_rx_fifo_do_read)) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_rx_fifo_do_read) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_timer_en_storage) begin
        if ((basesoc_timer_value == 1'd0)) begin
            basesoc_timer_value <= basesoc_timer_reload_storage;
        end else begin
            basesoc_timer_value <= (basesoc_timer_value - 1'd1);
        end
    end else begin
        basesoc_timer_value <= basesoc_timer_load_storage;
    end
    if (basesoc_timer_update_value_re) begin
        basesoc_timer_value_status <= basesoc_timer_value;
    end
    if (basesoc_timer_zero_clear) begin
        basesoc_timer_zero_pending <= 1'd0;
    end
    basesoc_timer_zero_trigger_d <= basesoc_timer_zero_trigger;
    if ((basesoc_timer_zero_trigger & (~basesoc_timer_zero_trigger_d))) begin
        basesoc_timer_zero_pending <= 1'd1;
    end
    state <= next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        basesoc_reset_storage[1:0] <= csr_bankarray_csrbank0_reset0_r;
    end
    basesoc_reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        basesoc_scratch_storage[31:0] <= csr_bankarray_csrbank0_scratch0_r;
    end
    basesoc_scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    basesoc_bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_value_w;
            end
            3'd5: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_load0_re) begin
        basesoc_timer_load_storage[31:0] <= csr_bankarray_csrbank1_load0_r;
    end
    basesoc_timer_load_re <= csr_bankarray_csrbank1_load0_re;
    if (csr_bankarray_csrbank1_reload0_re) begin
        basesoc_timer_reload_storage[31:0] <= csr_bankarray_csrbank1_reload0_r;
    end
    basesoc_timer_reload_re <= csr_bankarray_csrbank1_reload0_re;
    if (csr_bankarray_csrbank1_en0_re) begin
        basesoc_timer_en_storage <= csr_bankarray_csrbank1_en0_r;
    end
    basesoc_timer_en_re <= csr_bankarray_csrbank1_en0_re;
    if (csr_bankarray_csrbank1_update_value0_re) begin
        basesoc_timer_update_value_storage <= csr_bankarray_csrbank1_update_value0_r;
    end
    basesoc_timer_update_value_re <= csr_bankarray_csrbank1_update_value0_re;
    basesoc_timer_value_re <= csr_bankarray_csrbank1_value_re;
    basesoc_timer_status_re <= csr_bankarray_csrbank1_ev_status_re;
    if (csr_bankarray_csrbank1_ev_pending_re) begin
        basesoc_timer_pending_r <= csr_bankarray_csrbank1_ev_pending_r;
    end
    basesoc_timer_pending_re <= csr_bankarray_csrbank1_ev_pending_re;
    if (csr_bankarray_csrbank1_ev_enable0_re) begin
        basesoc_timer_enable_storage <= csr_bankarray_csrbank1_ev_enable0_r;
    end
    basesoc_timer_enable_re <= csr_bankarray_csrbank1_ev_enable0_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= basesoc_uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_rxfull_w;
            end
        endcase
    end
    basesoc_uart_txfull_re <= csr_bankarray_csrbank2_txfull_re;
    basesoc_uart_rxempty_re <= csr_bankarray_csrbank2_rxempty_re;
    basesoc_uart_status_re <= csr_bankarray_csrbank2_ev_status_re;
    if (csr_bankarray_csrbank2_ev_pending_re) begin
        basesoc_uart_pending_r[1:0] <= csr_bankarray_csrbank2_ev_pending_r;
    end
    basesoc_uart_pending_re <= csr_bankarray_csrbank2_ev_pending_re;
    if (csr_bankarray_csrbank2_ev_enable0_re) begin
        basesoc_uart_enable_storage[1:0] <= csr_bankarray_csrbank2_ev_enable0_r;
    end
    basesoc_uart_enable_re <= csr_bankarray_csrbank2_ev_enable0_re;
    basesoc_uart_txempty_re <= csr_bankarray_csrbank2_txempty_re;
    basesoc_uart_rxfull_re <= csr_bankarray_csrbank2_rxfull_re;
    if (sys_rst) begin
        basesoc_reset_storage <= 2'd0;
        basesoc_reset_re <= 1'd0;
        basesoc_scratch_storage <= 32'd305419896;
        basesoc_scratch_re <= 1'd0;
        basesoc_bus_errors_re <= 1'd0;
        basesoc_bus_errors <= 32'd0;
        basesoc_basesoc_ram_bus_ack <= 1'd0;
        basesoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        basesoc_tx_tick <= 1'd0;
        basesoc_rx_tick <= 1'd0;
        basesoc_rx_rx_d <= 1'd0;
        basesoc_uart_txfull_re <= 1'd0;
        basesoc_uart_rxempty_re <= 1'd0;
        basesoc_uart_tx_pending <= 1'd0;
        basesoc_uart_tx_trigger_d <= 1'd0;
        basesoc_uart_rx_pending <= 1'd0;
        basesoc_uart_rx_trigger_d <= 1'd0;
        basesoc_uart_status_re <= 1'd0;
        basesoc_uart_pending_re <= 1'd0;
        basesoc_uart_pending_r <= 2'd0;
        basesoc_uart_enable_storage <= 2'd0;
        basesoc_uart_enable_re <= 1'd0;
        basesoc_uart_txempty_re <= 1'd0;
        basesoc_uart_rxfull_re <= 1'd0;
        basesoc_uart_tx_fifo_readable <= 1'd0;
        basesoc_uart_tx_fifo_level0 <= 5'd0;
        basesoc_uart_tx_fifo_produce <= 4'd0;
        basesoc_uart_tx_fifo_consume <= 4'd0;
        basesoc_uart_rx_fifo_readable <= 1'd0;
        basesoc_uart_rx_fifo_level0 <= 5'd0;
        basesoc_uart_rx_fifo_produce <= 4'd0;
        basesoc_uart_rx_fifo_consume <= 4'd0;
        basesoc_timer_load_storage <= 32'd0;
        basesoc_timer_load_re <= 1'd0;
        basesoc_timer_reload_storage <= 32'd0;
        basesoc_timer_reload_re <= 1'd0;
        basesoc_timer_en_storage <= 1'd0;
        basesoc_timer_en_re <= 1'd0;
        basesoc_timer_update_value_storage <= 1'd0;
        basesoc_timer_update_value_re <= 1'd0;
        basesoc_timer_value_status <= 32'd0;
        basesoc_timer_value_re <= 1'd0;
        basesoc_timer_zero_pending <= 1'd0;
        basesoc_timer_zero_trigger_d <= 1'd0;
        basesoc_timer_status_re <= 1'd0;
        basesoc_timer_pending_re <= 1'd0;
        basesoc_timer_pending_r <= 1'd0;
        basesoc_timer_enable_storage <= 1'd0;
        basesoc_timer_enable_re <= 1'd0;
        basesoc_timer_value <= 32'd0;
        slave_sel_r <= 5'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        state <= 1'd0;
    end
    multiregimpl0 <= serial_rx;
    multiregimpl1 <= multiregimpl0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 32768-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:32767];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_basesoc_adr];
end
assign basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (basesoc_ram_we[0])
		sram[basesoc_ram_adr][7:0] <= basesoc_ram_dat_w[7:0];
	if (basesoc_ram_we[1])
		sram[basesoc_ram_adr][15:8] <= basesoc_ram_dat_w[15:8];
	if (basesoc_ram_we[2])
		sram[basesoc_ram_adr][23:16] <= basesoc_ram_dat_w[23:16];
	if (basesoc_ram_we[3])
		sram[basesoc_ram_adr][31:24] <= basesoc_ram_dat_w[31:24];
	sram_adr0 <= basesoc_ram_adr;
end
assign basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 52-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:51];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_wrport_we)
		storage[basesoc_uart_tx_fifo_wrport_adr] <= basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[basesoc_uart_tx_fifo_rdport_adr];
end
assign basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_wrport_we)
		storage_1[basesoc_uart_rx_fifo_wrport_adr] <= basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[basesoc_uart_rx_fifo_rdport_adr];
end
assign basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance PLL of PLL Module.
//------------------------------------------------------------------------------
PLL #(
	// Parameters.
	.CLK0_IN_SEL       (1'd0),
	.CLK0_OUT_SEL      (1'd0),
	.CLK1_IN_SEL       (1'd0),
	.CLK1_OUT_SEL      (1'd0),
	.CLK2_IN_SEL       (1'd0),
	.CLK2_OUT_SEL      (1'd0),
	.CLK3_IN_SEL       (1'd0),
	.CLK3_OUT_SEL      (1'd0),
	.CLK4_IN_SEL       (1'd0),
	.CLK4_OUT_SEL      (1'd0),
	.CLK5_IN_SEL       (1'd0),
	.CLK5_OUT_SEL      (1'd0),
	.CLKFB_SEL         ("INTERNAL"),
	.CLKOUT0_DT_DIR    (1'd1),
	.CLKOUT0_DT_STEP   (1'd0),
	.CLKOUT0_EN        ("TRUE"),
	.CLKOUT0_PE_COARSE (1'd0),
	.CLKOUT0_PE_FINE   (1'd0),
	.CLKOUT1_DT_DIR    (1'd1),
	.CLKOUT1_DT_STEP   (1'd0),
	.CLKOUT1_EN        ("FALSE"),
	.CLKOUT1_PE_COARSE (1'd0),
	.CLKOUT1_PE_FINE   (1'd0),
	.CLKOUT2_DT_DIR    (1'd1),
	.CLKOUT2_DT_STEP   (1'd0),
	.CLKOUT2_EN        ("FALSE"),
	.CLKOUT2_PE_COARSE (1'd0),
	.CLKOUT2_PE_FINE   (1'd0),
	.CLKOUT3_DT_DIR    (1'd1),
	.CLKOUT3_DT_STEP   (1'd0),
	.CLKOUT3_EN        ("FALSE"),
	.CLKOUT3_PE_COARSE (1'd0),
	.CLKOUT3_PE_FINE   (1'd0),
	.CLKOUT4_EN        ("FALSE"),
	.CLKOUT4_PE_COARSE (1'd0),
	.CLKOUT4_PE_FINE   (1'd0),
	.CLKOUT5_EN        ("FALSE"),
	.CLKOUT5_PE_COARSE (1'd0),
	.CLKOUT5_PE_FINE   (1'd0),
	.CLKOUT6_EN        ("FALSE"),
	.CLKOUT6_PE_COARSE (1'd0),
	.CLKOUT6_PE_FINE   (1'd0),
	.DE0_EN            ("FALSE"),
	.DE1_EN            ("FALSE"),
	.DE2_EN            ("FALSE"),
	.DE3_EN            ("FALSE"),
	.DE4_EN            ("FALSE"),
	.DE5_EN            ("FALSE"),
	.DE6_EN            ("FALSE"),
	.DYN_DPA_EN        ("FALSE"),
	.DYN_DT0_SEL       ("FALSE"),
	.DYN_DT1_SEL       ("FALSE"),
	.DYN_DT2_SEL       ("FALSE"),
	.DYN_DT3_SEL       ("FALSE"),
	.DYN_FBDIV_SEL     ("FALSE"),
	.DYN_ICP_SEL       ("FALSE"),
	.DYN_IDIV_SEL      ("FALSE"),
	.DYN_LPF_SEL       ("FALSE"),
	.DYN_ODIV0_SEL     ("FALSE"),
	.DYN_ODIV1_SEL     ("FALSE"),
	.DYN_ODIV2_SEL     ("FALSE"),
	.DYN_ODIV3_SEL     ("FALSE"),
	.DYN_ODIV4_SEL     ("FALSE"),
	.DYN_ODIV5_SEL     ("FALSE"),
	.DYN_ODIV6_SEL     ("FALSE"),
	.DYN_PE0_SEL       ("FALSE"),
	.DYN_PE1_SEL       ("FALSE"),
	.DYN_PE2_SEL       ("FALSE"),
	.DYN_PE3_SEL       ("FALSE"),
	.DYN_PE4_SEL       ("FALSE"),
	.DYN_PE5_SEL       ("FALSE"),
	.DYN_PE6_SEL       ("FALSE"),
	.FBDIV_SEL         (1'd1),
	.FCLKIN            ("50.0"),
	.IDIV_SEL          (1'd1),
	.MDIV_FRAC_SEL     (1'd0),
	.MDIV_SEL          (5'd16),
	.ODIV0_FRAC_SEL    (1'd0),
	.ODIV0_SEL         (5'd16),
	.ODIV1_SEL         (4'd8),
	.ODIV2_SEL         (4'd8),
	.ODIV3_SEL         (4'd8),
	.ODIV4_SEL         (4'd8),
	.ODIV5_SEL         (4'd8),
	.ODIV6_SEL         (4'd8),
	.RESET_I_EN        ("FALSE"),
	.RESET_O_EN        ("FALSE"),
	.SSC_EN            ("FALSE")
) PLL (
	// Inputs.
	.CLKFB         (1'd0),
	.CLKIN         (crg_clkin),
	.DT0           (4'd0),
	.DT1           (4'd0),
	.DT2           (4'd0),
	.DT3           (4'd0),
	.ENCLK0        (1'd1),
	.ENCLK1        (1'd1),
	.ENCLK2        (1'd1),
	.ENCLK3        (1'd1),
	.ENCLK4        (1'd1),
	.ENCLK5        (1'd1),
	.ENCLK6        (1'd1),
	.FBDSEL        (6'd0),
	.ICPSEL        (6'd0),
	.IDSEL         (6'd0),
	.LPFCAP        (2'd0),
	.LPFRES        (3'd0),
	.MDSEL         (7'd0),
	.MDSEL_FRAC    (3'd0),
	.ODSEL0        (7'd0),
	.ODSEL0_FRAC   (3'd0),
	.ODSEL1        (7'd0),
	.ODSEL2        (7'd0),
	.ODSEL3        (7'd0),
	.ODSEL4        (7'd0),
	.ODSEL5        (7'd0),
	.ODSEL6        (7'd0),
	.PLLPWD        (1'd0),
	.PSDIR         (1'd0),
	.PSPULSE       (1'd0),
	.PSSEL         (3'd0),
	.RESET         (crg_reset),
	.RESET_I       (1'd0),
	.RESET_O       (1'd0),
	.SSCMDSEL      (7'd0),
	.SSCMDSEL_FRAC (3'd0),
	.SSCON         (1'd0),
	.SSCPOL        (1'd0),

	// Outputs.
	.CLKFBOUT      (gw5apll6),
	.CLKOUT0       (crg_clkout),
	.CLKOUT1       (gw5apll0),
	.CLKOUT2       (gw5apll1),
	.CLKOUT3       (gw5apll2),
	.CLKOUT4       (gw5apll3),
	.CLKOUT5       (gw5apll4),
	.CLKOUT6       (gw5apll5),
	.LOCK          (crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscvLitexSmpCluster_Cc1_Iw32Is4096Iy1_Dw32Ds4096Dy1_ITs4DTs4_Ood_Wm_Hb1 of VexRiscvLitexSmpCluster_Cc1_Iw32Is4096Iy1_Dw32Ds4096Dy1_ITs4DTs4_Ood_Wm_Hb1 Module.
//------------------------------------------------------------------------------
VexRiscvLitexSmpCluster_Cc1_Iw32Is4096Iy1_Dw32Ds4096Dy1_ITs4DTs4_Ood_Wm_Hb1 VexRiscvLitexSmpCluster_Cc1_Iw32Is4096Iy1_Dw32Ds4096Dy1_ITs4DTs4_Ood_Wm_Hb1(
	// Inputs.
	.clintWishbone_ADR      (basesoc_clintbus_adr),
	.clintWishbone_CYC      (basesoc_clintbus_cyc),
	.clintWishbone_DAT_MOSI (basesoc_clintbus_dat_w),
	.clintWishbone_STB      (basesoc_clintbus_stb),
	.clintWishbone_WE       (basesoc_clintbus_we),
	.debugCd_external_clk   (sys_clk),
	.debugCd_external_reset ((sys_rst | basesoc_reset)),
	.debugPort_capture      (basesoc_jtag_capture),
	.debugPort_enable       (basesoc_jtag_enable),
	.debugPort_reset        (basesoc_jtag_reset),
	.debugPort_shift        (basesoc_jtag_shift),
	.debugPort_tdi          (basesoc_jtag_tdi),
	.debugPort_update       (basesoc_jtag_update),
	.interrupts             (basesoc_interrupt),
	.jtag_clk               (basesoc_jtag_clk),
	.peripheral_ACK         (basesoc_pbus_ack),
	.peripheral_DAT_MISO    (basesoc_pbus_dat_r),
	.peripheral_ERR         (basesoc_pbus_err),
	.plicWishbone_ADR       (basesoc_plicbus_adr),
	.plicWishbone_CYC       (basesoc_plicbus_cyc),
	.plicWishbone_DAT_MOSI  (basesoc_plicbus_dat_w),
	.plicWishbone_STB       (basesoc_plicbus_stb),
	.plicWishbone_WE        (basesoc_plicbus_we),

	// Outputs.
	.clintWishbone_ACK      (basesoc_clintbus_ack),
	.clintWishbone_DAT_MISO (basesoc_clintbus_dat_r),
	.debugPort_tdo          (basesoc_jtag_tdo),
	.peripheral_ADR         (basesoc_pbus_adr),
	.peripheral_BTE         (basesoc_pbus_bte),
	.peripheral_CTI         (basesoc_pbus_cti),
	.peripheral_CYC         (basesoc_pbus_cyc),
	.peripheral_DAT_MOSI    (basesoc_pbus_dat_w),
	.peripheral_SEL         (basesoc_pbus_sel),
	.peripheral_STB         (basesoc_pbus_stb),
	.peripheral_WE          (basesoc_pbus_we),
	.plicWishbone_ACK       (basesoc_plicbus_ack),
	.plicWishbone_DAT_MISO  (basesoc_plicbus_dat_r)
);

//------------------------------------------------------------------------------
// Instance DFFP of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP(
	// Inputs.
	.CLK    (sys_clk),
	.D      (1'd0),
	.PRESET ((~crg_locked)),

	// Outputs.
	.Q      (rst1)
);

//------------------------------------------------------------------------------
// Instance DFFP_1 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_1(
	// Inputs.
	.CLK    (sys_clk),
	.D      (rst1),
	.PRESET ((~crg_locked)),

	// Outputs.
	.Q      (sys_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-10-25 17:06:59.
//------------------------------------------------------------------------------
